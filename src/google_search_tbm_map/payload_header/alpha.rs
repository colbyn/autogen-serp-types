// AUTOGENERATED: strict types + deserializers (fully-qualified paths)
// F64 tolerance helpers (absolute + relative)
const __ABS_TOL: f64 = 1e-12;
const __REL_TOL: f64 = 1e-12;

#[inline]
fn __tol(b: f64) -> f64 {
    let t = if __ABS_TOL > __REL_TOL * b.abs() { __ABS_TOL } else { __REL_TOL * b.abs() };
    if t.is_finite() { t } else { 0.0 }
}

#[inline] fn __ge_f64(x: f64, b: f64) -> bool { x + __tol(b) >= b }
#[inline] fn __le_f64(x: f64, b: f64) -> bool { x <= b + __tol(b) }
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Null;

impl<'de> ::serde::Deserialize<'de> for Null {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        // Accept only explicit null
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Null;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "null")
            }
            fn visit_unit<E>(self) -> ::std::result::Result<Null, E>
            where
                E: ::serde::de::Error
            {
                Ok(Null)
            }
            fn visit_none<E>(self) -> ::std::result::Result<Null, E>
            where
                E: ::serde::de::Error
            {
                Ok(Null)
            }
        }
        de.deserialize_option(V)
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root01010ItemAlt0ItemAlt01(pub f64);
impl ::core::ops::Deref for Root01010ItemAlt0ItemAlt01 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root01010ItemAlt0ItemAlt01 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root01010ItemAlt0ItemAlt01: non-finite number")); }
        
        Ok(Root01010ItemAlt0ItemAlt01(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root01010ItemAlt0ItemAlt02Alt1(pub f64);
impl ::core::ops::Deref for Root01010ItemAlt0ItemAlt02Alt1 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root01010ItemAlt0ItemAlt02Alt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root01010ItemAlt0ItemAlt02Alt1: non-finite number")); }
        
        Ok(Root01010ItemAlt0ItemAlt02Alt1(x))
    }
}
#[derive(Debug)]
pub enum Root01010ItemAlt0ItemAlt02 {
    V0(::std::vec::Vec<Null>),
    V1(Root01010ItemAlt0ItemAlt02Alt1),
}

impl<'de> ::serde::Deserialize<'de> for Root01010ItemAlt0ItemAlt02 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Null>>(val.clone()) {
                Ok(x) => return Ok(Root01010ItemAlt0ItemAlt02::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Null>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root01010ItemAlt0ItemAlt02Alt1>(val.clone()) {
                Ok(x) => return Ok(Root01010ItemAlt0ItemAlt02::V1(x)),
                Err(e) => errs.push((1, "Root01010ItemAlt0ItemAlt02Alt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root01010ItemAlt0ItemAlt0(
    pub Null,
    pub ::core::option::Option<Root01010ItemAlt0ItemAlt01>,
    pub Root01010ItemAlt0ItemAlt02,
);

impl<'de> ::serde::Deserialize<'de> for Root01010ItemAlt0ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root01010ItemAlt0ItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root01010ItemAlt0ItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::core::option::Option<Root01010ItemAlt0ItemAlt01> = match seq.next_element::<::core::option::Option<Root01010ItemAlt0ItemAlt01>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root01010ItemAlt0ItemAlt02 = match seq.next_element::<Root01010ItemAlt0ItemAlt02>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root01010ItemAlt0ItemAlt0(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root01010ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root01010ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root01010ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root01010ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root01010ItemAlt0Item {
    V0(Root01010ItemAlt0ItemAlt0),
    V1(Root01010ItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root01010ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root01010ItemAlt0ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root01010ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "Root01010ItemAlt0ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root01010ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root01010ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root01010ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root01010ItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root01010ItemAlt1(pub i64);
impl ::core::ops::Deref for Root01010ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root01010ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root01010ItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root01010Item {
    V0(::std::vec::Vec<Root01010ItemAlt0Item>),
    V1(Root01010ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root01010Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root01010ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root01010Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root01010ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root01010ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root01010Item::V1(x)),
                Err(e) => errs.push((1, "Root01010ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root01010Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root01012(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root01012 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root01012;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root01012, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root01012(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=19 (required first 0 slots); accepts 0..=19 elements
#[derive(Debug)]
pub struct Root010(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<Root01010Item>>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root01012>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<Null>>,
);

impl<'de> ::serde::Deserialize<'de> for Root010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root010;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=19")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root010, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<::std::vec::Vec<::core::option::Option<Root01010Item>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<Root01010Item>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<Root01012> = match seq.next_element::<::core::option::Option<Root01012>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a13: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a14: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a15: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a16: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a17: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a18: ::core::option::Option<::std::vec::Vec<Null>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Null>>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root010(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root01(
    pub Root010,
);

impl<'de> ::serde::Deserialize<'de> for Root01 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root01;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root01, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root010 = match seq.next_element::<Root010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root01(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root03(pub i64);
impl ::core::ops::Deref for Root03 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root03 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root03(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root05(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root05 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root05;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root05, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root05(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root09(pub i64);
impl ::core::ops::Deref for Root09 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root09 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root09(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root011(pub i64);
impl ::core::ops::Deref for Root011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root011(x))
    }
}
/// tuple len=12 (required exactly 12)
#[derive(Debug)]
pub struct Root0(
    pub ::std::string::String,
    pub Root01,
    pub Null,
    pub ::core::option::Option<Root03>,
    pub Null,
    pub ::core::option::Option<Root05>,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root09>,
    pub Null,
    pub Root011,
);

impl<'de> ::serde::Deserialize<'de> for Root0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 12")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 12 elements")), };
                let a1: Root01 = match seq.next_element::<Root01>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 12 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 12 elements")), };
                let a3: ::core::option::Option<Root03> = match seq.next_element::<::core::option::Option<Root03>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 12 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 12 elements")), };
                let a5: ::core::option::Option<Root05> = match seq.next_element::<::core::option::Option<Root05>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 12 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 12 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 12 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 12 elements")), };
                let a9: ::core::option::Option<Root09> = match seq.next_element::<::core::option::Option<Root09>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 12 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 12 elements")), };
                let a11: Root011 = match seq.next_element::<Root011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 12 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root0(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root100(pub f64);
impl ::core::ops::Deref for Root100 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root100: non-finite number")); }
        
        Ok(Root100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root101(pub f64);
impl ::core::ops::Deref for Root101 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root101: non-finite number")); }
        
        Ok(Root101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root102(pub f64);
impl ::core::ops::Deref for Root102 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root102: non-finite number")); }
        
        Ok(Root102(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root10(
    pub Root100,
    pub Root101,
    pub Root102,
);

impl<'de> ::serde::Deserialize<'de> for Root10 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root10;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root10, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root100 = match seq.next_element::<Root100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root101 = match seq.next_element::<Root101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root102 = match seq.next_element::<Root102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root10(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root110(pub i64);
impl ::core::ops::Deref for Root110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root110(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root111(pub i64);
impl ::core::ops::Deref for Root111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root111 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root111(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root112(pub i64);
impl ::core::ops::Deref for Root112 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root112 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root112(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root11(
    pub Root110,
    pub Root111,
    pub Root112,
);

impl<'de> ::serde::Deserialize<'de> for Root11 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root11;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root11, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root110 = match seq.next_element::<Root110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root111 = match seq.next_element::<Root111>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root112 = match seq.next_element::<Root112>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root11(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root120(pub i64);
impl ::core::ops::Deref for Root120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root121(pub i64);
impl ::core::ops::Deref for Root121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root121(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root12(
    pub Root120,
    pub Root121,
);

impl<'de> ::serde::Deserialize<'de> for Root12 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root12;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root12, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root120 = match seq.next_element::<Root120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root121 = match seq.next_element::<Root121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root12(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root13(pub f64);
impl ::core::ops::Deref for Root13 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root13 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root13: non-finite number")); }
        
        Ok(Root13(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root1(
    pub Root10,
    pub Root11,
    pub Root12,
    pub Root13,
);

impl<'de> ::serde::Deserialize<'de> for Root1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root10 = match seq.next_element::<Root10>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root11 = match seq.next_element::<Root11>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root12 = match seq.next_element::<Root12>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root13 = match seq.next_element::<Root13>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root2ItemAlt00Item202(pub f64);
impl ::core::ops::Deref for Root2ItemAlt00Item202 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item202 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root2ItemAlt00Item202: non-finite number")); }
        
        Ok(Root2ItemAlt00Item202(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root2ItemAlt00Item203(pub f64);
impl ::core::ops::Deref for Root2ItemAlt00Item203 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item203 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root2ItemAlt00Item203: non-finite number")); }
        
        Ok(Root2ItemAlt00Item203(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root2ItemAlt00Item20(
    pub Null,
    pub Null,
    pub Root2ItemAlt00Item202,
    pub Root2ItemAlt00Item203,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item20 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item20;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item20, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root2ItemAlt00Item202 = match seq.next_element::<Root2ItemAlt00Item202>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root2ItemAlt00Item203 = match seq.next_element::<Root2ItemAlt00Item203>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item20(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2ItemAlt00Item23(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item23 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item23;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item23, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item23(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item25(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item25 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item25 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item25(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root2ItemAlt00Item26(pub f64);
impl ::core::ops::Deref for Root2ItemAlt00Item26 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item26 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root2ItemAlt00Item26: non-finite number")); }
        
        Ok(Root2ItemAlt00Item26(x))
    }
}
/// tuple len=7 (required first 0 slots); accepts 0..=7 elements
#[derive(Debug)]
pub struct Root2ItemAlt00Item2(
    pub ::core::option::Option<Root2ItemAlt00Item20>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2ItemAlt00Item23>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2ItemAlt00Item25>,
    pub ::core::option::Option<Root2ItemAlt00Item26>,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item2;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item2, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root2ItemAlt00Item20> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item20>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root2ItemAlt00Item23> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item23>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Root2ItemAlt00Item25> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item25>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Root2ItemAlt00Item26> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item26>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root2ItemAlt00Item2(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2ItemAlt00Item30(pub ::std::string::String);
impl ::core::ops::Deref for Root2ItemAlt00Item30 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item30 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2ItemAlt00Item30: expected URI scheme"));
        }
        Ok(Root2ItemAlt00Item30(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2ItemAlt00Item34(pub ::std::string::String);
impl ::core::ops::Deref for Root2ItemAlt00Item34 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item34 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2ItemAlt00Item34: expected URI scheme"));
        }
        Ok(Root2ItemAlt00Item34(s))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2ItemAlt00Item37(
    pub ::std::string::String,
    pub ::core::option::Option<::std::string::String>,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item37 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item37;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item37, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item37(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root2ItemAlt00Item39ItemAlt0(pub f64);
impl ::core::ops::Deref for Root2ItemAlt00Item39ItemAlt0 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item39ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root2ItemAlt00Item39ItemAlt0: non-finite number")); }
        
        Ok(Root2ItemAlt00Item39ItemAlt0(x))
    }
}
#[derive(Debug)]
pub enum Root2ItemAlt00Item39Item {
    V0(Root2ItemAlt00Item39ItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item39Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root2ItemAlt00Item39ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root2ItemAlt00Item39Item::V0(x)),
                Err(e) => errs.push((0, "Root2ItemAlt00Item39ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root2ItemAlt00Item39Item::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
/// tuple len=10 (required first 0 slots); accepts 0..=10 elements
#[derive(Debug)]
pub struct Root2ItemAlt00Item3(
    pub ::core::option::Option<Root2ItemAlt00Item30>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2ItemAlt00Item34>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2ItemAlt00Item37>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<Root2ItemAlt00Item39Item>>,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item3;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=10")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item3, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root2ItemAlt00Item30> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item30>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root2ItemAlt00Item34> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item34>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Root2ItemAlt00Item37> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item37>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<::std::vec::Vec<Root2ItemAlt00Item39Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root2ItemAlt00Item39Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root2ItemAlt00Item3(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2ItemAlt00Item4Item(pub ::std::string::String);
impl ::core::ops::Deref for Root2ItemAlt00Item4Item {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item4Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2ItemAlt00Item4Item: expected URI scheme"));
        }
        Ok(Root2ItemAlt00Item4Item(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item52(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item52 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item52 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item52(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2ItemAlt00Item53Item(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item53Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item53Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item53Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item53Item(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=6 (required exactly 6)
#[derive(Debug)]
pub struct Root2ItemAlt00Item5(
    pub ::std::string::String,
    pub ::std::string::String,
    pub Root2ItemAlt00Item52,
    pub ::std::vec::Vec<Root2ItemAlt00Item53Item>,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item5 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item5;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item5, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root2ItemAlt00Item52 = match seq.next_element::<Root2ItemAlt00Item52>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<Root2ItemAlt00Item53Item> = match seq.next_element::<::std::vec::Vec<Root2ItemAlt00Item53Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item5(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item60(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item60 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item60 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item60(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item61(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item61 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item61 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item61(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item640(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item640 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item640 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item640(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item641(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item641 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item641 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item641(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item642(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item642 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item642 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item642(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item643(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item643 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item643 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item643(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item644(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item644 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item644 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item644(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug)]
pub struct Root2ItemAlt00Item64(
    pub Root2ItemAlt00Item640,
    pub Root2ItemAlt00Item641,
    pub Root2ItemAlt00Item642,
    pub Root2ItemAlt00Item643,
    pub Root2ItemAlt00Item644,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item64 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item64;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item64, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt00Item640 = match seq.next_element::<Root2ItemAlt00Item640>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root2ItemAlt00Item641 = match seq.next_element::<Root2ItemAlt00Item641>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root2ItemAlt00Item642 = match seq.next_element::<Root2ItemAlt00Item642>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root2ItemAlt00Item643 = match seq.next_element::<Root2ItemAlt00Item643>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root2ItemAlt00Item644 = match seq.next_element::<Root2ItemAlt00Item644>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item64(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item65(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item65 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item65 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item65(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item66(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item66 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item66 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item66(x))
    }
}
/// tuple len=7 (required exactly 7)
#[derive(Debug)]
pub struct Root2ItemAlt00Item6(
    pub Root2ItemAlt00Item60,
    pub Root2ItemAlt00Item61,
    pub Null,
    pub Null,
    pub Root2ItemAlt00Item64,
    pub Root2ItemAlt00Item65,
    pub Root2ItemAlt00Item66,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item6 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item6;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item6, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt00Item60 = match seq.next_element::<Root2ItemAlt00Item60>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Root2ItemAlt00Item61 = match seq.next_element::<Root2ItemAlt00Item61>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Root2ItemAlt00Item64 = match seq.next_element::<Root2ItemAlt00Item64>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Root2ItemAlt00Item65 = match seq.next_element::<Root2ItemAlt00Item65>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root2ItemAlt00Item66 = match seq.next_element::<Root2ItemAlt00Item66>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item6(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item8(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item8 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item8 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item8(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item11(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item11 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item11 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item11(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2ItemAlt00Item13100(pub ::std::string::String);
impl ::core::ops::Deref for Root2ItemAlt00Item13100 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item13100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2ItemAlt00Item13100: expected URI scheme"));
        }
        Ok(Root2ItemAlt00Item13100(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2ItemAlt00Item1310(
    pub Root2ItemAlt00Item13100,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item1310 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item1310;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item1310, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt00Item13100 = match seq.next_element::<Root2ItemAlt00Item13100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item1310(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2ItemAlt00Item131(
    pub Root2ItemAlt00Item1310,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item131 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item131;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item131, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt00Item1310 = match seq.next_element::<Root2ItemAlt00Item1310>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item131(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root2ItemAlt00Item13(
    pub Null,
    pub Root2ItemAlt00Item131,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item13 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item13;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item13, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root2ItemAlt00Item131 = match seq.next_element::<Root2ItemAlt00Item131>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item13(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item15(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item15 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item15 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item15(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt00Item16Item0(pub i64);
impl ::core::ops::Deref for Root2ItemAlt00Item16Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item16Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt00Item16Item0(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2ItemAlt00Item16Item(
    pub Root2ItemAlt00Item16Item0,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item16Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item16Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item16Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt00Item16Item0 = match seq.next_element::<Root2ItemAlt00Item16Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt00Item16Item(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=17 (required first 0 slots); accepts 0..=17 elements
#[derive(Debug)]
pub struct Root2ItemAlt00Item(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root2ItemAlt00Item2>,
    pub ::core::option::Option<Root2ItemAlt00Item3>,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<Root2ItemAlt00Item4Item>>>,
    pub ::core::option::Option<Root2ItemAlt00Item5>,
    pub ::core::option::Option<Root2ItemAlt00Item6>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2ItemAlt00Item8>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2ItemAlt00Item11>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2ItemAlt00Item13>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root2ItemAlt00Item15>,
    pub ::core::option::Option<::std::vec::Vec<Root2ItemAlt00Item16Item>>,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt00Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=17")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt00Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Root2ItemAlt00Item2> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item2>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root2ItemAlt00Item3> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item3>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<::std::vec::Vec<::core::option::Option<Root2ItemAlt00Item4Item>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<Root2ItemAlt00Item4Item>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Root2ItemAlt00Item5> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item5>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Root2ItemAlt00Item6> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item6>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Root2ItemAlt00Item8> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item8>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Root2ItemAlt00Item11> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item11>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a13: ::core::option::Option<Root2ItemAlt00Item13> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item13>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a14: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a15: ::core::option::Option<Root2ItemAlt00Item15> = match seq.next_element::<::core::option::Option<Root2ItemAlt00Item15>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a16: ::core::option::Option<::std::vec::Vec<Root2ItemAlt00Item16Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root2ItemAlt00Item16Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root2ItemAlt00Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt010(pub i64);
impl ::core::ops::Deref for Root2ItemAlt010 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt010(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt011(pub i64);
impl ::core::ops::Deref for Root2ItemAlt011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt013(pub i64);
impl ::core::ops::Deref for Root2ItemAlt013 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt013 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt013(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2ItemAlt014(pub ::std::string::String);
impl ::core::ops::Deref for Root2ItemAlt014 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt014 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2ItemAlt014: expected URI scheme"));
        }
        Ok(Root2ItemAlt014(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt016(pub i64);
impl ::core::ops::Deref for Root2ItemAlt016 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt016 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt016(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt017(pub i64);
impl ::core::ops::Deref for Root2ItemAlt017 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt017 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt017(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt018(pub i64);
impl ::core::ops::Deref for Root2ItemAlt018 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt018 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt018(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt019(pub i64);
impl ::core::ops::Deref for Root2ItemAlt019 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt019 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt019(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2ItemAlt0110(pub ::std::string::String);
impl ::core::ops::Deref for Root2ItemAlt0110 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2ItemAlt0110: expected URI scheme"));
        }
        Ok(Root2ItemAlt0110(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0112(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0112 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0112 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0112(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0113(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0113 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0113 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0113(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0114(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0114 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0114 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0114(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt01150(pub i64);
impl ::core::ops::Deref for Root2ItemAlt01150 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt01150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt01150(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt01151(pub i64);
impl ::core::ops::Deref for Root2ItemAlt01151 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt01151 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt01151(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root2ItemAlt0115(
    pub Root2ItemAlt01150,
    pub Root2ItemAlt01151,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0115 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt0115;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt0115, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt01150 = match seq.next_element::<Root2ItemAlt01150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root2ItemAlt01151 = match seq.next_element::<Root2ItemAlt01151>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt0115(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0117(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0117 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0117 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0117(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0118(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0118 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0118 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0118(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0119(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0119 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0119 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0119(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0120(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0121(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt01250(pub i64);
impl ::core::ops::Deref for Root2ItemAlt01250 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt01250 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt01250(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt01251(pub i64);
impl ::core::ops::Deref for Root2ItemAlt01251 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt01251 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt01251(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root2ItemAlt0125(
    pub Root2ItemAlt01250,
    pub Root2ItemAlt01251,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0125 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt0125;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt0125, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt01250 = match seq.next_element::<Root2ItemAlt01250>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root2ItemAlt01251 = match seq.next_element::<Root2ItemAlt01251>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt0125(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0128(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0128 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0128 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0128(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0129(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0129 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0129 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0129(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0130(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0130 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0130 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0130(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0131(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0131 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0131 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0131(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt0132(pub i64);
impl ::core::ops::Deref for Root2ItemAlt0132 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0132 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt0132(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt01370(pub i64);
impl ::core::ops::Deref for Root2ItemAlt01370 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt01370 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt01370(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt01371(pub i64);
impl ::core::ops::Deref for Root2ItemAlt01371 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt01371 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt01371(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root2ItemAlt0137(
    pub Root2ItemAlt01370,
    pub Root2ItemAlt01371,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0137 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt0137;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt0137, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt01370 = match seq.next_element::<Root2ItemAlt01370>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root2ItemAlt01371 = match seq.next_element::<Root2ItemAlt01371>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt0137(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=38 (required exactly 38)
#[derive(Debug)]
pub struct Root2ItemAlt01(
    pub Root2ItemAlt010,
    pub Root2ItemAlt011,
    pub Null,
    pub Root2ItemAlt013,
    pub Root2ItemAlt014,
    pub Null,
    pub Root2ItemAlt016,
    pub Root2ItemAlt017,
    pub Root2ItemAlt018,
    pub Root2ItemAlt019,
    pub Root2ItemAlt0110,
    pub Null,
    pub Root2ItemAlt0112,
    pub Root2ItemAlt0113,
    pub Root2ItemAlt0114,
    pub Root2ItemAlt0115,
    pub Null,
    pub Root2ItemAlt0117,
    pub Root2ItemAlt0118,
    pub Root2ItemAlt0119,
    pub Root2ItemAlt0120,
    pub Root2ItemAlt0121,
    pub Null,
    pub Null,
    pub Null,
    pub Root2ItemAlt0125,
    pub Null,
    pub Null,
    pub Root2ItemAlt0128,
    pub Root2ItemAlt0129,
    pub Root2ItemAlt0130,
    pub Root2ItemAlt0131,
    pub Root2ItemAlt0132,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2ItemAlt0137,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt01 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt01;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 38")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt01, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2ItemAlt010 = match seq.next_element::<Root2ItemAlt010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 38 elements")), };
                let a1: Root2ItemAlt011 = match seq.next_element::<Root2ItemAlt011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 38 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 38 elements")), };
                let a3: Root2ItemAlt013 = match seq.next_element::<Root2ItemAlt013>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 38 elements")), };
                let a4: Root2ItemAlt014 = match seq.next_element::<Root2ItemAlt014>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 38 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 38 elements")), };
                let a6: Root2ItemAlt016 = match seq.next_element::<Root2ItemAlt016>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 38 elements")), };
                let a7: Root2ItemAlt017 = match seq.next_element::<Root2ItemAlt017>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 38 elements")), };
                let a8: Root2ItemAlt018 = match seq.next_element::<Root2ItemAlt018>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 38 elements")), };
                let a9: Root2ItemAlt019 = match seq.next_element::<Root2ItemAlt019>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 38 elements")), };
                let a10: Root2ItemAlt0110 = match seq.next_element::<Root2ItemAlt0110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 38 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 38 elements")), };
                let a12: Root2ItemAlt0112 = match seq.next_element::<Root2ItemAlt0112>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 38 elements")), };
                let a13: Root2ItemAlt0113 = match seq.next_element::<Root2ItemAlt0113>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 38 elements")), };
                let a14: Root2ItemAlt0114 = match seq.next_element::<Root2ItemAlt0114>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 38 elements")), };
                let a15: Root2ItemAlt0115 = match seq.next_element::<Root2ItemAlt0115>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 38 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 38 elements")), };
                let a17: Root2ItemAlt0117 = match seq.next_element::<Root2ItemAlt0117>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 38 elements")), };
                let a18: Root2ItemAlt0118 = match seq.next_element::<Root2ItemAlt0118>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 38 elements")), };
                let a19: Root2ItemAlt0119 = match seq.next_element::<Root2ItemAlt0119>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 38 elements")), };
                let a20: Root2ItemAlt0120 = match seq.next_element::<Root2ItemAlt0120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 38 elements")), };
                let a21: Root2ItemAlt0121 = match seq.next_element::<Root2ItemAlt0121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 38 elements")), };
                let a22: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 38 elements")), };
                let a23: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 38 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 38 elements")), };
                let a25: Root2ItemAlt0125 = match seq.next_element::<Root2ItemAlt0125>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 38 elements")), };
                let a26: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 38 elements")), };
                let a27: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 38 elements")), };
                let a28: Root2ItemAlt0128 = match seq.next_element::<Root2ItemAlt0128>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 38 elements")), };
                let a29: Root2ItemAlt0129 = match seq.next_element::<Root2ItemAlt0129>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 38 elements")), };
                let a30: Root2ItemAlt0130 = match seq.next_element::<Root2ItemAlt0130>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 38 elements")), };
                let a31: Root2ItemAlt0131 = match seq.next_element::<Root2ItemAlt0131>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 38 elements")), };
                let a32: Root2ItemAlt0132 = match seq.next_element::<Root2ItemAlt0132>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(32, &"expected 38 elements")), };
                let a33: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(33, &"expected 38 elements")), };
                let a34: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(34, &"expected 38 elements")), };
                let a35: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(35, &"expected 38 elements")), };
                let a36: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(36, &"expected 38 elements")), };
                let a37: Root2ItemAlt0137 = match seq.next_element::<Root2ItemAlt0137>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(37, &"expected 38 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt01(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                    a32,
                    a33,
                    a34,
                    a35,
                    a36,
                    a37,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root2ItemAlt0(
    pub ::std::vec::Vec<Root2ItemAlt00Item>,
    pub Root2ItemAlt01,
);

impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2ItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2ItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root2ItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root2ItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root2ItemAlt01 = match seq.next_element::<Root2ItemAlt01>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2ItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2ItemAlt1(pub i64);
impl ::core::ops::Deref for Root2ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2ItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root2Item {
    V0(Root2ItemAlt0),
    V1(Root2ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root2Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root2ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root2Item::V0(x)),
                Err(e) => errs.push((0, "Root2ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root2ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root2Item::V1(x)),
                Err(e) => errs.push((1, "Root2ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root90Item0(pub i64);
impl ::core::ops::Deref for Root90Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root90Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root90Item0(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root90Item(
    pub Root90Item0,
);

impl<'de> ::serde::Deserialize<'de> for Root90Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root90Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root90Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root90Item0 = match seq.next_element::<Root90Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root90Item(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root9(
    pub ::std::vec::Vec<Root90Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root9 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root9;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root9, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root90Item> = match seq.next_element::<::std::vec::Vec<Root90Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root9(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100Item10(pub i64);
impl ::core::ops::Deref for Root100Item10 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100Item10 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100Item10(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100Item11(pub i64);
impl ::core::ops::Deref for Root100Item11 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100Item11 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100Item11(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100Item12(pub i64);
impl ::core::ops::Deref for Root100Item12 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100Item12 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100Item12(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root100Item1(
    pub Root100Item10,
    pub Root100Item11,
    pub Root100Item12,
);

impl<'de> ::serde::Deserialize<'de> for Root100Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root100Item1;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root100Item1, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root100Item10 = match seq.next_element::<Root100Item10>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root100Item11 = match seq.next_element::<Root100Item11>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root100Item12 = match seq.next_element::<Root100Item12>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root100Item1(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100Item2(pub i64);
impl ::core::ops::Deref for Root100Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100Item3Item(pub i64);
impl ::core::ops::Deref for Root100Item3Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100Item3Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100Item3Item(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root100Item(
    pub ::std::string::String,
    pub Root100Item1,
    pub Root100Item2,
    pub ::std::vec::Vec<Root100Item3Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root100Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root100Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root100Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root100Item1 = match seq.next_element::<Root100Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root100Item2 = match seq.next_element::<Root100Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::vec::Vec<Root100Item3Item> = match seq.next_element::<::std::vec::Vec<Root100Item3Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root100Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root103(
    pub ::std::vec::Vec<Root100Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root103;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root103, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root100Item> = match seq.next_element::<::std::vec::Vec<Root100Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root103(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16000(pub i64);
impl ::core::ops::Deref for Root16000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16000(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root1600(
    pub Root16000,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1600 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1600;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1600, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root16000 = match seq.next_element::<Root16000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1600(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root160(
    pub Root1600,
);

impl<'de> ::serde::Deserialize<'de> for Root160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root160;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root160, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1600 = match seq.next_element::<Root1600>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root160(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root163003(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root163003 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root163003;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root163003, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root163003(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root16300(
    pub Null,
    pub Null,
    pub Null,
    pub Root163003,
);

impl<'de> ::serde::Deserialize<'de> for Root16300 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root16300;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root16300, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root163003 = match seq.next_element::<Root163003>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root16300(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root16304ItemItemAlt0ItemAlt0ItemAlt0(pub f64);
impl ::core::ops::Deref for Root16304ItemItemAlt0ItemAlt0ItemAlt0 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16304ItemItemAlt0ItemAlt0ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root16304ItemItemAlt0ItemAlt0ItemAlt0: non-finite number")); }
        
        Ok(Root16304ItemItemAlt0ItemAlt0ItemAlt0(x))
    }
}
#[derive(Debug)]
pub enum Root16304ItemItemAlt0ItemAlt0Item {
    V0(Root16304ItemItemAlt0ItemAlt0ItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root16304ItemItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root16304ItemItemAlt0ItemAlt0ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "Root16304ItemItemAlt0ItemAlt0ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16304ItemItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root16304ItemItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16304ItemItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16304ItemItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root16304ItemItemAlt0Item {
    V0(::std::vec::Vec<::core::option::Option<Root16304ItemItemAlt0ItemAlt0Item>>),
    V1(Root16304ItemItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root16304ItemItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root16304ItemItemAlt0ItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root16304ItemItemAlt0ItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root16304ItemItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root16304ItemItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root16304ItemItemAlt1(pub f64);
impl ::core::ops::Deref for Root16304ItemItemAlt1 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16304ItemItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root16304ItemItemAlt1: non-finite number")); }
        
        Ok(Root16304ItemItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root16304ItemItem {
    V0(::std::vec::Vec<::core::option::Option<Root16304ItemItemAlt0Item>>),
    V1(Root16304ItemItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root16304ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root16304ItemItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItem::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root16304ItemItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root16304ItemItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItem::V1(x)),
                Err(e) => errs.push((1, "Root16304ItemItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root16304ItemItem::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16305(pub i64);
impl ::core::ops::Deref for Root16305 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16305 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16305(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16307(pub i64);
impl ::core::ops::Deref for Root16307 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16307 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16307(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root163012ItemAlt0ItemItem2(pub f64);
impl ::core::ops::Deref for Root163012ItemAlt0ItemItem2 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root163012ItemAlt0ItemItem2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root163012ItemAlt0ItemItem2: non-finite number")); }
        
        Ok(Root163012ItemAlt0ItemItem2(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root163012ItemAlt0ItemItem(
    pub ::std::string::String,
    pub Null,
    pub Root163012ItemAlt0ItemItem2,
);

impl<'de> ::serde::Deserialize<'de> for Root163012ItemAlt0ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root163012ItemAlt0ItemItem;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root163012ItemAlt0ItemItem, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root163012ItemAlt0ItemItem2 = match seq.next_element::<Root163012ItemAlt0ItemItem2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root163012ItemAlt0ItemItem(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root163012ItemAlt1(pub f64);
impl ::core::ops::Deref for Root163012ItemAlt1 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root163012ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root163012ItemAlt1: non-finite number")); }
        
        Ok(Root163012ItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root163012Item {
    V0(::std::vec::Vec<::std::vec::Vec<Root163012ItemAlt0ItemItem>>),
    V1(Root163012ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root163012Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::std::vec::Vec<Root163012ItemAlt0ItemItem>>>(val.clone()) {
                Ok(x) => return Ok(Root163012Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::std::vec::Vec<Root163012ItemAlt0ItemItem>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root163012ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root163012Item::V1(x)),
                Err(e) => errs.push((1, "Root163012ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root163016(pub i64);
impl ::core::ops::Deref for Root163016 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root163016 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root163016(x))
    }
}
/// tuple len=17 (required exactly 17)
#[derive(Debug)]
pub struct Root1630(
    pub ::core::option::Option<Root16300>,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub ::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root16304ItemItem>>>,
    pub Root16305,
    pub Null,
    pub Root16307,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<::std::vec::Vec<Root163012Item>>,
    pub Null,
    pub Null,
    pub Null,
    pub Root163016,
);

impl<'de> ::serde::Deserialize<'de> for Root1630 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1630;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 17")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1630, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root16300> = match seq.next_element::<::core::option::Option<Root16300>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 17 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 17 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 17 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 17 elements")), };
                let a4: ::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root16304ItemItem>>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root16304ItemItem>>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 17 elements")), };
                let a5: Root16305 = match seq.next_element::<Root16305>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 17 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 17 elements")), };
                let a7: Root16307 = match seq.next_element::<Root16307>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 17 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 17 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 17 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 17 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 17 elements")), };
                let a12: ::core::option::Option<::std::vec::Vec<Root163012Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root163012Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 17 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 17 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 17 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 17 elements")), };
                let a16: Root163016 = match seq.next_element::<Root163016>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 17 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1630(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root163(
    pub Root1630,
);

impl<'de> ::serde::Deserialize<'de> for Root163 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root163;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root163, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1630 = match seq.next_element::<Root1630>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root163(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401006800(pub i64);
impl ::core::ops::Deref for Root16401006800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401006800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401006800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401006801(pub i64);
impl ::core::ops::Deref for Root16401006801 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401006801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401006801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401006802(pub i64);
impl ::core::ops::Deref for Root16401006802 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401006802 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401006802(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root1640100680(
    pub Root16401006800,
    pub Root16401006801,
    pub Root16401006802,
);

impl<'de> ::serde::Deserialize<'de> for Root1640100680 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640100680;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640100680, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root16401006800 = match seq.next_element::<Root16401006800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root16401006801 = match seq.next_element::<Root16401006801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root16401006802 = match seq.next_element::<Root16401006802>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640100680(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401006810(pub i64);
impl ::core::ops::Deref for Root16401006810 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401006810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401006810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401006811(pub i64);
impl ::core::ops::Deref for Root16401006811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401006811 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401006811(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401006812(pub i64);
impl ::core::ops::Deref for Root16401006812 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401006812 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401006812(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root1640100681(
    pub Root16401006810,
    pub Root16401006811,
    pub Root16401006812,
);

impl<'de> ::serde::Deserialize<'de> for Root1640100681 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640100681;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640100681, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root16401006810 = match seq.next_element::<Root16401006810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root16401006811 = match seq.next_element::<Root16401006811>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root16401006812 = match seq.next_element::<Root16401006812>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640100681(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640100682(pub i64);
impl ::core::ops::Deref for Root1640100682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640100682 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640100682(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root164010068(
    pub Root1640100680,
    pub Root1640100681,
    pub Root1640100682,
);

impl<'de> ::serde::Deserialize<'de> for Root164010068 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root164010068;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root164010068, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640100680 = match seq.next_element::<Root1640100680>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root1640100681 = match seq.next_element::<Root1640100681>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root1640100682 = match seq.next_element::<Root1640100682>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root164010068(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug)]
pub struct Root16401006(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root164010068,
);

impl<'de> ::serde::Deserialize<'de> for Root16401006 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root16401006;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root16401006, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root164010068 = match seq.next_element::<Root164010068>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root16401006(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug)]
pub struct Root1640100(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root16401006,
);

impl<'de> ::serde::Deserialize<'de> for Root1640100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640100;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640100, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root16401006 = match seq.next_element::<Root16401006>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640100(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root1640104Item0(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1640104Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640104Item0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640104Item0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640104Item0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640104Item30(pub i64);
impl ::core::ops::Deref for Root1640104Item30 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640104Item30 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640104Item30(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640104Item31(pub i64);
impl ::core::ops::Deref for Root1640104Item31 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640104Item31 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640104Item31(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root1640104Item3(
    pub Root1640104Item30,
    pub Root1640104Item31,
);

impl<'de> ::serde::Deserialize<'de> for Root1640104Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640104Item3;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640104Item3, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640104Item30 = match seq.next_element::<Root1640104Item30>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1640104Item31 = match seq.next_element::<Root1640104Item31>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640104Item3(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640104Item1800(pub i64);
impl ::core::ops::Deref for Root1640104Item1800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640104Item1800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640104Item1800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640104Item18010(pub i64);
impl ::core::ops::Deref for Root1640104Item18010 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640104Item18010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640104Item18010(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640104Item18011(pub i64);
impl ::core::ops::Deref for Root1640104Item18011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640104Item18011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640104Item18011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640104Item18012(pub i64);
impl ::core::ops::Deref for Root1640104Item18012 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640104Item18012 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640104Item18012(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root1640104Item1801(
    pub Root1640104Item18010,
    pub Root1640104Item18011,
    pub Root1640104Item18012,
);

impl<'de> ::serde::Deserialize<'de> for Root1640104Item1801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640104Item1801;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640104Item1801, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640104Item18010 = match seq.next_element::<Root1640104Item18010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root1640104Item18011 = match seq.next_element::<Root1640104Item18011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root1640104Item18012 = match seq.next_element::<Root1640104Item18012>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640104Item1801(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root1640104Item180(
    pub Root1640104Item1800,
    pub Root1640104Item1801,
);

impl<'de> ::serde::Deserialize<'de> for Root1640104Item180 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640104Item180;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640104Item180, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640104Item1800 = match seq.next_element::<Root1640104Item1800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1640104Item1801 = match seq.next_element::<Root1640104Item1801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640104Item180(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root1640104Item18(
    pub Root1640104Item180,
);

impl<'de> ::serde::Deserialize<'de> for Root1640104Item18 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640104Item18;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640104Item18, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640104Item180 = match seq.next_element::<Root1640104Item180>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640104Item18(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640104Item191(pub i64);
impl ::core::ops::Deref for Root1640104Item191 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640104Item191 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640104Item191(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root1640104Item19(
    pub Null,
    pub Root1640104Item191,
);

impl<'de> ::serde::Deserialize<'de> for Root1640104Item19 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640104Item19;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640104Item19, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1640104Item191 = match seq.next_element::<Root1640104Item191>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640104Item19(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=20 (required first 0 slots); accepts 0..=20 elements
#[derive(Debug)]
pub struct Root1640104Item(
    pub ::core::option::Option<Root1640104Item0>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root1640104Item3>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root1640104Item18>,
    pub ::core::option::Option<Root1640104Item19>,
);

impl<'de> ::serde::Deserialize<'de> for Root1640104Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640104Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=20")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640104Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root1640104Item0> = match seq.next_element::<::core::option::Option<Root1640104Item0>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root1640104Item3> = match seq.next_element::<::core::option::Option<Root1640104Item3>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a13: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a14: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a15: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a16: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a17: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a18: ::core::option::Option<Root1640104Item18> = match seq.next_element::<::core::option::Option<Root1640104Item18>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a19: ::core::option::Option<Root1640104Item19> = match seq.next_element::<::core::option::Option<Root1640104Item19>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root1640104Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640105(pub i64);
impl ::core::ops::Deref for Root1640105 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640105 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640105(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401062(pub i64);
impl ::core::ops::Deref for Root16401062 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401062 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401062(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root164010630(pub i64);
impl ::core::ops::Deref for Root164010630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root164010630 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root164010630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root164010631(pub i64);
impl ::core::ops::Deref for Root164010631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root164010631 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root164010631(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root164010632(pub i64);
impl ::core::ops::Deref for Root164010632 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root164010632 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root164010632(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root16401063(
    pub Root164010630,
    pub Root164010631,
    pub Root164010632,
);

impl<'de> ::serde::Deserialize<'de> for Root16401063 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root16401063;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root16401063, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root164010630 = match seq.next_element::<Root164010630>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root164010631 = match seq.next_element::<Root164010631>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root164010632 = match seq.next_element::<Root164010632>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root16401063(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401064(pub i64);
impl ::core::ops::Deref for Root16401064 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401064 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401064(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401065(pub i64);
impl ::core::ops::Deref for Root16401065 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401065 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401065(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root164010610(pub i64);
impl ::core::ops::Deref for Root164010610 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root164010610 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root164010610(x))
    }
}
/// tuple len=11 (required exactly 11)
#[derive(Debug)]
pub struct Root1640106(
    pub Null,
    pub Null,
    pub Root16401062,
    pub Root16401063,
    pub Root16401064,
    pub Root16401065,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Root164010610,
);

impl<'de> ::serde::Deserialize<'de> for Root1640106 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640106;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 11")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640106, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 11 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 11 elements")), };
                let a2: Root16401062 = match seq.next_element::<Root16401062>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 11 elements")), };
                let a3: Root16401063 = match seq.next_element::<Root16401063>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 11 elements")), };
                let a4: Root16401064 = match seq.next_element::<Root16401064>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 11 elements")), };
                let a5: Root16401065 = match seq.next_element::<Root16401065>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 11 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 11 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 11 elements")), };
                let a8: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 11 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 11 elements")), };
                let a10: Root164010610 = match seq.next_element::<Root164010610>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 11 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640106(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1640107(pub i64);
impl ::core::ops::Deref for Root1640107 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1640107 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1640107(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401090(pub i64);
impl ::core::ops::Deref for Root16401090 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401090 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401090(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401091(pub i64);
impl ::core::ops::Deref for Root16401091 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401091 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401091(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401092(pub i64);
impl ::core::ops::Deref for Root16401092 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401092 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401092(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401093(pub i64);
impl ::core::ops::Deref for Root16401093 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401093 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401093(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401094(pub i64);
impl ::core::ops::Deref for Root16401094 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401094 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401094(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401095(pub i64);
impl ::core::ops::Deref for Root16401095 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401095 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401095(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug)]
pub struct Root1640109(
    pub Root16401090,
    pub Root16401091,
    pub Root16401092,
    pub Root16401093,
    pub Root16401094,
    pub Root16401095,
);

impl<'de> ::serde::Deserialize<'de> for Root1640109 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640109;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640109, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root16401090 = match seq.next_element::<Root16401090>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root16401091 = match seq.next_element::<Root16401091>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root16401092 = match seq.next_element::<Root16401092>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Root16401093 = match seq.next_element::<Root16401093>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root16401094 = match seq.next_element::<Root16401094>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root16401095 = match seq.next_element::<Root16401095>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640109(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root164010121(pub i64);
impl ::core::ops::Deref for Root164010121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root164010121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root164010121(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root16401012(
    pub ::std::vec::Vec<Null>,
    pub Root164010121,
);

impl<'de> ::serde::Deserialize<'de> for Root16401012 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root16401012;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root16401012, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Null> = match seq.next_element::<::std::vec::Vec<Null>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root164010121 = match seq.next_element::<Root164010121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root16401012(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16401016(pub i64);
impl ::core::ops::Deref for Root16401016 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16401016 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16401016(x))
    }
}
/// tuple len=17 (required exactly 17)
#[derive(Debug)]
pub struct Root164010(
    pub Root1640100,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub ::std::vec::Vec<Root1640104Item>,
    pub Root1640105,
    pub Root1640106,
    pub Root1640107,
    pub Null,
    pub Root1640109,
    pub Null,
    pub ::std::string::String,
    pub Root16401012,
    pub Null,
    pub Null,
    pub Null,
    pub Root16401016,
);

impl<'de> ::serde::Deserialize<'de> for Root164010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root164010;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 17")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root164010, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640100 = match seq.next_element::<Root1640100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 17 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 17 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 17 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 17 elements")), };
                let a4: ::std::vec::Vec<Root1640104Item> = match seq.next_element::<::std::vec::Vec<Root1640104Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 17 elements")), };
                let a5: Root1640105 = match seq.next_element::<Root1640105>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 17 elements")), };
                let a6: Root1640106 = match seq.next_element::<Root1640106>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 17 elements")), };
                let a7: Root1640107 = match seq.next_element::<Root1640107>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 17 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 17 elements")), };
                let a9: Root1640109 = match seq.next_element::<Root1640109>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 17 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 17 elements")), };
                let a11: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 17 elements")), };
                let a12: Root16401012 = match seq.next_element::<Root16401012>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 17 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 17 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 17 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 17 elements")), };
                let a16: Root16401016 = match seq.next_element::<Root16401016>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 17 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root164010(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root16401(
    pub Root164010,
);

impl<'de> ::serde::Deserialize<'de> for Root16401 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root16401;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root16401, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root164010 = match seq.next_element::<Root164010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root16401(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root1640(
    pub ::std::string::String,
    pub Root16401,
);

impl<'de> ::serde::Deserialize<'de> for Root1640 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root16401 = match seq.next_element::<Root16401>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root164(
    pub Root1640,
);

impl<'de> ::serde::Deserialize<'de> for Root164 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root164;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root164, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640 = match seq.next_element::<Root1640>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root164(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required first 0 slots); accepts 0..=5 elements
#[derive(Debug)]
pub struct Root16(
    pub ::core::option::Option<Root160>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root163>,
    pub ::core::option::Option<Root164>,
);

impl<'de> ::serde::Deserialize<'de> for Root16 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root16;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root16, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root160> = match seq.next_element::<::core::option::Option<Root160>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root163> = match seq.next_element::<::core::option::Option<Root163>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root164> = match seq.next_element::<::core::option::Option<Root164>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root16(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21000(pub i64);
impl ::core::ops::Deref for Root21000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21001(pub i64);
impl ::core::ops::Deref for Root21001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21001(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21002(pub i64);
impl ::core::ops::Deref for Root21002 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21002 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21002(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21003(pub i64);
impl ::core::ops::Deref for Root21003 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21003 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21003(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root2100(
    pub Root21000,
    pub Root21001,
    pub Root21002,
    pub Root21003,
);

impl<'de> ::serde::Deserialize<'de> for Root2100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2100;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2100, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21000 = match seq.next_element::<Root21000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root21001 = match seq.next_element::<Root21001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root21002 = match seq.next_element::<Root21002>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root21003 = match seq.next_element::<Root21003>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2100(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root210(
    pub Root2100,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root210 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root210;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root210, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2100 = match seq.next_element::<Root2100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root210(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21100(pub i64);
impl ::core::ops::Deref for Root21100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21101(pub i64);
impl ::core::ops::Deref for Root21101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21102(pub i64);
impl ::core::ops::Deref for Root21102 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21102(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21103(pub i64);
impl ::core::ops::Deref for Root21103 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21103(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21104(pub i64);
impl ::core::ops::Deref for Root21104 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21104 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21104(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21105(pub i64);
impl ::core::ops::Deref for Root21105 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21105 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21105(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21106(pub i64);
impl ::core::ops::Deref for Root21106 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21106 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21106(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21107(pub i64);
impl ::core::ops::Deref for Root21107 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21107 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21107(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21108(pub i64);
impl ::core::ops::Deref for Root21108 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21108 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21108(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21109(pub i64);
impl ::core::ops::Deref for Root21109 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21109 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21109(x))
    }
}
/// tuple len=10 (required exactly 10)
#[derive(Debug)]
pub struct Root2110(
    pub Root21100,
    pub Root21101,
    pub Root21102,
    pub Root21103,
    pub Root21104,
    pub Root21105,
    pub Root21106,
    pub Root21107,
    pub Root21108,
    pub Root21109,
);

impl<'de> ::serde::Deserialize<'de> for Root2110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2110;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 10")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2110, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21100 = match seq.next_element::<Root21100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 10 elements")), };
                let a1: Root21101 = match seq.next_element::<Root21101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 10 elements")), };
                let a2: Root21102 = match seq.next_element::<Root21102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 10 elements")), };
                let a3: Root21103 = match seq.next_element::<Root21103>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 10 elements")), };
                let a4: Root21104 = match seq.next_element::<Root21104>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 10 elements")), };
                let a5: Root21105 = match seq.next_element::<Root21105>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 10 elements")), };
                let a6: Root21106 = match seq.next_element::<Root21106>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 10 elements")), };
                let a7: Root21107 = match seq.next_element::<Root21107>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 10 elements")), };
                let a8: Root21108 = match seq.next_element::<Root21108>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 10 elements")), };
                let a9: Root21109 = match seq.next_element::<Root21109>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 10 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2110(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root211(
    pub Root2110,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root211;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root211, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2110 = match seq.next_element::<Root2110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root211(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root212(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root212 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root212;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root212, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root212(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21300(pub i64);
impl ::core::ops::Deref for Root21300 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21300 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21300(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21301(pub i64);
impl ::core::ops::Deref for Root21301 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21301 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21301(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21302(pub i64);
impl ::core::ops::Deref for Root21302 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21302 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21302(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21303(pub i64);
impl ::core::ops::Deref for Root21303 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21303 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21303(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21304(pub i64);
impl ::core::ops::Deref for Root21304 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21304 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21304(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21305(pub i64);
impl ::core::ops::Deref for Root21305 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21305 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21305(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21306(pub i64);
impl ::core::ops::Deref for Root21306 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21306 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21306(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21307(pub i64);
impl ::core::ops::Deref for Root21307 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21307 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21307(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21308(pub i64);
impl ::core::ops::Deref for Root21308 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21308 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21308(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21309(pub i64);
impl ::core::ops::Deref for Root21309 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21309 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21309(x))
    }
}
/// tuple len=10 (required exactly 10)
#[derive(Debug)]
pub struct Root2130(
    pub Root21300,
    pub Root21301,
    pub Root21302,
    pub Root21303,
    pub Root21304,
    pub Root21305,
    pub Root21306,
    pub Root21307,
    pub Root21308,
    pub Root21309,
);

impl<'de> ::serde::Deserialize<'de> for Root2130 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2130;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 10")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2130, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21300 = match seq.next_element::<Root21300>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 10 elements")), };
                let a1: Root21301 = match seq.next_element::<Root21301>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 10 elements")), };
                let a2: Root21302 = match seq.next_element::<Root21302>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 10 elements")), };
                let a3: Root21303 = match seq.next_element::<Root21303>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 10 elements")), };
                let a4: Root21304 = match seq.next_element::<Root21304>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 10 elements")), };
                let a5: Root21305 = match seq.next_element::<Root21305>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 10 elements")), };
                let a6: Root21306 = match seq.next_element::<Root21306>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 10 elements")), };
                let a7: Root21307 = match seq.next_element::<Root21307>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 10 elements")), };
                let a8: Root21308 = match seq.next_element::<Root21308>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 10 elements")), };
                let a9: Root21309 = match seq.next_element::<Root21309>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 10 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2130(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root213(
    pub Root2130,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root213 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root213;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root213, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2130 = match seq.next_element::<Root2130>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root213(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root214(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root214 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root214;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root214, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root214(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2170(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2170 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2170;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2170, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2170(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2171(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2171 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2171;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2171, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2171(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2172(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2172 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2172;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2172, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2172(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2173(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2173 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2173;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2173, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2173(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2174(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2174 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2174;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2174, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2174(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2175(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2175 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2175;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2175, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2175(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2176(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2176 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2176;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2176, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2176(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2177(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2177 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2177;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2177, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2177(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2178(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2178 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2178;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2178, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2178(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2179(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2179 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2179;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2179, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2179(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root21710(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root21710 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root21710;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root21710, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root21710(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root21711(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root21711 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root21711;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root21711, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root21711(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root21712(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root21712 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root21712;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root21712, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root21712(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root21713(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root21713 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root21713;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root21713, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root21713(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=14 (required exactly 14)
#[derive(Debug)]
pub struct Root217(
    pub Root2170,
    pub Root2171,
    pub Root2172,
    pub Root2173,
    pub Root2174,
    pub Root2175,
    pub Root2176,
    pub Root2177,
    pub Root2178,
    pub Root2179,
    pub Root21710,
    pub Root21711,
    pub Root21712,
    pub Root21713,
);

impl<'de> ::serde::Deserialize<'de> for Root217 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root217;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 14")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root217, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2170 = match seq.next_element::<Root2170>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 14 elements")), };
                let a1: Root2171 = match seq.next_element::<Root2171>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 14 elements")), };
                let a2: Root2172 = match seq.next_element::<Root2172>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 14 elements")), };
                let a3: Root2173 = match seq.next_element::<Root2173>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 14 elements")), };
                let a4: Root2174 = match seq.next_element::<Root2174>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 14 elements")), };
                let a5: Root2175 = match seq.next_element::<Root2175>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 14 elements")), };
                let a6: Root2176 = match seq.next_element::<Root2176>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 14 elements")), };
                let a7: Root2177 = match seq.next_element::<Root2177>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 14 elements")), };
                let a8: Root2178 = match seq.next_element::<Root2178>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 14 elements")), };
                let a9: Root2179 = match seq.next_element::<Root2179>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 14 elements")), };
                let a10: Root21710 = match seq.next_element::<Root21710>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 14 elements")), };
                let a11: Root21711 = match seq.next_element::<Root21711>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 14 elements")), };
                let a12: Root21712 = match seq.next_element::<Root21712>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 14 elements")), };
                let a13: Root21713 = match seq.next_element::<Root21713>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 14 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root217(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21900(pub i64);
impl ::core::ops::Deref for Root21900 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21900 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21900(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2190(
    pub Root21900,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2190 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2190;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2190, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21900 = match seq.next_element::<Root21900>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2190(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21910(pub i64);
impl ::core::ops::Deref for Root21910 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21910 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21910(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2191(
    pub Root21910,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2191 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2191;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2191, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21910 = match seq.next_element::<Root21910>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2191(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21920(pub i64);
impl ::core::ops::Deref for Root21920 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21920 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21920(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2192(
    pub Root21920,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2192 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2192;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2192, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21920 = match seq.next_element::<Root21920>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2192(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21930(pub i64);
impl ::core::ops::Deref for Root21930 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21930 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21930(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2193(
    pub Root21930,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2193 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2193;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2193, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21930 = match seq.next_element::<Root21930>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2193(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root219(
    pub Root2190,
    pub Root2191,
    pub Root2192,
    pub Root2193,
);

impl<'de> ::serde::Deserialize<'de> for Root219 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root219;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root219, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2190 = match seq.next_element::<Root2190>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root2191 = match seq.next_element::<Root2191>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root2192 = match seq.next_element::<Root2192>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root2193 = match seq.next_element::<Root2193>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root219(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21130(pub i64);
impl ::core::ops::Deref for Root21130 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21130 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21130(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root2113(
    pub Root21130,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2113 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2113;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2113, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21130 = match seq.next_element::<Root21130>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2113(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root21140(pub i64);
impl ::core::ops::Deref for Root21140 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root21140 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root21140(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2114(
    pub Root21140,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2114 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2114;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2114, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root21140 = match seq.next_element::<Root21140>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2114(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=16 (required exactly 16)
#[derive(Debug)]
pub struct Root21(
    pub ::core::option::Option<Root210>,
    pub ::core::option::Option<Root211>,
    pub ::core::option::Option<Root212>,
    pub ::core::option::Option<Root213>,
    pub ::core::option::Option<Root214>,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root217>,
    pub Null,
    pub ::core::option::Option<Root219>,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root2113>,
    pub ::core::option::Option<Root2114>,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root21 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root21;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 16")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root21, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root210> = match seq.next_element::<::core::option::Option<Root210>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 16 elements")), };
                let a1: ::core::option::Option<Root211> = match seq.next_element::<::core::option::Option<Root211>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 16 elements")), };
                let a2: ::core::option::Option<Root212> = match seq.next_element::<::core::option::Option<Root212>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 16 elements")), };
                let a3: ::core::option::Option<Root213> = match seq.next_element::<::core::option::Option<Root213>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 16 elements")), };
                let a4: ::core::option::Option<Root214> = match seq.next_element::<::core::option::Option<Root214>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 16 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 16 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 16 elements")), };
                let a7: ::core::option::Option<Root217> = match seq.next_element::<::core::option::Option<Root217>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 16 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 16 elements")), };
                let a9: ::core::option::Option<Root219> = match seq.next_element::<::core::option::Option<Root219>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 16 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 16 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 16 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 16 elements")), };
                let a13: ::core::option::Option<Root2113> = match seq.next_element::<::core::option::Option<Root2113>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 16 elements")), };
                let a14: ::core::option::Option<Root2114> = match seq.next_element::<::core::option::Option<Root2114>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 16 elements")), };
                let a15: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 16 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root21(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root23(pub i64);
impl ::core::ops::Deref for Root23 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root23 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root23(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root270(pub i64);
impl ::core::ops::Deref for Root270 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root270 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root270(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root27(
    pub Root270,
);

impl<'de> ::serde::Deserialize<'de> for Root27 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root27;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root27, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root270 = match seq.next_element::<Root270>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root27(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root290000(pub i64);
impl ::core::ops::Deref for Root290000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root290000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root290000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root290001104(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root290001104 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root290001104;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root290001104, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root290001104(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013400(pub i64);
impl ::core::ops::Deref for Root2900011013400 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013400 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013400(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013401(pub i64);
impl ::core::ops::Deref for Root2900011013401 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013401 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013401(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013402(pub i64);
impl ::core::ops::Deref for Root2900011013402 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013402 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013402(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root290001101340(
    pub Root2900011013400,
    pub Root2900011013401,
    pub Root2900011013402,
);

impl<'de> ::serde::Deserialize<'de> for Root290001101340 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root290001101340;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root290001101340, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2900011013400 = match seq.next_element::<Root2900011013400>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root2900011013401 = match seq.next_element::<Root2900011013401>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root2900011013402 = match seq.next_element::<Root2900011013402>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root290001101340(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013410(pub i64);
impl ::core::ops::Deref for Root2900011013410 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013410 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013410(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013411(pub i64);
impl ::core::ops::Deref for Root2900011013411 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013411 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013411(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013412(pub i64);
impl ::core::ops::Deref for Root2900011013412 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013412 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013412(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root290001101341(
    pub Root2900011013410,
    pub Root2900011013411,
    pub Root2900011013412,
);

impl<'de> ::serde::Deserialize<'de> for Root290001101341 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root290001101341;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root290001101341, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2900011013410 = match seq.next_element::<Root2900011013410>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root2900011013411 = match seq.next_element::<Root2900011013411>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root2900011013412 = match seq.next_element::<Root2900011013412>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root290001101341(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root290001101343(pub i64);
impl ::core::ops::Deref for Root290001101343 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root290001101343 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root290001101343(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root290001101345(pub i64);
impl ::core::ops::Deref for Root290001101345 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root290001101345 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root290001101345(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root290001101347(pub i64);
impl ::core::ops::Deref for Root290001101347 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root290001101347 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root290001101347(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013480(pub i64);
impl ::core::ops::Deref for Root2900011013480 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013480 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013480(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013481(pub i64);
impl ::core::ops::Deref for Root2900011013481 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013481 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013481(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2900011013482(pub i64);
impl ::core::ops::Deref for Root2900011013482 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2900011013482 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2900011013482(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root290001101348(
    pub Root2900011013480,
    pub Root2900011013481,
    pub Root2900011013482,
);

impl<'de> ::serde::Deserialize<'de> for Root290001101348 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root290001101348;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root290001101348, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2900011013480 = match seq.next_element::<Root2900011013480>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root2900011013481 = match seq.next_element::<Root2900011013481>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root2900011013482 = match seq.next_element::<Root2900011013482>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root290001101348(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug)]
pub struct Root29000110134(
    pub Root290001101340,
    pub Root290001101341,
    pub Null,
    pub Root290001101343,
    pub Null,
    pub Root290001101345,
    pub Null,
    pub Root290001101347,
    pub Root290001101348,
);

impl<'de> ::serde::Deserialize<'de> for Root29000110134 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root29000110134;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root29000110134, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root290001101340 = match seq.next_element::<Root290001101340>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: Root290001101341 = match seq.next_element::<Root290001101341>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: Root290001101343 = match seq.next_element::<Root290001101343>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Root290001101345 = match seq.next_element::<Root290001101345>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Root290001101347 = match seq.next_element::<Root290001101347>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root290001101348 = match seq.next_element::<Root290001101348>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root29000110134(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug)]
pub struct Root2900011013(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root29000110134,
);

impl<'de> ::serde::Deserialize<'de> for Root2900011013 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2900011013;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2900011013, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root29000110134 = match seq.next_element::<Root29000110134>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2900011013(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=14 (required first 0 slots); accepts 0..=14 elements
#[derive(Debug)]
pub struct Root29000110(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root290001104>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2900011013>,
);

impl<'de> ::serde::Deserialize<'de> for Root29000110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root29000110;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=14")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root29000110, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root290001104> = match seq.next_element::<::core::option::Option<Root290001104>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a13: ::core::option::Option<Root2900011013> = match seq.next_element::<::core::option::Option<Root2900011013>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root29000110(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2900011(
    pub Root29000110,
);

impl<'de> ::serde::Deserialize<'de> for Root2900011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2900011;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2900011, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root29000110 = match seq.next_element::<Root29000110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2900011(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root290001(
    pub Null,
    pub Root2900011,
);

impl<'de> ::serde::Deserialize<'de> for Root290001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root290001;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root290001, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root2900011 = match seq.next_element::<Root2900011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root290001(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root29000(
    pub Root290000,
    pub Root290001,
);

impl<'de> ::serde::Deserialize<'de> for Root29000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root29000;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root29000, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root290000 = match seq.next_element::<Root290000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root290001 = match seq.next_element::<Root290001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root29000(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2900(
    pub Root29000,
);

impl<'de> ::serde::Deserialize<'de> for Root2900 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2900;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2900, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root29000 = match seq.next_element::<Root29000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2900(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2901Item0(pub i64);
impl ::core::ops::Deref for Root2901Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2901Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2901Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2901Item1(pub i64);
impl ::core::ops::Deref for Root2901Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2901Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2901Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2901Item4(pub i64);
impl ::core::ops::Deref for Root2901Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2901Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2901Item4(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2901Item9ItemItemAlt0(pub i64);
impl ::core::ops::Deref for Root2901Item9ItemItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2901Item9ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2901Item9ItemItemAlt0(x))
    }
}
#[derive(Debug)]
pub enum Root2901Item9ItemItem {
    V0(Root2901Item9ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root2901Item9ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root2901Item9ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root2901Item9ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root2901Item9ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root2901Item9ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
/// tuple len=10 (required first 0 slots); accepts 0..=10 elements
#[derive(Debug)]
pub struct Root2901Item(
    pub ::core::option::Option<Root2901Item0>,
    pub ::core::option::Option<Root2901Item1>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root2901Item4>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root2901Item9ItemItem>>>>>,
);

impl<'de> ::serde::Deserialize<'de> for Root2901Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2901Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=10")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2901Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root2901Item0> = match seq.next_element::<::core::option::Option<Root2901Item0>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root2901Item1> = match seq.next_element::<::core::option::Option<Root2901Item1>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root2901Item4> = match seq.next_element::<::core::option::Option<Root2901Item4>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root2901Item9ItemItem>>>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root2901Item9ItemItem>>>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root2901Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt010(pub ::std::string::String);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt010 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2902ItemItemAlt0ItemItemAlt010: expected URI scheme"));
        }
        Ok(Root2902ItemItemAlt0ItemItemAlt010(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt01(
    pub Root2902ItemItemAlt0ItemItemAlt010,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt01 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt01;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt01, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt010 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt01(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt04(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt04 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt04;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt04, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt04(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt0600(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt0600 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0600 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt0600(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt060(
    pub Root2902ItemItemAlt0ItemItemAlt0600,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt060 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt060;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt060, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt0600 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0600>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt060(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt06(
    pub Root2902ItemItemAlt0ItemItemAlt060,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt06 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt06;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt06, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt060 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt060>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt06(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt0100(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt0100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt0100(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt0101(
    pub Root2902ItemItemAlt0ItemItemAlt0100,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt0101;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt0101, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt0100 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt0101(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt0160(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt0160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt0160(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt016(
    pub Root2902ItemItemAlt0ItemItemAlt0160,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt016 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt016;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt016, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt0160 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt016(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt0170(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt0170 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0170 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt0170(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt01740(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt01740 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt01740 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt01740(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt01742(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt01742 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt01742 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt01742(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt0174(
    pub Root2902ItemItemAlt0ItemItemAlt01740,
    pub Null,
    pub Root2902ItemItemAlt0ItemItemAlt01742,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0174 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt0174;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt0174, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt01740 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt01740>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root2902ItemItemAlt0ItemItemAlt01742 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt01742>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt0174(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt01750(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt01750 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt01750 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt01750(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt0175(
    pub Root2902ItemItemAlt0ItemItemAlt01750,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0175 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt0175;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt0175, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt01750 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt01750>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt0175(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=6 (required exactly 6)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt017(
    pub Root2902ItemItemAlt0ItemItemAlt0170,
    pub Null,
    pub Null,
    pub Null,
    pub Root2902ItemItemAlt0ItemItemAlt0174,
    pub Root2902ItemItemAlt0ItemItemAlt0175,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt017 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt017;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt017, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt0170 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0170>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root2902ItemItemAlt0ItemItemAlt0174 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0174>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root2902ItemItemAlt0ItemItemAlt0175 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0175>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt017(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt0180(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt0180 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0180 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt0180(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt018(
    pub Root2902ItemItemAlt0ItemItemAlt0180,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt018 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt018;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt018, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt0180 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0180>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt018(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt0310(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt0310 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0310 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt0310(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt0312(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt0312 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0312 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt0312(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt0313(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0313 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt0313;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt0313, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt0313(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt031(
    pub Root2902ItemItemAlt0ItemItemAlt0310,
    pub Null,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt0312>,
    pub Root2902ItemItemAlt0ItemItemAlt0313,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt031 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt031;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt031, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt0310 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0310>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt0312> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt0312>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root2902ItemItemAlt0ItemItemAlt0313 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0313>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt031(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt0350(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0350 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt0350;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt0350, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt0350(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt035(
    pub Root2902ItemItemAlt0ItemItemAlt0350,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt035 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt035;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt035, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2902ItemItemAlt0ItemItemAlt0350 = match seq.next_element::<Root2902ItemItemAlt0ItemItemAlt0350>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt035(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=36 (required first 0 slots); accepts 0..=36 elements
#[derive(Debug)]
pub struct Root2902ItemItemAlt0ItemItemAlt0(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt01>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt04>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt06>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt0101>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt016>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt017>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt018>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt031>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt035>,
);

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2902ItemItemAlt0ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=36")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2902ItemItemAlt0ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt01> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt01>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt04> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt04>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt06> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt06>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt0101> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt0101>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a13: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a14: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a15: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a16: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt016> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt016>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a17: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt017> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt017>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a18: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt018> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt018>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a19: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a20: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a21: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a22: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a23: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a24: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a25: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a26: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a27: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a28: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a29: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a30: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a31: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt031> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt031>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a32: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a33: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a34: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a35: ::core::option::Option<Root2902ItemItemAlt0ItemItemAlt035> = match seq.next_element::<::core::option::Option<Root2902ItemItemAlt0ItemItemAlt035>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root2902ItemItemAlt0ItemItemAlt0(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                    a32,
                    a33,
                    a34,
                    a35,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt0ItemItemAlt1(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt0ItemItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt0ItemItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root2902ItemItemAlt0ItemItem {
    V0(Root2902ItemItemAlt0ItemItemAlt0),
    V1(Root2902ItemItemAlt0ItemItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt0ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root2902ItemItemAlt0ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root2902ItemItemAlt0ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root2902ItemItemAlt0ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root2902ItemItemAlt0ItemItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root2902ItemItemAlt0ItemItem::V1(x)),
                Err(e) => errs.push((1, "Root2902ItemItemAlt0ItemItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root2902ItemItemAlt0ItemItem::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2902ItemItemAlt1(pub i64);
impl ::core::ops::Deref for Root2902ItemItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2902ItemItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2902ItemItemAlt1(x))
    }
}
#[derive(Debug)]
pub enum Root2902ItemItem {
    V0(::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root2902ItemItemAlt0ItemItem>>>),
    V1(Root2902ItemItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root2902ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root2902ItemItemAlt0ItemItem>>>>(val.clone()) {
                Ok(x) => return Ok(Root2902ItemItem::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root2902ItemItemAlt0ItemItem>>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root2902ItemItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root2902ItemItem::V1(x)),
                Err(e) => errs.push((1, "Root2902ItemItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root290(
    pub ::core::option::Option<Root2900>,
    pub ::std::vec::Vec<Root2901Item>,
    pub ::std::vec::Vec<::std::vec::Vec<Root2902ItemItem>>,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root290 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root290;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root290, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root2900> = match seq.next_element::<::core::option::Option<Root2900>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::vec::Vec<Root2901Item> = match seq.next_element::<::std::vec::Vec<Root2901Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::std::vec::Vec<::std::vec::Vec<Root2902ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root2902ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root290(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root29(
    pub Root290,
);

impl<'de> ::serde::Deserialize<'de> for Root29 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root29;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root29, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root290 = match seq.next_element::<Root290>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root29(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370(pub i64);
impl ::core::ops::Deref for Root370 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root372032(pub f64);
impl ::core::ops::Deref for Root372032 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root372032 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root372032: non-finite number")); }
        
        Ok(Root372032(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root372033(pub f64);
impl ::core::ops::Deref for Root372033 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root372033 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root372033: non-finite number")); }
        
        Ok(Root372033(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug)]
pub struct Root37203(
    pub Null,
    pub Null,
    pub Root372032,
    pub Root372033,
);

impl<'de> ::serde::Deserialize<'de> for Root37203 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root37203;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root37203, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root372032 = match seq.next_element::<Root372032>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root372033 = match seq.next_element::<Root372033>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root37203(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug)]
pub struct Root3720(
    pub ::std::string::String,
    pub Null,
    pub ::std::string::String,
    pub Root37203,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root3720 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3720;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3720, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root37203 = match seq.next_element::<Root37203>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3720(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root372(
    pub Root3720,
);

impl<'de> ::serde::Deserialize<'de> for Root372 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root372;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root372, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root3720 = match seq.next_element::<Root3720>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root372(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug)]
pub struct Root37(
    pub Root370,
    pub ::std::string::String,
    pub Root372,
);

impl<'de> ::serde::Deserialize<'de> for Root37 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root37;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root37, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370 = match seq.next_element::<Root370>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root372 = match seq.next_element::<Root372>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root37(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root38(pub i64);
impl ::core::ops::Deref for Root38 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root38 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root38(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root580(pub i64);
impl ::core::ops::Deref for Root580 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root580 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root580(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug)]
pub struct Root58(
    pub Root580,
);

impl<'de> ::serde::Deserialize<'de> for Root58 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root58;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root58, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root580 = match seq.next_element::<Root580>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root58(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=66 (required exactly 66)
#[derive(Debug)]
pub struct Root(
    pub Root0,
    pub Root1,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<Root2Item>>>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Null,
    pub ::core::option::Option<Root9>,
    pub Root103,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root16>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root21>,
    pub Null,
    pub ::core::option::Option<Root23>,
    pub Null,
    pub Null,
    pub Null,
    pub Root27,
    pub Null,
    pub ::core::option::Option<Root29>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Null,
    pub ::core::option::Option<Root37>,
    pub Root38,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root58,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 66")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root0 = match seq.next_element::<Root0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 66 elements")), };
                let a1: Root1 = match seq.next_element::<Root1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 66 elements")), };
                let a2: ::core::option::Option<::std::vec::Vec<::core::option::Option<Root2Item>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<Root2Item>>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 66 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 66 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 66 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 66 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 66 elements")), };
                let a7: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 66 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 66 elements")), };
                let a9: ::core::option::Option<Root9> = match seq.next_element::<::core::option::Option<Root9>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 66 elements")), };
                let a10: Root103 = match seq.next_element::<Root103>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 66 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 66 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 66 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 66 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 66 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 66 elements")), };
                let a16: ::core::option::Option<Root16> = match seq.next_element::<::core::option::Option<Root16>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 66 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 66 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 66 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 66 elements")), };
                let a20: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 66 elements")), };
                let a21: ::core::option::Option<Root21> = match seq.next_element::<::core::option::Option<Root21>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 66 elements")), };
                let a22: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 66 elements")), };
                let a23: ::core::option::Option<Root23> = match seq.next_element::<::core::option::Option<Root23>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 66 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 66 elements")), };
                let a25: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 66 elements")), };
                let a26: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 66 elements")), };
                let a27: Root27 = match seq.next_element::<Root27>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 66 elements")), };
                let a28: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 66 elements")), };
                let a29: ::core::option::Option<Root29> = match seq.next_element::<::core::option::Option<Root29>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 66 elements")), };
                let a30: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 66 elements")), };
                let a31: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 66 elements")), };
                let a32: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(32, &"expected 66 elements")), };
                let a33: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(33, &"expected 66 elements")), };
                let a34: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(34, &"expected 66 elements")), };
                let a35: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(35, &"expected 66 elements")), };
                let a36: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(36, &"expected 66 elements")), };
                let a37: ::core::option::Option<Root37> = match seq.next_element::<::core::option::Option<Root37>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(37, &"expected 66 elements")), };
                let a38: Root38 = match seq.next_element::<Root38>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(38, &"expected 66 elements")), };
                let a39: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(39, &"expected 66 elements")), };
                let a40: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(40, &"expected 66 elements")), };
                let a41: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(41, &"expected 66 elements")), };
                let a42: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(42, &"expected 66 elements")), };
                let a43: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(43, &"expected 66 elements")), };
                let a44: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(44, &"expected 66 elements")), };
                let a45: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(45, &"expected 66 elements")), };
                let a46: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(46, &"expected 66 elements")), };
                let a47: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(47, &"expected 66 elements")), };
                let a48: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(48, &"expected 66 elements")), };
                let a49: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(49, &"expected 66 elements")), };
                let a50: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(50, &"expected 66 elements")), };
                let a51: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(51, &"expected 66 elements")), };
                let a52: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(52, &"expected 66 elements")), };
                let a53: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(53, &"expected 66 elements")), };
                let a54: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(54, &"expected 66 elements")), };
                let a55: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(55, &"expected 66 elements")), };
                let a56: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(56, &"expected 66 elements")), };
                let a57: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(57, &"expected 66 elements")), };
                let a58: Root58 = match seq.next_element::<Root58>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(58, &"expected 66 elements")), };
                let a59: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(59, &"expected 66 elements")), };
                let a60: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(60, &"expected 66 elements")), };
                let a61: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(61, &"expected 66 elements")), };
                let a62: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(62, &"expected 66 elements")), };
                let a63: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(63, &"expected 66 elements")), };
                let a64: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(64, &"expected 66 elements")), };
                let a65: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(65, &"expected 66 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                    a32,
                    a33,
                    a34,
                    a35,
                    a36,
                    a37,
                    a38,
                    a39,
                    a40,
                    a41,
                    a42,
                    a43,
                    a44,
                    a45,
                    a46,
                    a47,
                    a48,
                    a49,
                    a50,
                    a51,
                    a52,
                    a53,
                    a54,
                    a55,
                    a56,
                    a57,
                    a58,
                    a59,
                    a60,
                    a61,
                    a62,
                    a63,
                    a64,
                    a65,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

