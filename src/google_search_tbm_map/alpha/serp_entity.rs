// AUTOGENERATED: strict types + deserializers (fully-qualified paths)

// F64 tolerance helpers (absolute + relative)
const __ABS_TOL: f64 = 1e-12;
const __REL_TOL: f64 = 1e-12;

#[inline]
fn __tol(b: f64) -> f64 {
    let t = if __ABS_TOL > __REL_TOL * b.abs() { __ABS_TOL } else { __REL_TOL * b.abs() };
    if t.is_finite() { t } else { 0.0 }
}

#[inline] fn __ge_f64(x: f64, b: f64) -> bool { x + __tol(b) >= b }
#[inline] fn __le_f64(x: f64, b: f64) -> bool { x <= b + __tol(b) }
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Null;

// Always serialize as JSON `null` (or the format's unit).
impl serde::Serialize for Null {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        // Use unit, not unit-struct, to avoid format-specific naming.
        serializer.serialize_unit()
    }
}


impl<'de> ::serde::Deserialize<'de> for Null {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        // Accept only explicit null
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Null;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "null")
            }
            fn visit_unit<E>(self) -> ::std::result::Result<Null, E>
            where
                E: ::serde::de::Error
            {
                Ok(Null)
            }
            fn visit_none<E>(self) -> ::std::result::Result<Null, E>
            where
                E: ::serde::de::Error
            {
                Ok(Null)
            }
        }
        de.deserialize_option(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, ::serde::Serialize)]
pub struct Root430(pub ::std::string::String);
impl ::core::ops::Deref for Root430 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root430 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root430: expected URI scheme"));
        }
        Ok(Root430(s))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root43(
    pub Root430,
    pub ::std::string::String,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root43 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root43;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root43, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root430 = match seq.next_element::<Root430>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root43(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root47(pub f64);
impl ::core::ops::Deref for Root47 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root47 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root47: non-finite number")); }
        
        Ok(Root47(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root48(pub i64);
impl ::core::ops::Deref for Root48 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root48 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root48(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root490Item0(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root490Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root490Item0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root490Item0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root490Item0(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root490Item10(pub i64);
impl ::core::ops::Deref for Root490Item10 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root490Item10 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root490Item10(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root490Item11(pub f64);
impl ::core::ops::Deref for Root490Item11 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root490Item11 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root490Item11: non-finite number")); }
        
        Ok(Root490Item11(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root490Item12(pub i64);
impl ::core::ops::Deref for Root490Item12 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root490Item12 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root490Item12(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root490Item1(
    pub Root490Item10,
    pub Root490Item11,
    pub Root490Item12,
);

impl<'de> ::serde::Deserialize<'de> for Root490Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root490Item1;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root490Item1, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root490Item10 = match seq.next_element::<Root490Item10>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root490Item11 = match seq.next_element::<Root490Item11>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root490Item12 = match seq.next_element::<Root490Item12>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root490Item1(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root490Item(
    pub Root490Item0,
    pub Root490Item1,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root490Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root490Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root490Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root490Item0 = match seq.next_element::<Root490Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root490Item1 = match seq.next_element::<Root490Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root490Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root49(
    pub ::std::vec::Vec<Root490Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root49 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root49;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root49, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root490Item> = match seq.next_element::<::std::vec::Vec<Root490Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root49(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=11 (required first 0 slots); accepts 0..=11 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root4(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root43>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root47>,
    pub ::core::option::Option<Root48>,
    pub ::core::option::Option<Root49>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root4;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=11")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root4, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root43> = match seq.next_element::<::core::option::Option<Root43>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Root47> = match seq.next_element::<::core::option::Option<Root47>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Root48> = match seq.next_element::<::core::option::Option<Root48>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Root49> = match seq.next_element::<::core::option::Option<Root49>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root4(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root70(pub ::std::string::String);
impl ::core::ops::Deref for Root70 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root70 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root70: expected URI scheme"));
        }
        Ok(Root70(s))
    }
}
/// tuple len=5 (required first 0 slots); accepts 0..=5 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7(
    pub ::core::option::Option<Root70>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root7 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root70> = match seq.next_element::<::core::option::Option<Root70>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root7(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root92(pub f64);
impl ::core::ops::Deref for Root92 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root92 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root92: non-finite number")); }
        
        Ok(Root92(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root93(pub f64);
impl ::core::ops::Deref for Root93 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root93 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root93: non-finite number")); }
        
        Ok(Root93(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root9(
    pub Null,
    pub Null,
    pub Root92,
    pub Root93,
);

impl<'de> ::serde::Deserialize<'de> for Root9 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root9;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root9, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root92 = match seq.next_element::<Root92>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root93 = match seq.next_element::<Root93>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root9(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item000(pub i64);
impl ::core::ops::Deref for Root240Item000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0053(pub i64);
impl ::core::ops::Deref for Root240Item0053 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0053 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0053(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0054(pub i64);
impl ::core::ops::Deref for Root240Item0054 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0054 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0054(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item005(
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item0053,
    pub Root240Item0054,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item005 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item005;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item005, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root240Item0053 = match seq.next_element::<Root240Item0053>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root240Item0054 = match seq.next_element::<Root240Item0054>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item005(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0063(pub i64);
impl ::core::ops::Deref for Root240Item0063 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0063 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0063(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0064(pub i64);
impl ::core::ops::Deref for Root240Item0064 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0064 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0064(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item006(
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item0063,
    pub Root240Item0064,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item006 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item006;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item006, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root240Item0063 = match seq.next_element::<Root240Item0063>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root240Item0064 = match seq.next_element::<Root240Item0064>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item006(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item00(
    pub Root240Item000,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item005,
    pub Root240Item006,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item00 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item00;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item00, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root240Item000 = match seq.next_element::<Root240Item000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Root240Item005 = match seq.next_element::<Root240Item005>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root240Item006 = match seq.next_element::<Root240Item006>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item00(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item010(pub i64);
impl ::core::ops::Deref for Root240Item010 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item010(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0151(pub i64);
impl ::core::ops::Deref for Root240Item0151 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0151 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0151(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0152(pub i64);
impl ::core::ops::Deref for Root240Item0152 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0152 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0152(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item015(
    pub Null,
    pub Root240Item0151,
    pub Root240Item0152,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item015 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item015;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item015, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root240Item0151 = match seq.next_element::<Root240Item0151>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root240Item0152 = match seq.next_element::<Root240Item0152>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item015(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0161(pub i64);
impl ::core::ops::Deref for Root240Item0161 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0161 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0161(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root240Item0162(pub i64);
impl ::core::ops::Deref for Root240Item0162 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root240Item0162 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root240Item0162(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item016(
    pub Null,
    pub Root240Item0161,
    pub Root240Item0162,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item016 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item016;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item016, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root240Item0161 = match seq.next_element::<Root240Item0161>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root240Item0162 = match seq.next_element::<Root240Item0162>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item016(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item01(
    pub Root240Item010,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item015,
    pub Root240Item016,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item01 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item01;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item01, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root240Item010 = match seq.next_element::<Root240Item010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Root240Item015 = match seq.next_element::<Root240Item015>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root240Item016 = match seq.next_element::<Root240Item016>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item01(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item0(
    pub Root240Item00,
    pub Root240Item01,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root240Item00 = match seq.next_element::<Root240Item00>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root240Item01 = match seq.next_element::<Root240Item01>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root240Item(
    pub Root240Item0,
);

impl<'de> ::serde::Deserialize<'de> for Root240Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root240Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root240Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root240Item0 = match seq.next_element::<Root240Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root240Item(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root24(
    pub ::std::vec::Vec<Root240Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root24 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root24;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root24, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root240Item> = match seq.next_element::<::std::vec::Vec<Root240Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root24(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2518000(pub i64);
impl ::core::ops::Deref for Root2518000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2518000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2518000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root251800(
    pub Root2518000,
);

impl<'de> ::serde::Deserialize<'de> for Root251800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root251800;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root251800, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2518000 = match seq.next_element::<Root2518000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root251800(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root251803(pub i64);
impl ::core::ops::Deref for Root251803 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root251803 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root251803(x))
    }
}
/// tuple len=12 (required exactly 12)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root25180(
    pub Root251800,
    pub ::std::string::String,
    pub Null,
    pub Root251803,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root25180 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root25180;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 12")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root25180, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root251800 = match seq.next_element::<Root251800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 12 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 12 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 12 elements")), };
                let a3: Root251803 = match seq.next_element::<Root251803>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 12 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 12 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 12 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 12 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 12 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 12 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 12 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 12 elements")), };
                let a11: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 12 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root25180(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2518100(pub i64);
impl ::core::ops::Deref for Root2518100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2518100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2518100(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root251810(
    pub Root2518100,
);

impl<'de> ::serde::Deserialize<'de> for Root251810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root251810;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root251810, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2518100 = match seq.next_element::<Root2518100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root251810(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root251813(pub i64);
impl ::core::ops::Deref for Root251813 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root251813 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root251813(x))
    }
}
/// tuple len=12 (required exactly 12)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root25181(
    pub Root251810,
    pub ::std::string::String,
    pub Null,
    pub Root251813,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root25181 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root25181;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 12")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root25181, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root251810 = match seq.next_element::<Root251810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 12 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 12 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 12 elements")), };
                let a3: Root251813 = match seq.next_element::<Root251813>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 12 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 12 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 12 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 12 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 12 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 12 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 12 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 12 elements")), };
                let a11: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 12 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root25181(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2518200(pub i64);
impl ::core::ops::Deref for Root2518200 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2518200 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2518200(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root251820(
    pub Root2518200,
);

impl<'de> ::serde::Deserialize<'de> for Root251820 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root251820;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root251820, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2518200 = match seq.next_element::<Root2518200>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root251820(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root251823(pub i64);
impl ::core::ops::Deref for Root251823 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root251823 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root251823(x))
    }
}
/// tuple len=12 (required exactly 12)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root25182(
    pub Root251820,
    pub ::std::string::String,
    pub Null,
    pub Root251823,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root25182 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root25182;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 12")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root25182, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root251820 = match seq.next_element::<Root251820>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 12 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 12 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 12 elements")), };
                let a3: Root251823 = match seq.next_element::<Root251823>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 12 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 12 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 12 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 12 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 12 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 12 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 12 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 12 elements")), };
                let a11: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 12 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root25182(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2518300(pub i64);
impl ::core::ops::Deref for Root2518300 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2518300 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2518300(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root251830(
    pub Root2518300,
);

impl<'de> ::serde::Deserialize<'de> for Root251830 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root251830;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root251830, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2518300 = match seq.next_element::<Root2518300>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root251830(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root251833(pub i64);
impl ::core::ops::Deref for Root251833 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root251833 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root251833(x))
    }
}
/// tuple len=12 (required exactly 12)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root25183(
    pub Root251830,
    pub ::std::string::String,
    pub Null,
    pub Root251833,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root25183 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root25183;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 12")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root25183, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root251830 = match seq.next_element::<Root251830>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 12 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 12 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 12 elements")), };
                let a3: Root251833 = match seq.next_element::<Root251833>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 12 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 12 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 12 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 12 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 12 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 12 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 12 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 12 elements")), };
                let a11: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 12 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root25183(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2518400(pub i64);
impl ::core::ops::Deref for Root2518400 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2518400 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2518400(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root251840(
    pub Root2518400,
);

impl<'de> ::serde::Deserialize<'de> for Root251840 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root251840;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root251840, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2518400 = match seq.next_element::<Root2518400>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root251840(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root251843(pub i64);
impl ::core::ops::Deref for Root251843 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root251843 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root251843(x))
    }
}
/// tuple len=12 (required exactly 12)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root25184(
    pub Root251840,
    pub ::std::string::String,
    pub Null,
    pub Root251843,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root25184 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root25184;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 12")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root25184, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root251840 = match seq.next_element::<Root251840>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 12 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 12 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 12 elements")), };
                let a3: Root251843 = match seq.next_element::<Root251843>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 12 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 12 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 12 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 12 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 12 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 12 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 12 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 12 elements")), };
                let a11: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 12 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root25184(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2518(
    pub Root25180,
    pub Root25181,
    pub Root25182,
    pub Root25183,
    pub Root25184,
);

impl<'de> ::serde::Deserialize<'de> for Root2518 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2518;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2518, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root25180 = match seq.next_element::<Root25180>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root25181 = match seq.next_element::<Root25181>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root25182 = match seq.next_element::<Root25182>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root25183 = match seq.next_element::<Root25183>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root25184 = match seq.next_element::<Root25184>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2518(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=23 (required exactly 23)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root25(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2518,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root25 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root25;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 23")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root25, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 23 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 23 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 23 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 23 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 23 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 23 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 23 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 23 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 23 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 23 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 23 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 23 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 23 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 23 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 23 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 23 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 23 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 23 elements")), };
                let a18: Root2518 = match seq.next_element::<Root2518>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 23 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 23 elements")), };
                let a20: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 23 elements")), };
                let a21: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 23 elements")), };
                let a22: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 23 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root25(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3205(pub i64);
impl ::core::ops::Deref for Root3205 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3205 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3205(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root320(
    pub Null,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Root3205,
);

impl<'de> ::serde::Deserialize<'de> for Root320 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root320;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root320, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root3205 = match seq.next_element::<Root3205>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root320(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3215(pub i64);
impl ::core::ops::Deref for Root3215 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3215 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3215(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root321(
    pub Null,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Root3215,
);

impl<'de> ::serde::Deserialize<'de> for Root321 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root321;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root321, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root3215 = match seq.next_element::<Root3215>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root321(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3225(pub i64);
impl ::core::ops::Deref for Root3225 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3225 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3225(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root32270(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root32270 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root32270;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root32270, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root32270(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3227(
    pub Root32270,
);

impl<'de> ::serde::Deserialize<'de> for Root3227 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3227;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3227, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root32270 = match seq.next_element::<Root32270>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3227(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root322(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root3225,
    pub Null,
    pub Root3227,
);

impl<'de> ::serde::Deserialize<'de> for Root322 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root322;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root322, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root3225 = match seq.next_element::<Root3225>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root3227 = match seq.next_element::<Root3227>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root322(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root323(pub ::std::string::String);
impl ::core::ops::Deref for Root323 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root323 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root323: expected URI scheme"));
        }
        Ok(Root323(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root324(pub ::std::string::String);
impl ::core::ops::Deref for Root324 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root324 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root324: expected URI scheme"));
        }
        Ok(Root324(s))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root32(
    pub Root320,
    pub Root321,
    pub ::core::option::Option<Root322>,
    pub Root323,
    pub Root324,
);

impl<'de> ::serde::Deserialize<'de> for Root32 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root32;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root32, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root320 = match seq.next_element::<Root320>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root321 = match seq.next_element::<Root321>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: ::core::option::Option<Root322> = match seq.next_element::<::core::option::Option<Root322>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root323 = match seq.next_element::<Root323>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root324 = match seq.next_element::<Root324>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root32(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34105(pub i64);
impl ::core::ops::Deref for Root34105 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34105 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34105(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34106Item0(pub i64);
impl ::core::ops::Deref for Root34106Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34106Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34106Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34106Item1(pub i64);
impl ::core::ops::Deref for Root34106Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34106Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34106Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34106Item2(pub i64);
impl ::core::ops::Deref for Root34106Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34106Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34106Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34106Item3(pub i64);
impl ::core::ops::Deref for Root34106Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34106Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34106Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34106Item(
    pub Root34106Item0,
    pub Root34106Item1,
    pub Root34106Item2,
    pub Root34106Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root34106Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34106Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34106Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root34106Item0 = match seq.next_element::<Root34106Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root34106Item1 = match seq.next_element::<Root34106Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root34106Item2 = match seq.next_element::<Root34106Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root34106Item3 = match seq.next_element::<Root34106Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root34106Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34107(pub i64);
impl ::core::ops::Deref for Root34107 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34107 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34107(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3410(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root34105,
    pub ::core::option::Option<::std::vec::Vec<Root34106Item>>,
    pub Root34107,
);

impl<'de> ::serde::Deserialize<'de> for Root3410 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3410;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3410, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root34105 = match seq.next_element::<Root34105>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root34106Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root34106Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root34107 = match seq.next_element::<Root34107>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3410(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34115(pub i64);
impl ::core::ops::Deref for Root34115 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34115 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34115(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34116Item0(pub i64);
impl ::core::ops::Deref for Root34116Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34116Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34116Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34116Item1(pub i64);
impl ::core::ops::Deref for Root34116Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34116Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34116Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34116Item2(pub i64);
impl ::core::ops::Deref for Root34116Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34116Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34116Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34116Item3(pub i64);
impl ::core::ops::Deref for Root34116Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34116Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34116Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34116Item(
    pub Root34116Item0,
    pub Root34116Item1,
    pub Root34116Item2,
    pub Root34116Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root34116Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34116Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34116Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root34116Item0 = match seq.next_element::<Root34116Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root34116Item1 = match seq.next_element::<Root34116Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root34116Item2 = match seq.next_element::<Root34116Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root34116Item3 = match seq.next_element::<Root34116Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root34116Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34117(pub i64);
impl ::core::ops::Deref for Root34117 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34117 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34117(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3411(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root34115,
    pub ::core::option::Option<::std::vec::Vec<Root34116Item>>,
    pub Root34117,
);

impl<'de> ::serde::Deserialize<'de> for Root3411 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3411;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3411, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root34115 = match seq.next_element::<Root34115>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root34116Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root34116Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root34117 = match seq.next_element::<Root34117>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3411(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34125(pub i64);
impl ::core::ops::Deref for Root34125 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34125 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34125(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34126Item0(pub i64);
impl ::core::ops::Deref for Root34126Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34126Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34126Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34126Item1(pub i64);
impl ::core::ops::Deref for Root34126Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34126Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34126Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34126Item2(pub i64);
impl ::core::ops::Deref for Root34126Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34126Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34126Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34126Item3(pub i64);
impl ::core::ops::Deref for Root34126Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34126Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34126Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34126Item(
    pub Root34126Item0,
    pub Root34126Item1,
    pub Root34126Item2,
    pub Root34126Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root34126Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34126Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34126Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root34126Item0 = match seq.next_element::<Root34126Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root34126Item1 = match seq.next_element::<Root34126Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root34126Item2 = match seq.next_element::<Root34126Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root34126Item3 = match seq.next_element::<Root34126Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root34126Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34127(pub i64);
impl ::core::ops::Deref for Root34127 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34127 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34127(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3412(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root34125,
    pub ::core::option::Option<::std::vec::Vec<Root34126Item>>,
    pub Root34127,
);

impl<'de> ::serde::Deserialize<'de> for Root3412 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3412;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3412, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root34125 = match seq.next_element::<Root34125>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root34126Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root34126Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root34127 = match seq.next_element::<Root34127>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3412(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34135(pub i64);
impl ::core::ops::Deref for Root34135 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34135 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34135(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34136Item0(pub i64);
impl ::core::ops::Deref for Root34136Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34136Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34136Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34136Item1(pub i64);
impl ::core::ops::Deref for Root34136Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34136Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34136Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34136Item2(pub i64);
impl ::core::ops::Deref for Root34136Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34136Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34136Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34136Item3(pub i64);
impl ::core::ops::Deref for Root34136Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34136Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34136Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34136Item(
    pub Root34136Item0,
    pub Root34136Item1,
    pub Root34136Item2,
    pub Root34136Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root34136Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34136Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34136Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root34136Item0 = match seq.next_element::<Root34136Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root34136Item1 = match seq.next_element::<Root34136Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root34136Item2 = match seq.next_element::<Root34136Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root34136Item3 = match seq.next_element::<Root34136Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root34136Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34137(pub i64);
impl ::core::ops::Deref for Root34137 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34137 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34137(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3413(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root34135,
    pub ::core::option::Option<::std::vec::Vec<Root34136Item>>,
    pub Root34137,
);

impl<'de> ::serde::Deserialize<'de> for Root3413 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3413;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3413, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root34135 = match seq.next_element::<Root34135>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root34136Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root34136Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root34137 = match seq.next_element::<Root34137>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3413(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34145(pub i64);
impl ::core::ops::Deref for Root34145 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34145 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34145(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34146Item0(pub i64);
impl ::core::ops::Deref for Root34146Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34146Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34146Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34146Item1(pub i64);
impl ::core::ops::Deref for Root34146Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34146Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34146Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34146Item2(pub i64);
impl ::core::ops::Deref for Root34146Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34146Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34146Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34146Item3(pub i64);
impl ::core::ops::Deref for Root34146Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34146Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34146Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34146Item(
    pub Root34146Item0,
    pub Root34146Item1,
    pub Root34146Item2,
    pub Root34146Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root34146Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34146Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34146Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root34146Item0 = match seq.next_element::<Root34146Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root34146Item1 = match seq.next_element::<Root34146Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root34146Item2 = match seq.next_element::<Root34146Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root34146Item3 = match seq.next_element::<Root34146Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root34146Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34147(pub i64);
impl ::core::ops::Deref for Root34147 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34147 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34147(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3414(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root34145,
    pub ::core::option::Option<::std::vec::Vec<Root34146Item>>,
    pub Root34147,
);

impl<'de> ::serde::Deserialize<'de> for Root3414 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3414;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3414, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root34145 = match seq.next_element::<Root34145>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root34146Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root34146Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root34147 = match seq.next_element::<Root34147>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3414(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34155(pub i64);
impl ::core::ops::Deref for Root34155 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34155 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34155(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34156Item0(pub i64);
impl ::core::ops::Deref for Root34156Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34156Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34156Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34156Item1(pub i64);
impl ::core::ops::Deref for Root34156Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34156Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34156Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34156Item2(pub i64);
impl ::core::ops::Deref for Root34156Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34156Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34156Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34156Item3(pub i64);
impl ::core::ops::Deref for Root34156Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34156Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34156Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34156Item(
    pub Root34156Item0,
    pub Root34156Item1,
    pub Root34156Item2,
    pub Root34156Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root34156Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34156Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34156Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root34156Item0 = match seq.next_element::<Root34156Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root34156Item1 = match seq.next_element::<Root34156Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root34156Item2 = match seq.next_element::<Root34156Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root34156Item3 = match seq.next_element::<Root34156Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root34156Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34157(pub i64);
impl ::core::ops::Deref for Root34157 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34157 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34157(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3415(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root34155,
    pub ::core::option::Option<::std::vec::Vec<Root34156Item>>,
    pub Root34157,
);

impl<'de> ::serde::Deserialize<'de> for Root3415 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3415;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3415, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root34155 = match seq.next_element::<Root34155>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root34156Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root34156Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root34157 = match seq.next_element::<Root34157>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3415(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34165(pub i64);
impl ::core::ops::Deref for Root34165 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34165(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34166Item0(pub i64);
impl ::core::ops::Deref for Root34166Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34166Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34166Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34166Item1(pub i64);
impl ::core::ops::Deref for Root34166Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34166Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34166Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34166Item2(pub i64);
impl ::core::ops::Deref for Root34166Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34166Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34166Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34166Item3(pub i64);
impl ::core::ops::Deref for Root34166Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34166Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34166Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34166Item(
    pub Root34166Item0,
    pub Root34166Item1,
    pub Root34166Item2,
    pub Root34166Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root34166Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34166Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34166Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root34166Item0 = match seq.next_element::<Root34166Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root34166Item1 = match seq.next_element::<Root34166Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root34166Item2 = match seq.next_element::<Root34166Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root34166Item3 = match seq.next_element::<Root34166Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root34166Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root34167(pub i64);
impl ::core::ops::Deref for Root34167 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root34167 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root34167(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3416(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root34165,
    pub ::core::option::Option<::std::vec::Vec<Root34166Item>>,
    pub Root34167,
);

impl<'de> ::serde::Deserialize<'de> for Root3416 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3416;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3416, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root34165 = match seq.next_element::<Root34165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root34166Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root34166Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root34167 = match seq.next_element::<Root34167>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3416(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root341(
    pub Root3410,
    pub Root3411,
    pub Root3412,
    pub Root3413,
    pub Root3414,
    pub Root3415,
    pub Root3416,
);

impl<'de> ::serde::Deserialize<'de> for Root341 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root341;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root341, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root3410 = match seq.next_element::<Root3410>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Root3411 = match seq.next_element::<Root3411>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Root3412 = match seq.next_element::<Root3412>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Root3413 = match seq.next_element::<Root3413>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Root3414 = match seq.next_element::<Root3414>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Root3415 = match seq.next_element::<Root3415>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root3416 = match seq.next_element::<Root3416>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root341(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root344ItemAlt05(pub i64);
impl ::core::ops::Deref for Root344ItemAlt05 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt05 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root344ItemAlt05(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root344ItemAlt06Item0(pub i64);
impl ::core::ops::Deref for Root344ItemAlt06Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt06Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root344ItemAlt06Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root344ItemAlt06Item1(pub i64);
impl ::core::ops::Deref for Root344ItemAlt06Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt06Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root344ItemAlt06Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root344ItemAlt06Item2(pub i64);
impl ::core::ops::Deref for Root344ItemAlt06Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt06Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root344ItemAlt06Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root344ItemAlt06Item3(pub i64);
impl ::core::ops::Deref for Root344ItemAlt06Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt06Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root344ItemAlt06Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root344ItemAlt06Item(
    pub Root344ItemAlt06Item0,
    pub Root344ItemAlt06Item1,
    pub Root344ItemAlt06Item2,
    pub Root344ItemAlt06Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt06Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root344ItemAlt06Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root344ItemAlt06Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root344ItemAlt06Item0 = match seq.next_element::<Root344ItemAlt06Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root344ItemAlt06Item1 = match seq.next_element::<Root344ItemAlt06Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root344ItemAlt06Item2 = match seq.next_element::<Root344ItemAlt06Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root344ItemAlt06Item3 = match seq.next_element::<Root344ItemAlt06Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root344ItemAlt06Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root344ItemAlt07(pub i64);
impl ::core::ops::Deref for Root344ItemAlt07 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt07 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root344ItemAlt07(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root344ItemAlt0(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root344ItemAlt05,
    pub ::core::option::Option<::std::vec::Vec<Root344ItemAlt06Item>>,
    pub Root344ItemAlt07,
);

impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root344ItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root344ItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root344ItemAlt05 = match seq.next_element::<Root344ItemAlt05>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root344ItemAlt06Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root344ItemAlt06Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root344ItemAlt07 = match seq.next_element::<Root344ItemAlt07>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root344ItemAlt0(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root344ItemAlt1(pub i64);
impl ::core::ops::Deref for Root344ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root344ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root344ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root344Item {
    V0(Root344ItemAlt0),
    V1(Root344ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root344Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root344ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root344Item::V0(x)),
                Err(e) => errs.push((0, "Root344ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root344ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root344Item::V1(x)),
                Err(e) => errs.push((1, "Root344ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root344Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3465(pub i64);
impl ::core::ops::Deref for Root3465 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3465 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3465(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3466Item0(pub i64);
impl ::core::ops::Deref for Root3466Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3466Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3466Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3466Item1(pub i64);
impl ::core::ops::Deref for Root3466Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3466Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3466Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3466Item2(pub i64);
impl ::core::ops::Deref for Root3466Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3466Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3466Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3466Item3(pub i64);
impl ::core::ops::Deref for Root3466Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3466Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3466Item3(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3466Item(
    pub Root3466Item0,
    pub Root3466Item1,
    pub Root3466Item2,
    pub Root3466Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root3466Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3466Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3466Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root3466Item0 = match seq.next_element::<Root3466Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root3466Item1 = match seq.next_element::<Root3466Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root3466Item2 = match seq.next_element::<Root3466Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root3466Item3 = match seq.next_element::<Root3466Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3466Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3467(pub i64);
impl ::core::ops::Deref for Root3467 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3467 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3467(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root346(
    pub ::std::string::String,
    pub ::std::vec::Vec<::std::string::String>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root3465,
    pub ::core::option::Option<::std::vec::Vec<Root3466Item>>,
    pub Root3467,
);

impl<'de> ::serde::Deserialize<'de> for Root346 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root346;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root346, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<::std::string::String> = match seq.next_element::<::std::vec::Vec<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root3465 = match seq.next_element::<Root3465>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: ::core::option::Option<::std::vec::Vec<Root3466Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root3466Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root3467 = match seq.next_element::<Root3467>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root346(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required first 0 slots); accepts 0..=9 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root34(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root341>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<Root344Item>>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root346>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root34 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root34;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root34, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root341> = match seq.next_element::<::core::option::Option<Root341>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<::std::vec::Vec<::core::option::Option<Root344Item>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<Root344Item>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Root346> = match seq.next_element::<::core::option::Option<Root346>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root34(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root354(pub i64);
impl ::core::ops::Deref for Root354 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root354 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root354(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3571(pub i64);
impl ::core::ops::Deref for Root3571 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3571 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3571(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3573(pub i64);
impl ::core::ops::Deref for Root3573 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3573 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3573(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35780(pub i64);
impl ::core::ops::Deref for Root35780 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35780 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35780(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35781(pub i64);
impl ::core::ops::Deref for Root35781 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35781 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35781(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35782(pub i64);
impl ::core::ops::Deref for Root35782 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35782 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35782(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35783(pub i64);
impl ::core::ops::Deref for Root35783 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35783 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35783(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3578(
    pub Root35780,
    pub Root35781,
    pub Root35782,
    pub Root35783,
);

impl<'de> ::serde::Deserialize<'de> for Root3578 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3578;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3578, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root35780 = match seq.next_element::<Root35780>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root35781 = match seq.next_element::<Root35781>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root35782 = match seq.next_element::<Root35782>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root35783 = match seq.next_element::<Root35783>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3578(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root357140(pub i64);
impl ::core::ops::Deref for Root357140 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root357140 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root357140(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root35714(
    pub Root357140,
);

impl<'de> ::serde::Deserialize<'de> for Root35714 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root35714;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root35714, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root357140 = match seq.next_element::<Root357140>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root35714(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35715(pub i64);
impl ::core::ops::Deref for Root35715 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35715 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35715(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3571600(pub i64);
impl ::core::ops::Deref for Root3571600 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3571600 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3571600(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3571601(pub i64);
impl ::core::ops::Deref for Root3571601 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3571601 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3571601(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3571602(pub i64);
impl ::core::ops::Deref for Root3571602 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3571602 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3571602(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root357160(
    pub Root3571600,
    pub Root3571601,
    pub Root3571602,
);

impl<'de> ::serde::Deserialize<'de> for Root357160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root357160;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root357160, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root3571600 = match seq.next_element::<Root3571600>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root3571601 = match seq.next_element::<Root3571601>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root3571602 = match seq.next_element::<Root3571602>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root357160(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3571610(pub i64);
impl ::core::ops::Deref for Root3571610 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3571610 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3571610(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3571611(pub i64);
impl ::core::ops::Deref for Root3571611 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3571611 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3571611(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3571612(pub i64);
impl ::core::ops::Deref for Root3571612 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3571612 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3571612(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root357161(
    pub Root3571610,
    pub Root3571611,
    pub Root3571612,
);

impl<'de> ::serde::Deserialize<'de> for Root357161 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root357161;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root357161, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root3571610 = match seq.next_element::<Root3571610>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root3571611 = match seq.next_element::<Root3571611>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root3571612 = match seq.next_element::<Root3571612>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root357161(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root357163(pub i64);
impl ::core::ops::Deref for Root357163 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root357163 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root357163(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root357165(pub i64);
impl ::core::ops::Deref for Root357165 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root357165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root357165(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root35716(
    pub Root357160,
    pub Root357161,
    pub Null,
    pub Root357163,
    pub Null,
    pub Root357165,
);

impl<'de> ::serde::Deserialize<'de> for Root35716 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root35716;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root35716, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root357160 = match seq.next_element::<Root357160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root357161 = match seq.next_element::<Root357161>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Root357163 = match seq.next_element::<Root357163>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root357165 = match seq.next_element::<Root357165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root35716(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35718(pub i64);
impl ::core::ops::Deref for Root35718 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35718 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35718(x))
    }
}
/// tuple len=22 (required exactly 22)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root357(
    pub ::std::string::String,
    pub Root3571,
    pub Null,
    pub Root3573,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root3578,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root35714,
    pub Root35715,
    pub Root35716,
    pub Null,
    pub Root35718,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root357 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root357;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 22")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root357, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 22 elements")), };
                let a1: Root3571 = match seq.next_element::<Root3571>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 22 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 22 elements")), };
                let a3: Root3573 = match seq.next_element::<Root3573>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 22 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 22 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 22 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 22 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 22 elements")), };
                let a8: Root3578 = match seq.next_element::<Root3578>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 22 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 22 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 22 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 22 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 22 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 22 elements")), };
                let a14: Root35714 = match seq.next_element::<Root35714>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 22 elements")), };
                let a15: Root35715 = match seq.next_element::<Root35715>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 22 elements")), };
                let a16: Root35716 = match seq.next_element::<Root35716>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 22 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 22 elements")), };
                let a18: Root35718 = match seq.next_element::<Root35718>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 22 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 22 elements")), };
                let a20: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 22 elements")), };
                let a21: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 22 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root357(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35200(pub i64);
impl ::core::ops::Deref for Root35200 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35200 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35200(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35203(pub i64);
impl ::core::ops::Deref for Root35203 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35203 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35203(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35204(pub i64);
impl ::core::ops::Deref for Root35204 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35204 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35204(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35205(pub i64);
impl ::core::ops::Deref for Root35205 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35205 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35205(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35206(pub i64);
impl ::core::ops::Deref for Root35206 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35206 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35206(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root352012(pub i64);
impl ::core::ops::Deref for Root352012 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root352012 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root352012(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root352015(pub i64);
impl ::core::ops::Deref for Root352015 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root352015 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root352015(x))
    }
}
/// tuple len=16 (required exactly 16)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3520(
    pub Root35200,
    pub Null,
    pub ::std::string::String,
    pub Root35203,
    pub Root35204,
    pub Root35205,
    pub Root35206,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root352012,
    pub Null,
    pub ::std::string::String,
    pub Root352015,
);

impl<'de> ::serde::Deserialize<'de> for Root3520 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3520;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 16")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3520, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root35200 = match seq.next_element::<Root35200>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 16 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 16 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 16 elements")), };
                let a3: Root35203 = match seq.next_element::<Root35203>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 16 elements")), };
                let a4: Root35204 = match seq.next_element::<Root35204>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 16 elements")), };
                let a5: Root35205 = match seq.next_element::<Root35205>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 16 elements")), };
                let a6: Root35206 = match seq.next_element::<Root35206>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 16 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 16 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 16 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 16 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 16 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 16 elements")), };
                let a12: Root352012 = match seq.next_element::<Root352012>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 16 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 16 elements")), };
                let a14: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 16 elements")), };
                let a15: Root352015 = match seq.next_element::<Root352015>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 16 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3520(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3531(pub i64);
impl ::core::ops::Deref for Root3531 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3531 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3531(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532000(pub i64);
impl ::core::ops::Deref for Root3532000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001003(pub i64);
impl ::core::ops::Deref for Root3532001003 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001003 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001003(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001004(pub i64);
impl ::core::ops::Deref for Root3532001004 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001004 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001004(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001005(pub i64);
impl ::core::ops::Deref for Root3532001005 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001005 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001005(x))
    }
}
/// tuple len=6 (required first 0 slots); accepts 0..=6 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root353200100(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root3532001003>,
    pub ::core::option::Option<Root3532001004>,
    pub ::core::option::Option<Root3532001005>,
);

impl<'de> ::serde::Deserialize<'de> for Root353200100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root353200100;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root353200100, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root3532001003> = match seq.next_element::<::core::option::Option<Root3532001003>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root3532001004> = match seq.next_element::<::core::option::Option<Root3532001004>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Root3532001005> = match seq.next_element::<::core::option::Option<Root3532001005>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root353200100(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001013(pub i64);
impl ::core::ops::Deref for Root3532001013 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001013 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001013(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001014(pub i64);
impl ::core::ops::Deref for Root3532001014 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001014 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001014(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001015(pub i64);
impl ::core::ops::Deref for Root3532001015 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001015 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001015(x))
    }
}
/// tuple len=6 (required first 0 slots); accepts 0..=6 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root353200101(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root3532001013>,
    pub ::core::option::Option<Root3532001014>,
    pub ::core::option::Option<Root3532001015>,
);

impl<'de> ::serde::Deserialize<'de> for Root353200101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root353200101;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root353200101, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root3532001013> = match seq.next_element::<::core::option::Option<Root3532001013>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root3532001014> = match seq.next_element::<::core::option::Option<Root3532001014>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Root3532001015> = match seq.next_element::<::core::option::Option<Root3532001015>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root353200101(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001023(pub i64);
impl ::core::ops::Deref for Root3532001023 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001023 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001023(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001024(pub i64);
impl ::core::ops::Deref for Root3532001024 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001024 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001024(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001025(pub i64);
impl ::core::ops::Deref for Root3532001025 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001025 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001025(x))
    }
}
/// tuple len=6 (required first 0 slots); accepts 0..=6 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root353200102(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root3532001023>,
    pub ::core::option::Option<Root3532001024>,
    pub ::core::option::Option<Root3532001025>,
);

impl<'de> ::serde::Deserialize<'de> for Root353200102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root353200102;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root353200102, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root3532001023> = match seq.next_element::<::core::option::Option<Root3532001023>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root3532001024> = match seq.next_element::<::core::option::Option<Root3532001024>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Root3532001025> = match seq.next_element::<::core::option::Option<Root3532001025>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root353200102(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001033(pub i64);
impl ::core::ops::Deref for Root3532001033 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001033 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001033(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001034(pub i64);
impl ::core::ops::Deref for Root3532001034 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001034 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001034(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3532001035(pub i64);
impl ::core::ops::Deref for Root3532001035 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3532001035 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3532001035(x))
    }
}
/// tuple len=6 (required first 0 slots); accepts 0..=6 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root353200103(
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root3532001033>,
    pub ::core::option::Option<Root3532001034>,
    pub ::core::option::Option<Root3532001035>,
);

impl<'de> ::serde::Deserialize<'de> for Root353200103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root353200103;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root353200103, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root3532001033> = match seq.next_element::<::core::option::Option<Root3532001033>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root3532001034> = match seq.next_element::<::core::option::Option<Root3532001034>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Root3532001035> = match seq.next_element::<::core::option::Option<Root3532001035>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root353200103(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root35320010(
    pub Root353200100,
    pub Root353200101,
    pub Root353200102,
    pub Root353200103,
);

impl<'de> ::serde::Deserialize<'de> for Root35320010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root35320010;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root35320010, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root353200100 = match seq.next_element::<Root353200100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root353200101 = match seq.next_element::<Root353200101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root353200102 = match seq.next_element::<Root353200102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root353200103 = match seq.next_element::<Root353200103>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root35320010(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3532001(
    pub Root35320010,
);

impl<'de> ::serde::Deserialize<'de> for Root3532001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3532001;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3532001, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root35320010 = match seq.next_element::<Root35320010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3532001(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root35320011(pub i64);
impl ::core::ops::Deref for Root35320011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root35320011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root35320011(x))
    }
}
/// tuple len=12 (required exactly 12)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root353200(
    pub Root3532000,
    pub Root3532001,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root35320011,
);

impl<'de> ::serde::Deserialize<'de> for Root353200 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root353200;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 12")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root353200, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root3532000 = match seq.next_element::<Root3532000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 12 elements")), };
                let a1: Root3532001 = match seq.next_element::<Root3532001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 12 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 12 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 12 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 12 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 12 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 12 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 12 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 12 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 12 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 12 elements")), };
                let a11: Root35320011 = match seq.next_element::<Root35320011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 12 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root353200(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root35320(
    pub Root353200,
);

impl<'de> ::serde::Deserialize<'de> for Root35320 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root35320;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root35320, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root353200 = match seq.next_element::<Root353200>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root35320(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3532(
    pub Root35320,
);

impl<'de> ::serde::Deserialize<'de> for Root3532 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3532;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3532, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root35320 = match seq.next_element::<Root35320>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3532(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3539(pub i64);
impl ::core::ops::Deref for Root3539 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3539 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3539(x))
    }
}
/// tuple len=54 (required exactly 54)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root35(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Root354,
    pub Null,
    pub ::core::option::Option<::std::string::String>,
    pub Root357,
    pub Null,
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root3520>,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root3531,
    pub Root3532,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Root3539,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::vec::Vec<Null>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::vec::Vec<Null>,
);

impl<'de> ::serde::Deserialize<'de> for Root35 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root35;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 54")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root35, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 54 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 54 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 54 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 54 elements")), };
                let a4: Root354 = match seq.next_element::<Root354>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 54 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 54 elements")), };
                let a6: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 54 elements")), };
                let a7: Root357 = match seq.next_element::<Root357>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 54 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 54 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 54 elements")), };
                let a10: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 54 elements")), };
                let a11: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 54 elements")), };
                let a12: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 54 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 54 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 54 elements")), };
                let a15: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 54 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 54 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 54 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 54 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 54 elements")), };
                let a20: ::core::option::Option<Root3520> = match seq.next_element::<::core::option::Option<Root3520>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 54 elements")), };
                let a21: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 54 elements")), };
                let a22: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 54 elements")), };
                let a23: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 54 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 54 elements")), };
                let a25: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 54 elements")), };
                let a26: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 54 elements")), };
                let a27: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 54 elements")), };
                let a28: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 54 elements")), };
                let a29: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 54 elements")), };
                let a30: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 54 elements")), };
                let a31: Root3531 = match seq.next_element::<Root3531>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 54 elements")), };
                let a32: Root3532 = match seq.next_element::<Root3532>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(32, &"expected 54 elements")), };
                let a33: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(33, &"expected 54 elements")), };
                let a34: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(34, &"expected 54 elements")), };
                let a35: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(35, &"expected 54 elements")), };
                let a36: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(36, &"expected 54 elements")), };
                let a37: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(37, &"expected 54 elements")), };
                let a38: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(38, &"expected 54 elements")), };
                let a39: Root3539 = match seq.next_element::<Root3539>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(39, &"expected 54 elements")), };
                let a40: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(40, &"expected 54 elements")), };
                let a41: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(41, &"expected 54 elements")), };
                let a42: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(42, &"expected 54 elements")), };
                let a43: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(43, &"expected 54 elements")), };
                let a44: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(44, &"expected 54 elements")), };
                let a45: ::std::vec::Vec<Null> = match seq.next_element::<::std::vec::Vec<Null>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(45, &"expected 54 elements")), };
                let a46: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(46, &"expected 54 elements")), };
                let a47: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(47, &"expected 54 elements")), };
                let a48: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(48, &"expected 54 elements")), };
                let a49: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(49, &"expected 54 elements")), };
                let a50: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(50, &"expected 54 elements")), };
                let a51: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(51, &"expected 54 elements")), };
                let a52: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(52, &"expected 54 elements")), };
                let a53: ::std::vec::Vec<Null> = match seq.next_element::<::std::vec::Vec<Null>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(53, &"expected 54 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root35(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                    a32,
                    a33,
                    a34,
                    a35,
                    a36,
                    a37,
                    a38,
                    a39,
                    a40,
                    a41,
                    a42,
                    a43,
                    a44,
                    a45,
                    a46,
                    a47,
                    a48,
                    a49,
                    a50,
                    a51,
                    a52,
                    a53,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item1(pub i64);
impl ::core::ops::Deref for Root370Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item2(pub i64);
impl ::core::ops::Deref for Root370Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item60(pub ::std::string::String);
impl ::core::ops::Deref for Root370Item60 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item60 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root370Item60: expected URI scheme"));
        }
        Ok(Root370Item60(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item620(pub i64);
impl ::core::ops::Deref for Root370Item620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item620 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item621(pub i64);
impl ::core::ops::Deref for Root370Item621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item621 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item621(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item62(
    pub Root370Item620,
    pub Root370Item621,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item62 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item62;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item62, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item620 = match seq.next_element::<Root370Item620>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root370Item621 = match seq.next_element::<Root370Item621>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item62(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item630(pub i64);
impl ::core::ops::Deref for Root370Item630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item630 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item631(pub i64);
impl ::core::ops::Deref for Root370Item631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item631 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item631(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item63(
    pub Root370Item630,
    pub Root370Item631,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item63 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item63;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item63, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item630 = match seq.next_element::<Root370Item630>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root370Item631 = match seq.next_element::<Root370Item631>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item63(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item6(
    pub Root370Item60,
    pub ::std::string::String,
    pub ::core::option::Option<Root370Item62>,
    pub Root370Item63,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item6 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item6;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item6, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item60 = match seq.next_element::<Root370Item60>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::core::option::Option<Root370Item62> = match seq.next_element::<::core::option::Option<Root370Item62>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root370Item63 = match seq.next_element::<Root370Item63>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item6(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item800(pub i64);
impl ::core::ops::Deref for Root370Item800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root370Item801(pub f64);
impl ::core::ops::Deref for Root370Item801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root370Item801: non-finite number")); }
        
        Ok(Root370Item801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root370Item802(pub f64);
impl ::core::ops::Deref for Root370Item802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item802 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root370Item802: non-finite number")); }
        
        Ok(Root370Item802(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item80(
    pub Root370Item800,
    pub Root370Item801,
    pub Root370Item802,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item80 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item80;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item80, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item800 = match seq.next_element::<Root370Item800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root370Item801 = match seq.next_element::<Root370Item801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root370Item802 = match seq.next_element::<Root370Item802>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item80(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root370Item810(pub f64);
impl ::core::ops::Deref for Root370Item810 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root370Item810: non-finite number")); }
        
        Ok(Root370Item810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item811(pub i64);
impl ::core::ops::Deref for Root370Item811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item811 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item811(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item81(
    pub Root370Item810,
    pub Root370Item811,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item81 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item81;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item81, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item810 = match seq.next_element::<Root370Item810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root370Item811 = match seq.next_element::<Root370Item811>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item81(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item820(pub i64);
impl ::core::ops::Deref for Root370Item820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item820 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item821(pub i64);
impl ::core::ops::Deref for Root370Item821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item821 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item821(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item82(
    pub Root370Item820,
    pub Root370Item821,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item82 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item82;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item82, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item820 = match seq.next_element::<Root370Item820>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root370Item821 = match seq.next_element::<Root370Item821>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item82(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item83(pub i64);
impl ::core::ops::Deref for Root370Item83 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item83 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item83(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item8(
    pub Root370Item80,
    pub Root370Item81,
    pub Root370Item82,
    pub Root370Item83,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item8 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item8;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item8, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item80 = match seq.next_element::<Root370Item80>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root370Item81 = match seq.next_element::<Root370Item81>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root370Item82 = match seq.next_element::<Root370Item82>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root370Item83 = match seq.next_element::<Root370Item83>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item8(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item1500(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item1500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item1500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item1500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item1500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item150(
    pub Root370Item1500,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item1500 = match seq.next_element::<Root370Item1500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item150(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item15(
    pub Root370Item150,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item15 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item15;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item15, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item150 = match seq.next_element::<Root370Item150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item15(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item17(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item17 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item17;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item17, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item17(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item2110(pub i64);
impl ::core::ops::Deref for Root370Item2110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item2110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item2110(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item211(
    pub Root370Item2110,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item211;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item211, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item2110 = match seq.next_element::<Root370Item2110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item211(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item212ItemAlt0Item(pub i64);
impl ::core::ops::Deref for Root370Item212ItemAlt0Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item212ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item212ItemAlt0Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item212ItemAlt1(pub i64);
impl ::core::ops::Deref for Root370Item212ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item212ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item212ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root370Item212Item {
    V0(::std::vec::Vec<Root370Item212ItemAlt0Item>),
    V1(Root370Item212ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root370Item212Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root370Item212ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root370Item212Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root370Item212ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root370Item212ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root370Item212Item::V1(x)),
                Err(e) => errs.push((1, "Root370Item212ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item215000(pub i64);
impl ::core::ops::Deref for Root370Item215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item215000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item215000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item21500(
    pub Root370Item215000,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item21500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item21500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item21500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item215000 = match seq.next_element::<Root370Item215000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item21500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root370Item21501ItemItem(pub f64);
impl ::core::ops::Deref for Root370Item21501ItemItem {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item21501ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root370Item21501ItemItem: non-finite number")); }
        
        Ok(Root370Item21501ItemItem(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item2150(
    pub Root370Item21500,
    pub ::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root370Item21501ItemItem>>>>,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item2150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item2150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item2150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item21500 = match seq.next_element::<Root370Item21500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root370Item21501ItemItem>>>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root370Item21501ItemItem>>>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item2150(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item215(
    pub Root370Item2150,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item215 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item215;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item215, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item2150 = match seq.next_element::<Root370Item2150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item215(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item2160(pub i64);
impl ::core::ops::Deref for Root370Item2160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item2160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item2160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item2163Item(pub i64);
impl ::core::ops::Deref for Root370Item2163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item2163Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item2163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item21653Item(pub i64);
impl ::core::ops::Deref for Root370Item21653Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item21653Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item21653Item(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item2165(
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::vec::Vec<Root370Item21653Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item2165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item2165;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item2165, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::vec::Vec<Root370Item21653Item> = match seq.next_element::<::std::vec::Vec<Root370Item21653Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item2165(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item21680(pub i64);
impl ::core::ops::Deref for Root370Item21680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item21680 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item21680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item21681(pub i64);
impl ::core::ops::Deref for Root370Item21681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item21681 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item21681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item21682(pub i64);
impl ::core::ops::Deref for Root370Item21682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item21682 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item21682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item21683(pub i64);
impl ::core::ops::Deref for Root370Item21683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item21683 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item21683(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item2168(
    pub Root370Item21680,
    pub Root370Item21681,
    pub Root370Item21682,
    pub Root370Item21683,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item2168 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item2168;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item2168, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item21680 = match seq.next_element::<Root370Item21680>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root370Item21681 = match seq.next_element::<Root370Item21681>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root370Item21682 = match seq.next_element::<Root370Item21682>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root370Item21683 = match seq.next_element::<Root370Item21683>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item2168(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item216(
    pub Root370Item2160,
    pub Null,
    pub Null,
    pub ::core::option::Option<::std::vec::Vec<Root370Item2163Item>>,
    pub Null,
    pub Root370Item2165,
    pub Null,
    pub Null,
    pub Root370Item2168,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item216 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item216;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item216, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root370Item2160 = match seq.next_element::<Root370Item2160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: ::core::option::Option<::std::vec::Vec<Root370Item2163Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root370Item2163Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Root370Item2165 = match seq.next_element::<Root370Item2165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root370Item2168 = match seq.next_element::<Root370Item2168>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item216(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item2119(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item2119 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item2119;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item2119, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item2119(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=20 (required exactly 20)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item21(
    pub Null,
    pub Root370Item211,
    pub ::std::vec::Vec<::core::option::Option<Root370Item212Item>>,
    pub Null,
    pub Null,
    pub Root370Item215,
    pub Root370Item216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root370Item2119,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item21 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item21;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 20")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item21, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 20 elements")), };
                let a1: Root370Item211 = match seq.next_element::<Root370Item211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 20 elements")), };
                let a2: ::std::vec::Vec<::core::option::Option<Root370Item212Item>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<Root370Item212Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 20 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 20 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 20 elements")), };
                let a5: Root370Item215 = match seq.next_element::<Root370Item215>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 20 elements")), };
                let a6: Root370Item216 = match seq.next_element::<Root370Item216>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 20 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 20 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 20 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 20 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 20 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 20 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 20 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 20 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 20 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 20 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 20 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 20 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 20 elements")), };
                let a19: Root370Item2119 = match seq.next_element::<Root370Item2119>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 20 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item21(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root370Item22(pub i64);
impl ::core::ops::Deref for Root370Item22 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root370Item22 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root370Item22(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item29(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item29 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item29;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item29, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item29(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=32 (required exactly 32)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root370Item(
    pub ::std::string::String,
    pub Root370Item1,
    pub Root370Item2,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub Null,
    pub Root370Item6,
    pub Null,
    pub Root370Item8,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root370Item15,
    pub Null,
    pub ::core::option::Option<Root370Item17>,
    pub Null,
    pub Null,
    pub ::core::option::Option<::std::string::String>,
    pub Root370Item21,
    pub Root370Item22,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root370Item29,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root370Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root370Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 32")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root370Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 32 elements")), };
                let a1: Root370Item1 = match seq.next_element::<Root370Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 32 elements")), };
                let a2: Root370Item2 = match seq.next_element::<Root370Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 32 elements")), };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 32 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 32 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 32 elements")), };
                let a6: Root370Item6 = match seq.next_element::<Root370Item6>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 32 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 32 elements")), };
                let a8: Root370Item8 = match seq.next_element::<Root370Item8>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 32 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 32 elements")), };
                let a10: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 32 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 32 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 32 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 32 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 32 elements")), };
                let a15: Root370Item15 = match seq.next_element::<Root370Item15>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 32 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 32 elements")), };
                let a17: ::core::option::Option<Root370Item17> = match seq.next_element::<::core::option::Option<Root370Item17>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 32 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 32 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 32 elements")), };
                let a20: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 32 elements")), };
                let a21: Root370Item21 = match seq.next_element::<Root370Item21>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 32 elements")), };
                let a22: Root370Item22 = match seq.next_element::<Root370Item22>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 32 elements")), };
                let a23: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 32 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 32 elements")), };
                let a25: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 32 elements")), };
                let a26: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 32 elements")), };
                let a27: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 32 elements")), };
                let a28: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 32 elements")), };
                let a29: Root370Item29 = match seq.next_element::<Root370Item29>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 32 elements")), };
                let a30: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 32 elements")), };
                let a31: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 32 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root370Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root371(pub i64);
impl ::core::ops::Deref for Root371 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root371 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root371(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root378000(pub i64);
impl ::core::ops::Deref for Root378000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root378000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root378000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root378001(pub i64);
impl ::core::ops::Deref for Root378001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root378001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root378001(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root37800(
    pub Root378000,
    pub Root378001,
);

impl<'de> ::serde::Deserialize<'de> for Root37800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root37800;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root37800, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root378000 = match seq.next_element::<Root378000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root378001 = match seq.next_element::<Root378001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root37800(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root3780(
    pub Root37800,
);

impl<'de> ::serde::Deserialize<'de> for Root3780 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root3780;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root3780, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root37800 = match seq.next_element::<Root37800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root3780(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3781(pub i64);
impl ::core::ops::Deref for Root3781 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3781 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3781(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3783(pub i64);
impl ::core::ops::Deref for Root3783 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3783 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3783(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root3784(pub i64);
impl ::core::ops::Deref for Root3784 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root3784 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root3784(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root378(
    pub Root3780,
    pub Root3781,
    pub Null,
    pub Root3783,
    pub Root3784,
);

impl<'de> ::serde::Deserialize<'de> for Root378 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root378;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root378, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root3780 = match seq.next_element::<Root3780>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root3781 = match seq.next_element::<Root3781>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root3783 = match seq.next_element::<Root3783>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root3784 = match seq.next_element::<Root3784>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root378(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required first 0 slots); accepts 0..=9 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root37(
    pub ::core::option::Option<::std::vec::Vec<Root370Item>>,
    pub ::core::option::Option<Root371>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root378>,
);

impl<'de> ::serde::Deserialize<'de> for Root37 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root37;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root37, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::vec::Vec<Root370Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root370Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root371> = match seq.next_element::<::core::option::Option<Root371>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Root378> = match seq.next_element::<::core::option::Option<Root378>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root37(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root40(pub i64);
impl ::core::ops::Deref for Root40 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root40 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root40(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root46Item0(pub ::std::string::String);
impl ::core::ops::Deref for Root46Item0 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root46Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root46Item0: expected URI scheme"));
        }
        Ok(Root46Item0(s))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root46Item(
    pub Root46Item0,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root46Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root46Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root46Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root46Item0 = match seq.next_element::<Root46Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root46Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root490(pub ::std::string::String);
impl ::core::ops::Deref for Root490 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root490 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root490: expected URI scheme"));
        }
        Ok(Root490(s))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root491(
    pub Root490,
    pub ::std::string::String,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root491 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root491;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root491, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root490 = match seq.next_element::<Root490>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root491(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root57(
    pub Null,
    pub ::std::string::String,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root57 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root57;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root57, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root57(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root61(pub i64);
impl ::core::ops::Deref for Root61 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root61 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root61(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root640(pub i64);
impl ::core::ops::Deref for Root640 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root640 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root640(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root642Item3(pub i64);
impl ::core::ops::Deref for Root642Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root642Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root642Item3(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root642Item4(pub i64);
impl ::core::ops::Deref for Root642Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root642Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root642Item4(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root642Item5(pub i64);
impl ::core::ops::Deref for Root642Item5 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root642Item5 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root642Item5(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root642Item600(pub i64);
impl ::core::ops::Deref for Root642Item600 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root642Item600 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root642Item600(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root642Item60(
    pub Root642Item600,
);

impl<'de> ::serde::Deserialize<'de> for Root642Item60 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root642Item60;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root642Item60, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root642Item600 = match seq.next_element::<Root642Item600>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root642Item60(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root642Item610(pub i64);
impl ::core::ops::Deref for Root642Item610 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root642Item610 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root642Item610(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root642Item61(
    pub Root642Item610,
);

impl<'de> ::serde::Deserialize<'de> for Root642Item61 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root642Item61;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root642Item61, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root642Item610 = match seq.next_element::<Root642Item610>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root642Item61(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root642Item6(
    pub Root642Item60,
    pub Root642Item61,
);

impl<'de> ::serde::Deserialize<'de> for Root642Item6 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root642Item6;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root642Item6, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root642Item60 = match seq.next_element::<Root642Item60>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root642Item61 = match seq.next_element::<Root642Item61>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root642Item6(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root642Item(
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root642Item3,
    pub Root642Item4,
    pub Root642Item5,
    pub Root642Item6,
);

impl<'de> ::serde::Deserialize<'de> for Root642Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root642Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root642Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Root642Item3 = match seq.next_element::<Root642Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Root642Item4 = match seq.next_element::<Root642Item4>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Root642Item5 = match seq.next_element::<Root642Item5>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root642Item6 = match seq.next_element::<Root642Item6>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root642Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root645(pub i64);
impl ::core::ops::Deref for Root645 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root645 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root645(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root64(
    pub ::core::option::Option<Root640>,
    pub Null,
    pub ::core::option::Option<::std::vec::Vec<Root642Item>>,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub Root645,
);

impl<'de> ::serde::Deserialize<'de> for Root64 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root64;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root64, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root640> = match seq.next_element::<::core::option::Option<Root640>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: ::core::option::Option<::std::vec::Vec<Root642Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root642Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root645 = match seq.next_element::<Root645>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root64(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root67(pub i64);
impl ::core::ops::Deref for Root67 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root67 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root67(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72001(pub i64);
impl ::core::ops::Deref for Root72001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72001(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72002(pub i64);
impl ::core::ops::Deref for Root72002 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72002 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72002(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root720060(pub ::std::string::String);
impl ::core::ops::Deref for Root720060 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720060 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root720060: expected URI scheme"));
        }
        Ok(Root720060(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200620(pub i64);
impl ::core::ops::Deref for Root7200620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200620 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200621(pub i64);
impl ::core::ops::Deref for Root7200621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200621 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200621(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720062(
    pub Root7200620,
    pub Root7200621,
);

impl<'de> ::serde::Deserialize<'de> for Root720062 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720062;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720062, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200620 = match seq.next_element::<Root7200620>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7200621 = match seq.next_element::<Root7200621>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720062(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200630(pub i64);
impl ::core::ops::Deref for Root7200630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200630 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200631(pub i64);
impl ::core::ops::Deref for Root7200631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200631 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200631(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720063(
    pub Root7200630,
    pub Root7200631,
);

impl<'de> ::serde::Deserialize<'de> for Root720063 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720063;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720063, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200630 = match seq.next_element::<Root7200630>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7200631 = match seq.next_element::<Root7200631>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720063(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72006(
    pub Root720060,
    pub ::std::string::String,
    pub ::core::option::Option<Root720062>,
    pub Root720063,
);

impl<'de> ::serde::Deserialize<'de> for Root72006 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72006;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72006, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720060 = match seq.next_element::<Root720060>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::core::option::Option<Root720062> = match seq.next_element::<::core::option::Option<Root720062>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root720063 = match seq.next_element::<Root720063>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72006(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200800(pub i64);
impl ::core::ops::Deref for Root7200800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root7200801(pub f64);
impl ::core::ops::Deref for Root7200801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root7200801: non-finite number")); }
        
        Ok(Root7200801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root7200802(pub f64);
impl ::core::ops::Deref for Root7200802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200802 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root7200802: non-finite number")); }
        
        Ok(Root7200802(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720080(
    pub Root7200800,
    pub Root7200801,
    pub Root7200802,
);

impl<'de> ::serde::Deserialize<'de> for Root720080 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720080;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720080, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200800 = match seq.next_element::<Root7200800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root7200801 = match seq.next_element::<Root7200801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root7200802 = match seq.next_element::<Root7200802>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720080(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root7200810(pub f64);
impl ::core::ops::Deref for Root7200810 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root7200810: non-finite number")); }
        
        Ok(Root7200810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200811(pub i64);
impl ::core::ops::Deref for Root7200811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200811 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200811(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720081(
    pub Root7200810,
    pub Root7200811,
);

impl<'de> ::serde::Deserialize<'de> for Root720081 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720081;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720081, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200810 = match seq.next_element::<Root7200810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7200811 = match seq.next_element::<Root7200811>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720081(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200820(pub i64);
impl ::core::ops::Deref for Root7200820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200820 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200821(pub i64);
impl ::core::ops::Deref for Root7200821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200821 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200821(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720082(
    pub Root7200820,
    pub Root7200821,
);

impl<'de> ::serde::Deserialize<'de> for Root720082 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720082;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720082, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200820 = match seq.next_element::<Root7200820>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7200821 = match seq.next_element::<Root7200821>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720082(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720083(pub i64);
impl ::core::ops::Deref for Root720083 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720083 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720083(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72008(
    pub Root720080,
    pub Root720081,
    pub Root720082,
    pub Root720083,
);

impl<'de> ::serde::Deserialize<'de> for Root72008 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72008;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72008, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720080 = match seq.next_element::<Root720080>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root720081 = match seq.next_element::<Root720081>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root720082 = match seq.next_element::<Root720082>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root720083 = match seq.next_element::<Root720083>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72008(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72001500(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root72001500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72001500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72001500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72001500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7200150(
    pub Root72001500,
);

impl<'de> ::serde::Deserialize<'de> for Root7200150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7200150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7200150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72001500 = match seq.next_element::<Root72001500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7200150(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720015(
    pub Root7200150,
);

impl<'de> ::serde::Deserialize<'de> for Root720015 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720015;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720015, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200150 = match seq.next_element::<Root7200150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720015(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720017(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root720017 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720017;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720017, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720017(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72002110(pub i64);
impl ::core::ops::Deref for Root72002110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72002110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72002110(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7200211(
    pub Root72002110,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root7200211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7200211;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7200211, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72002110 = match seq.next_element::<Root72002110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7200211(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200212ItemAlt0Item(pub i64);
impl ::core::ops::Deref for Root7200212ItemAlt0Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200212ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200212ItemAlt0Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200212ItemAlt1(pub i64);
impl ::core::ops::Deref for Root7200212ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200212ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200212ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root7200212Item {
    V0(::std::vec::Vec<Root7200212ItemAlt0Item>),
    V1(Root7200212ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root7200212Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root7200212ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root7200212Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root7200212ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root7200212ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root7200212Item::V1(x)),
                Err(e) => errs.push((1, "Root7200212ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200215000(pub i64);
impl ::core::ops::Deref for Root7200215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200215000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200215000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720021500(
    pub Root7200215000,
);

impl<'de> ::serde::Deserialize<'de> for Root720021500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720021500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720021500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200215000 = match seq.next_element::<Root7200215000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720021500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root720021501ItemItem(pub f64);
impl ::core::ops::Deref for Root720021501ItemItem {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720021501ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root720021501ItemItem: non-finite number")); }
        
        Ok(Root720021501ItemItem(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72002150(
    pub Root720021500,
    pub ::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root720021501ItemItem>>>>,
);

impl<'de> ::serde::Deserialize<'de> for Root72002150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72002150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72002150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720021500 = match seq.next_element::<Root720021500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root720021501ItemItem>>>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root720021501ItemItem>>>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72002150(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7200215(
    pub Root72002150,
);

impl<'de> ::serde::Deserialize<'de> for Root7200215 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7200215;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7200215, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72002150 = match seq.next_element::<Root72002150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7200215(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72002160(pub i64);
impl ::core::ops::Deref for Root72002160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72002160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72002160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72002163Item(pub i64);
impl ::core::ops::Deref for Root72002163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72002163Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72002163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720021653Item(pub i64);
impl ::core::ops::Deref for Root720021653Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720021653Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720021653Item(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72002165(
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::vec::Vec<Root720021653Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root72002165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72002165;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72002165, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::vec::Vec<Root720021653Item> = match seq.next_element::<::std::vec::Vec<Root720021653Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72002165(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720021680(pub i64);
impl ::core::ops::Deref for Root720021680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720021680 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720021680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720021681(pub i64);
impl ::core::ops::Deref for Root720021681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720021681 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720021681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720021682(pub i64);
impl ::core::ops::Deref for Root720021682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720021682 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720021682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720021683(pub i64);
impl ::core::ops::Deref for Root720021683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720021683 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720021683(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72002168(
    pub Root720021680,
    pub Root720021681,
    pub Root720021682,
    pub Root720021683,
);

impl<'de> ::serde::Deserialize<'de> for Root72002168 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72002168;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72002168, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720021680 = match seq.next_element::<Root720021680>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root720021681 = match seq.next_element::<Root720021681>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root720021682 = match seq.next_element::<Root720021682>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root720021683 = match seq.next_element::<Root720021683>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72002168(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7200216(
    pub Root72002160,
    pub Null,
    pub Null,
    pub ::core::option::Option<::std::vec::Vec<Root72002163Item>>,
    pub Null,
    pub Root72002165,
    pub Null,
    pub Null,
    pub Root72002168,
);

impl<'de> ::serde::Deserialize<'de> for Root7200216 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7200216;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7200216, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72002160 = match seq.next_element::<Root72002160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: ::core::option::Option<::std::vec::Vec<Root72002163Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root72002163Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Root72002165 = match seq.next_element::<Root72002165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root72002168 = match seq.next_element::<Root72002168>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7200216(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72002119(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root72002119 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72002119;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72002119, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72002119(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=20 (required exactly 20)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720021(
    pub Null,
    pub Root7200211,
    pub ::std::vec::Vec<::core::option::Option<Root7200212Item>>,
    pub Null,
    pub Null,
    pub Root7200215,
    pub Root7200216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root72002119,
);

impl<'de> ::serde::Deserialize<'de> for Root720021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720021;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 20")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720021, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 20 elements")), };
                let a1: Root7200211 = match seq.next_element::<Root7200211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 20 elements")), };
                let a2: ::std::vec::Vec<::core::option::Option<Root7200212Item>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<Root7200212Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 20 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 20 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 20 elements")), };
                let a5: Root7200215 = match seq.next_element::<Root7200215>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 20 elements")), };
                let a6: Root7200216 = match seq.next_element::<Root7200216>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 20 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 20 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 20 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 20 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 20 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 20 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 20 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 20 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 20 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 20 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 20 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 20 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 20 elements")), };
                let a19: Root72002119 = match seq.next_element::<Root72002119>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 20 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720021(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720022(pub i64);
impl ::core::ops::Deref for Root720022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720022 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720022(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200260(pub i64);
impl ::core::ops::Deref for Root7200260 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200260 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200260(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200261Item0(pub i64);
impl ::core::ops::Deref for Root7200261Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200261Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200261Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200261Item1(pub i64);
impl ::core::ops::Deref for Root7200261Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200261Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200261Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200261Item2(pub i64);
impl ::core::ops::Deref for Root7200261Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200261Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200261Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root7200261Item3(pub ::std::string::String);
impl ::core::ops::Deref for Root7200261Item3 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200261Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root7200261Item3: expected URI scheme"));
        }
        Ok(Root7200261Item3(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7200261Item4(pub i64);
impl ::core::ops::Deref for Root7200261Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7200261Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7200261Item4(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7200261Item(
    pub ::core::option::Option<Root7200261Item0>,
    pub Root7200261Item1,
    pub Root7200261Item2,
    pub Root7200261Item3,
    pub Root7200261Item4,
);

impl<'de> ::serde::Deserialize<'de> for Root7200261Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7200261Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7200261Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root7200261Item0> = match seq.next_element::<::core::option::Option<Root7200261Item0>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root7200261Item1 = match seq.next_element::<Root7200261Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root7200261Item2 = match seq.next_element::<Root7200261Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root7200261Item3 = match seq.next_element::<Root7200261Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root7200261Item4 = match seq.next_element::<Root7200261Item4>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7200261Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720026(
    pub Root7200260,
    pub ::std::vec::Vec<Root7200261Item>,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root720026 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720026;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720026, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200260 = match seq.next_element::<Root7200260>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::vec::Vec<Root7200261Item> = match seq.next_element::<::std::vec::Vec<Root7200261Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720026(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720029(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root720029 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720029;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720029, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720029(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=32 (required exactly 32)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7200(
    pub ::std::string::String,
    pub Root72001,
    pub Root72002,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub Null,
    pub Root72006,
    pub Null,
    pub Root72008,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root720015,
    pub Null,
    pub ::core::option::Option<Root720017>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root720021,
    pub Root720022,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root720026>,
    pub Null,
    pub Null,
    pub Root720029,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root7200 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7200;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 32")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7200, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 32 elements")), };
                let a1: Root72001 = match seq.next_element::<Root72001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 32 elements")), };
                let a2: Root72002 = match seq.next_element::<Root72002>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 32 elements")), };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 32 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 32 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 32 elements")), };
                let a6: Root72006 = match seq.next_element::<Root72006>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 32 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 32 elements")), };
                let a8: Root72008 = match seq.next_element::<Root72008>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 32 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 32 elements")), };
                let a10: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 32 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 32 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 32 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 32 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 32 elements")), };
                let a15: Root720015 = match seq.next_element::<Root720015>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 32 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 32 elements")), };
                let a17: ::core::option::Option<Root720017> = match seq.next_element::<::core::option::Option<Root720017>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 32 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 32 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 32 elements")), };
                let a20: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 32 elements")), };
                let a21: Root720021 = match seq.next_element::<Root720021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 32 elements")), };
                let a22: Root720022 = match seq.next_element::<Root720022>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 32 elements")), };
                let a23: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 32 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 32 elements")), };
                let a25: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 32 elements")), };
                let a26: ::core::option::Option<Root720026> = match seq.next_element::<::core::option::Option<Root720026>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 32 elements")), };
                let a27: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 32 elements")), };
                let a28: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 32 elements")), };
                let a29: Root720029 = match seq.next_element::<Root720029>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 32 elements")), };
                let a30: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 32 elements")), };
                let a31: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 32 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7200(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72011(pub i64);
impl ::core::ops::Deref for Root72011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72012(pub i64);
impl ::core::ops::Deref for Root72012 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72012 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72012(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root720160(pub ::std::string::String);
impl ::core::ops::Deref for Root720160 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root720160: expected URI scheme"));
        }
        Ok(Root720160(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201620(pub i64);
impl ::core::ops::Deref for Root7201620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201620 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201621(pub i64);
impl ::core::ops::Deref for Root7201621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201621 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201621(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720162(
    pub Root7201620,
    pub Root7201621,
);

impl<'de> ::serde::Deserialize<'de> for Root720162 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720162;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720162, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201620 = match seq.next_element::<Root7201620>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7201621 = match seq.next_element::<Root7201621>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720162(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201630(pub i64);
impl ::core::ops::Deref for Root7201630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201630 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201631(pub i64);
impl ::core::ops::Deref for Root7201631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201631 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201631(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720163(
    pub Root7201630,
    pub Root7201631,
);

impl<'de> ::serde::Deserialize<'de> for Root720163 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720163;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720163, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201630 = match seq.next_element::<Root7201630>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7201631 = match seq.next_element::<Root7201631>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720163(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72016(
    pub Root720160,
    pub ::std::string::String,
    pub ::core::option::Option<Root720162>,
    pub Root720163,
);

impl<'de> ::serde::Deserialize<'de> for Root72016 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72016;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72016, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720160 = match seq.next_element::<Root720160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::core::option::Option<Root720162> = match seq.next_element::<::core::option::Option<Root720162>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root720163 = match seq.next_element::<Root720163>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72016(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201800(pub i64);
impl ::core::ops::Deref for Root7201800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root7201801(pub f64);
impl ::core::ops::Deref for Root7201801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root7201801: non-finite number")); }
        
        Ok(Root7201801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root7201802(pub f64);
impl ::core::ops::Deref for Root7201802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201802 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root7201802: non-finite number")); }
        
        Ok(Root7201802(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720180(
    pub Root7201800,
    pub Root7201801,
    pub Root7201802,
);

impl<'de> ::serde::Deserialize<'de> for Root720180 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720180;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720180, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201800 = match seq.next_element::<Root7201800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root7201801 = match seq.next_element::<Root7201801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root7201802 = match seq.next_element::<Root7201802>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720180(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root7201810(pub f64);
impl ::core::ops::Deref for Root7201810 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root7201810: non-finite number")); }
        
        Ok(Root7201810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201811(pub i64);
impl ::core::ops::Deref for Root7201811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201811 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201811(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720181(
    pub Root7201810,
    pub Root7201811,
);

impl<'de> ::serde::Deserialize<'de> for Root720181 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720181;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720181, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201810 = match seq.next_element::<Root7201810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7201811 = match seq.next_element::<Root7201811>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720181(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201820(pub i64);
impl ::core::ops::Deref for Root7201820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201820 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201821(pub i64);
impl ::core::ops::Deref for Root7201821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201821 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201821(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720182(
    pub Root7201820,
    pub Root7201821,
);

impl<'de> ::serde::Deserialize<'de> for Root720182 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720182;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720182, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201820 = match seq.next_element::<Root7201820>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7201821 = match seq.next_element::<Root7201821>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720182(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720183(pub i64);
impl ::core::ops::Deref for Root720183 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720183 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720183(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72018(
    pub Root720180,
    pub Root720181,
    pub Root720182,
    pub Root720183,
);

impl<'de> ::serde::Deserialize<'de> for Root72018 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72018;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72018, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720180 = match seq.next_element::<Root720180>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root720181 = match seq.next_element::<Root720181>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root720182 = match seq.next_element::<Root720182>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root720183 = match seq.next_element::<Root720183>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72018(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72011500(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root72011500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72011500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72011500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72011500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7201150(
    pub Root72011500,
);

impl<'de> ::serde::Deserialize<'de> for Root7201150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7201150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7201150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72011500 = match seq.next_element::<Root72011500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7201150(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720115(
    pub Root7201150,
);

impl<'de> ::serde::Deserialize<'de> for Root720115 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720115;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720115, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201150 = match seq.next_element::<Root7201150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720115(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720117(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root720117 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720117;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720117, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720117(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72012110(pub i64);
impl ::core::ops::Deref for Root72012110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72012110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72012110(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7201211(
    pub Root72012110,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root7201211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7201211;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7201211, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72012110 = match seq.next_element::<Root72012110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7201211(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201212ItemAlt0Item(pub i64);
impl ::core::ops::Deref for Root7201212ItemAlt0Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201212ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201212ItemAlt0Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201212ItemAlt1(pub i64);
impl ::core::ops::Deref for Root7201212ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201212ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201212ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root7201212Item {
    V0(::std::vec::Vec<Root7201212ItemAlt0Item>),
    V1(Root7201212ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root7201212Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root7201212ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root7201212Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root7201212ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root7201212ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root7201212Item::V1(x)),
                Err(e) => errs.push((1, "Root7201212ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201215000(pub i64);
impl ::core::ops::Deref for Root7201215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201215000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201215000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720121500(
    pub Root7201215000,
);

impl<'de> ::serde::Deserialize<'de> for Root720121500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720121500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720121500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201215000 = match seq.next_element::<Root7201215000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720121500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root720121501ItemItem(pub f64);
impl ::core::ops::Deref for Root720121501ItemItem {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720121501ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root720121501ItemItem: non-finite number")); }
        
        Ok(Root720121501ItemItem(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72012150(
    pub Root720121500,
    pub ::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root720121501ItemItem>>>>,
);

impl<'de> ::serde::Deserialize<'de> for Root72012150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72012150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72012150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720121500 = match seq.next_element::<Root720121500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root720121501ItemItem>>>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::core::option::Option<Root720121501ItemItem>>>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72012150(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7201215(
    pub Root72012150,
);

impl<'de> ::serde::Deserialize<'de> for Root7201215 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7201215;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7201215, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72012150 = match seq.next_element::<Root72012150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7201215(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72012160(pub i64);
impl ::core::ops::Deref for Root72012160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72012160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72012160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root72012163Item(pub i64);
impl ::core::ops::Deref for Root72012163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root72012163Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root72012163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720121653Item(pub i64);
impl ::core::ops::Deref for Root720121653Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720121653Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720121653Item(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72012165(
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::vec::Vec<Root720121653Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root72012165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72012165;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72012165, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::vec::Vec<Root720121653Item> = match seq.next_element::<::std::vec::Vec<Root720121653Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72012165(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720121680(pub i64);
impl ::core::ops::Deref for Root720121680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720121680 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720121680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720121681(pub i64);
impl ::core::ops::Deref for Root720121681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720121681 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720121681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720121682(pub i64);
impl ::core::ops::Deref for Root720121682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720121682 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720121682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720121683(pub i64);
impl ::core::ops::Deref for Root720121683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720121683 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720121683(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72012168(
    pub Root720121680,
    pub Root720121681,
    pub Root720121682,
    pub Root720121683,
);

impl<'de> ::serde::Deserialize<'de> for Root72012168 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72012168;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72012168, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720121680 = match seq.next_element::<Root720121680>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root720121681 = match seq.next_element::<Root720121681>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root720121682 = match seq.next_element::<Root720121682>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root720121683 = match seq.next_element::<Root720121683>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72012168(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7201216(
    pub Root72012160,
    pub Null,
    pub Null,
    pub ::core::option::Option<::std::vec::Vec<Root72012163Item>>,
    pub Null,
    pub Root72012165,
    pub Null,
    pub Null,
    pub Root72012168,
);

impl<'de> ::serde::Deserialize<'de> for Root7201216 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7201216;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7201216, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root72012160 = match seq.next_element::<Root72012160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: ::core::option::Option<::std::vec::Vec<Root72012163Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root72012163Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Root72012165 = match seq.next_element::<Root72012165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root72012168 = match seq.next_element::<Root72012168>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7201216(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72012119(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root72012119 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72012119;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72012119, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72012119(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=20 (required exactly 20)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720121(
    pub Null,
    pub Root7201211,
    pub ::std::vec::Vec<::core::option::Option<Root7201212Item>>,
    pub Null,
    pub Null,
    pub Root7201215,
    pub Root7201216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root72012119,
);

impl<'de> ::serde::Deserialize<'de> for Root720121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720121;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 20")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720121, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 20 elements")), };
                let a1: Root7201211 = match seq.next_element::<Root7201211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 20 elements")), };
                let a2: ::std::vec::Vec<::core::option::Option<Root7201212Item>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<Root7201212Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 20 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 20 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 20 elements")), };
                let a5: Root7201215 = match seq.next_element::<Root7201215>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 20 elements")), };
                let a6: Root7201216 = match seq.next_element::<Root7201216>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 20 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 20 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 20 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 20 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 20 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 20 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 20 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 20 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 20 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 20 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 20 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 20 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 20 elements")), };
                let a19: Root72012119 = match seq.next_element::<Root72012119>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 20 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720121(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root720122(pub i64);
impl ::core::ops::Deref for Root720122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root720122 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root720122(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201260(pub i64);
impl ::core::ops::Deref for Root7201260 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201260 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201260(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201261Item0(pub i64);
impl ::core::ops::Deref for Root7201261Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201261Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201261Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201261Item1(pub i64);
impl ::core::ops::Deref for Root7201261Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201261Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201261Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201261Item2(pub i64);
impl ::core::ops::Deref for Root7201261Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201261Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201261Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root7201261Item3(pub ::std::string::String);
impl ::core::ops::Deref for Root7201261Item3 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201261Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root7201261Item3: expected URI scheme"));
        }
        Ok(Root7201261Item3(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root7201261Item4(pub i64);
impl ::core::ops::Deref for Root7201261Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root7201261Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root7201261Item4(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7201261Item(
    pub ::core::option::Option<Root7201261Item0>,
    pub Root7201261Item1,
    pub Root7201261Item2,
    pub Root7201261Item3,
    pub Root7201261Item4,
);

impl<'de> ::serde::Deserialize<'de> for Root7201261Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7201261Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7201261Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root7201261Item0> = match seq.next_element::<::core::option::Option<Root7201261Item0>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root7201261Item1 = match seq.next_element::<Root7201261Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root7201261Item2 = match seq.next_element::<Root7201261Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root7201261Item3 = match seq.next_element::<Root7201261Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root7201261Item4 = match seq.next_element::<Root7201261Item4>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7201261Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720126(
    pub Root7201260,
    pub ::std::vec::Vec<Root7201261Item>,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root720126 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720126;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720126, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7201260 = match seq.next_element::<Root7201260>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::vec::Vec<Root7201261Item> = match seq.next_element::<::std::vec::Vec<Root7201261Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720126(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720129(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root720129 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720129;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720129, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720129(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=32 (required exactly 32)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root7201(
    pub ::std::string::String,
    pub Root72011,
    pub Root72012,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub Null,
    pub Root72016,
    pub Null,
    pub Root72018,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root720115,
    pub Null,
    pub ::core::option::Option<Root720117>,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root720121,
    pub Root720122,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root720126>,
    pub Null,
    pub Null,
    pub Root720129,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root7201 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root7201;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 32")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root7201, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 32 elements")), };
                let a1: Root72011 = match seq.next_element::<Root72011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 32 elements")), };
                let a2: Root72012 = match seq.next_element::<Root72012>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 32 elements")), };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 32 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 32 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 32 elements")), };
                let a6: Root72016 = match seq.next_element::<Root72016>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 32 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 32 elements")), };
                let a8: Root72018 = match seq.next_element::<Root72018>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 32 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 32 elements")), };
                let a10: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 32 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 32 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 32 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 32 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 32 elements")), };
                let a15: Root720115 = match seq.next_element::<Root720115>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 32 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 32 elements")), };
                let a17: ::core::option::Option<Root720117> = match seq.next_element::<::core::option::Option<Root720117>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 32 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 32 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 32 elements")), };
                let a20: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 32 elements")), };
                let a21: Root720121 = match seq.next_element::<Root720121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 32 elements")), };
                let a22: Root720122 = match seq.next_element::<Root720122>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 32 elements")), };
                let a23: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 32 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 32 elements")), };
                let a25: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 32 elements")), };
                let a26: ::core::option::Option<Root720126> = match seq.next_element::<::core::option::Option<Root720126>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 32 elements")), };
                let a27: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 32 elements")), };
                let a28: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 32 elements")), };
                let a29: Root720129 = match seq.next_element::<Root720129>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 32 elements")), };
                let a30: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 32 elements")), };
                let a31: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 32 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root7201(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root720(
    pub Root7200,
    pub Root7201,
);

impl<'de> ::serde::Deserialize<'de> for Root720 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root720;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root720, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root7200 = match seq.next_element::<Root7200>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root7201 = match seq.next_element::<Root7201>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root720(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root72(
    pub Root720,
);

impl<'de> ::serde::Deserialize<'de> for Root72 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root72;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root72, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root720 = match seq.next_element::<Root720>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root72(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item0(pub i64);
impl ::core::ops::Deref for Root750Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item2ItemItemAlt0ItemAlt0ItemAlt0ItemAlt0(pub i64);
impl ::core::ops::Deref for Root750Item2ItemItemAlt0ItemAlt0ItemAlt0ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item2ItemItemAlt0ItemAlt0ItemAlt0ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item2ItemItemAlt0ItemAlt0ItemAlt0ItemAlt0(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root750Item2ItemItemAlt0ItemAlt0ItemAlt0Item {
    V0(Root750Item2ItemItemAlt0ItemAlt0ItemAlt0ItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root750Item2ItemItemAlt0ItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root750Item2ItemItemAlt0ItemAlt0ItemAlt0ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItemAlt0ItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "Root750Item2ItemItemAlt0ItemAlt0ItemAlt0ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItemAlt0ItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root750Item2ItemItemAlt0ItemAlt0Item {
    V0(::std::vec::Vec<::core::option::Option<Root750Item2ItemItemAlt0ItemAlt0ItemAlt0Item>>),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root750Item2ItemItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root750Item2ItemItemAlt0ItemAlt0ItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root750Item2ItemItemAlt0ItemAlt0ItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item2ItemItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root750Item2ItemItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item2ItemItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item2ItemItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root750Item2ItemItemAlt0Item {
    V0(::std::vec::Vec<Root750Item2ItemItemAlt0ItemAlt0Item>),
    V1(Root750Item2ItemItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root750Item2ItemItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root750Item2ItemItemAlt0ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root750Item2ItemItemAlt0ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root750Item2ItemItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root750Item2ItemItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item2ItemItemAlt1(pub i64);
impl ::core::ops::Deref for Root750Item2ItemItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item2ItemItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item2ItemItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root750Item2ItemItem {
    V0(::std::vec::Vec<::core::option::Option<Root750Item2ItemItemAlt0Item>>),
    V1(Root750Item2ItemItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root750Item2ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root750Item2ItemItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItem::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root750Item2ItemItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root750Item2ItemItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root750Item2ItemItem::V1(x)),
                Err(e) => errs.push((1, "Root750Item2ItemItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item4(pub i64);
impl ::core::ops::Deref for Root750Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item4(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item512ItemAlt00(pub ::std::string::String);
impl ::core::ops::Deref for Root750Item512ItemAlt00 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item512ItemAlt00 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root750Item512ItemAlt00: expected URI scheme"));
        }
        Ok(Root750Item512ItemAlt00(s))
    }
}
/// tuple len=5 (required first 0 slots); accepts 0..=5 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item512ItemAlt0(
    pub ::core::option::Option<Root750Item512ItemAlt00>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item512ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item512ItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item512ItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root750Item512ItemAlt00> = match seq.next_element::<::core::option::Option<Root750Item512ItemAlt00>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root750Item512ItemAlt0(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item512ItemAlt1(pub ::std::string::String);
impl ::core::ops::Deref for Root750Item512ItemAlt1 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item512ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root750Item512ItemAlt1: expected URI scheme"));
        }
        Ok(Root750Item512ItemAlt1(s))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root750Item512Item {
    V0(Root750Item512ItemAlt0),
    V1(Root750Item512ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root750Item512Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root750Item512ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root750Item512Item::V0(x)),
                Err(e) => errs.push((0, "Root750Item512ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root750Item512ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root750Item512Item::V1(x)),
                Err(e) => errs.push((1, "Root750Item512ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item51(
    pub Null,
    pub Null,
    pub ::std::vec::Vec<Root750Item512Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item51 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item51;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item51, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::vec::Vec<Root750Item512Item> = match seq.next_element::<::std::vec::Vec<Root750Item512Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item51(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item52(pub i64);
impl ::core::ops::Deref for Root750Item52 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item52 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item52(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item53(pub i64);
impl ::core::ops::Deref for Root750Item53 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item53 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item53(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item54(pub i64);
impl ::core::ops::Deref for Root750Item54 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item54 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item54(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item51111Item0(pub i64);
impl ::core::ops::Deref for Root750Item51111Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item51111Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item51111Item0(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item51111Item(
    pub Root750Item51111Item0,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item51111Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item51111Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item51111Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root750Item51111Item0 = match seq.next_element::<Root750Item51111Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item51111Item(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item51115(pub i64);
impl ::core::ops::Deref for Root750Item51115 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item51115 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item51115(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item51117(pub i64);
impl ::core::ops::Deref for Root750Item51117 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item51117 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item51117(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item5111(
    pub Null,
    pub ::std::vec::Vec<Root750Item51111Item>,
    pub Null,
    pub Null,
    pub Null,
    pub Root750Item51115,
    pub Null,
    pub Root750Item51117,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item5111 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item5111;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item5111, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: ::std::vec::Vec<Root750Item51111Item> = match seq.next_element::<::std::vec::Vec<Root750Item51111Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: Root750Item51115 = match seq.next_element::<Root750Item51115>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: Root750Item51117 = match seq.next_element::<Root750Item51117>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item5111(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item5114(pub i64);
impl ::core::ops::Deref for Root750Item5114 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item5114 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item5114(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item511(
    pub Null,
    pub Root750Item5111,
    pub Null,
    pub Null,
    pub Root750Item5114,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item511 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item511;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item511, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root750Item5111 = match seq.next_element::<Root750Item5111>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root750Item5114 = match seq.next_element::<Root750Item5114>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item511(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item512(pub i64);
impl ::core::ops::Deref for Root750Item512 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item512 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item512(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item521(pub i64);
impl ::core::ops::Deref for Root750Item521 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item521 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item521(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item523Item(pub i64);
impl ::core::ops::Deref for Root750Item523Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item523Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item523Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item52420(pub ::std::string::String);
impl ::core::ops::Deref for Root750Item52420 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item52420 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root750Item52420: expected URI scheme"));
        }
        Ok(Root750Item52420(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item524220(pub i64);
impl ::core::ops::Deref for Root750Item524220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item524220 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item524220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item524221(pub i64);
impl ::core::ops::Deref for Root750Item524221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item524221 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item524221(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item52422(
    pub Root750Item524220,
    pub Root750Item524221,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item52422 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item52422;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item52422, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root750Item524220 = match seq.next_element::<Root750Item524220>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root750Item524221 = match seq.next_element::<Root750Item524221>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item52422(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item5242(
    pub Root750Item52420,
    pub ::std::string::String,
    pub Root750Item52422,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item5242 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item5242;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item5242, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root750Item52420 = match seq.next_element::<Root750Item52420>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root750Item52422 = match seq.next_element::<Root750Item52422>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item5242(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item5243(pub i64);
impl ::core::ops::Deref for Root750Item5243 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item5243 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item5243(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item524(
    pub ::std::string::String,
    pub Null,
    pub Root750Item5242,
    pub Root750Item5243,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item524 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item524;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item524, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root750Item5242 = match seq.next_element::<Root750Item5242>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root750Item5243 = match seq.next_element::<Root750Item5243>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item524(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item5260(pub i64);
impl ::core::ops::Deref for Root750Item5260 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item5260 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item5260(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item526(
    pub Root750Item5260,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item526 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item526;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item526, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root750Item5260 = match seq.next_element::<Root750Item5260>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root750Item526(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=27 (required first 0 slots); accepts 0..=27 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item5(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root750Item51>,
    pub ::core::option::Option<Root750Item52>,
    pub ::core::option::Option<Root750Item53>,
    pub ::core::option::Option<Root750Item54>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root750Item511>,
    pub ::core::option::Option<Root750Item512>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root750Item521>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<Root750Item523Item>>>,
    pub ::core::option::Option<Root750Item524>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root750Item526>,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item5 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item5;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=27")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item5, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root750Item51> = match seq.next_element::<::core::option::Option<Root750Item51>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Root750Item52> = match seq.next_element::<::core::option::Option<Root750Item52>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root750Item53> = match seq.next_element::<::core::option::Option<Root750Item53>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root750Item54> = match seq.next_element::<::core::option::Option<Root750Item54>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Root750Item511> = match seq.next_element::<::core::option::Option<Root750Item511>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<Root750Item512> = match seq.next_element::<::core::option::Option<Root750Item512>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a13: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a14: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a15: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a16: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a17: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a18: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a19: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a20: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a21: ::core::option::Option<Root750Item521> = match seq.next_element::<::core::option::Option<Root750Item521>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a22: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a23: ::core::option::Option<::std::vec::Vec<::core::option::Option<Root750Item523Item>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<Root750Item523Item>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a24: ::core::option::Option<Root750Item524> = match seq.next_element::<::core::option::Option<Root750Item524>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a25: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a26: ::core::option::Option<Root750Item526> = match seq.next_element::<::core::option::Option<Root750Item526>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root750Item5(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item6(pub i64);
impl ::core::ops::Deref for Root750Item6 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item6 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item6(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root750Item8(pub i64);
impl ::core::ops::Deref for Root750Item8 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root750Item8 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root750Item8(x))
    }
}
/// tuple len=9 (required first 0 slots); accepts 0..=9 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root750Item(
    pub ::core::option::Option<Root750Item0>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<::std::vec::Vec<Root750Item2ItemItem>>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root750Item4>,
    pub ::core::option::Option<Root750Item5>,
    pub ::core::option::Option<Root750Item6>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root750Item8>,
);

impl<'de> ::serde::Deserialize<'de> for Root750Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root750Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root750Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<Root750Item0> = match seq.next_element::<::core::option::Option<Root750Item0>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<::std::vec::Vec<::std::vec::Vec<Root750Item2ItemItem>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::std::vec::Vec<Root750Item2ItemItem>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root750Item4> = match seq.next_element::<::core::option::Option<Root750Item4>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Root750Item5> = match seq.next_element::<::core::option::Option<Root750Item5>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Root750Item6> = match seq.next_element::<::core::option::Option<Root750Item6>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Root750Item8> = match seq.next_element::<::core::option::Option<Root750Item8>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root750Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root75(
    pub ::std::vec::Vec<Root750Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root75 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root75;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root75, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root750Item> = match seq.next_element::<::std::vec::Vec<Root750Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root75(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root76Item2(pub i64);
impl ::core::ops::Deref for Root76Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root76Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root76Item2(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root76Item(
    pub ::std::string::String,
    pub ::core::option::Option<::std::string::String>,
    pub Root76Item2,
);

impl<'de> ::serde::Deserialize<'de> for Root76Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root76Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root76Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root76Item2 = match seq.next_element::<Root76Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root76Item(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root82(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root82 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root82;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root82, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root82(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root86ItemAlt0Item1(pub i64);
impl ::core::ops::Deref for Root86ItemAlt0Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root86ItemAlt0Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root86ItemAlt0Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root86ItemAlt0Item2(pub i64);
impl ::core::ops::Deref for Root86ItemAlt0Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root86ItemAlt0Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root86ItemAlt0Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root86ItemAlt0Item4(pub i64);
impl ::core::ops::Deref for Root86ItemAlt0Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root86ItemAlt0Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root86ItemAlt0Item4(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root86ItemAlt0Item6(pub f64);
impl ::core::ops::Deref for Root86ItemAlt0Item6 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root86ItemAlt0Item6 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root86ItemAlt0Item6: non-finite number")); }
        
        Ok(Root86ItemAlt0Item6(x))
    }
}
/// tuple len=8 (required exactly 8)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root86ItemAlt0Item(
    pub ::std::string::String,
    pub Root86ItemAlt0Item1,
    pub Root86ItemAlt0Item2,
    pub ::std::string::String,
    pub Root86ItemAlt0Item4,
    pub ::std::string::String,
    pub Root86ItemAlt0Item6,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root86ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root86ItemAlt0Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 8")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root86ItemAlt0Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 8 elements")), };
                let a1: Root86ItemAlt0Item1 = match seq.next_element::<Root86ItemAlt0Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 8 elements")), };
                let a2: Root86ItemAlt0Item2 = match seq.next_element::<Root86ItemAlt0Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 8 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 8 elements")), };
                let a4: Root86ItemAlt0Item4 = match seq.next_element::<Root86ItemAlt0Item4>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 8 elements")), };
                let a5: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 8 elements")), };
                let a6: Root86ItemAlt0Item6 = match seq.next_element::<Root86ItemAlt0Item6>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 8 elements")), };
                let a7: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 8 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root86ItemAlt0Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root86ItemAlt1(pub i64);
impl ::core::ops::Deref for Root86ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root86ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root86ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root86Item {
    V0(::std::vec::Vec<Root86ItemAlt0Item>),
    V1(Root86ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root86Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root86ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root86Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root86ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root86ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root86Item::V1(x)),
                Err(e) => errs.push((1, "Root86ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8822(pub i64);
impl ::core::ops::Deref for Root8822 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8822 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8822(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8823(pub i64);
impl ::core::ops::Deref for Root8823 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8823 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8823(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8824(pub i64);
impl ::core::ops::Deref for Root8824 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8824 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8824(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8825(pub i64);
impl ::core::ops::Deref for Root8825 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8825 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8825(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root882(
    pub ::std::string::String,
    pub ::std::string::String,
    pub Root8822,
    pub Root8823,
    pub Root8824,
    pub Root8825,
);

impl<'de> ::serde::Deserialize<'de> for Root882 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root882;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root882, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root8822 = match seq.next_element::<Root8822>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Root8823 = match seq.next_element::<Root8823>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root8824 = match seq.next_element::<Root8824>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root8825 = match seq.next_element::<Root8825>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root882(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8842(pub i64);
impl ::core::ops::Deref for Root8842 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8842 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8842(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8843(pub i64);
impl ::core::ops::Deref for Root8843 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8843 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8843(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8844(pub i64);
impl ::core::ops::Deref for Root8844 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8844 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8844(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root8845(pub i64);
impl ::core::ops::Deref for Root8845 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root8845 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root8845(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root884(
    pub Null,
    pub Null,
    pub Root8842,
    pub Root8843,
    pub Root8844,
    pub Root8845,
);

impl<'de> ::serde::Deserialize<'de> for Root884 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root884;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root884, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root8842 = match seq.next_element::<Root8842>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Root8843 = match seq.next_element::<Root8843>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root8844 = match seq.next_element::<Root8844>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root8845 = match seq.next_element::<Root8845>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root884(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root88(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root882>,
    pub ::std::string::String,
    pub Root884,
);

impl<'de> ::serde::Deserialize<'de> for Root88 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root88;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root88, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: ::core::option::Option<Root882> = match seq.next_element::<::core::option::Option<Root882>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root884 = match seq.next_element::<Root884>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root88(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item(
    pub ::std::string::String,
    pub Null,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt020(pub i64);
impl ::core::ops::Deref for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt020 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt020(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02(
    pub Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt020,
);

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt020 = match seq.next_element::<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt020>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0(
    pub ::std::vec::Vec<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item>,
    pub Null,
    pub Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02,
);

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02 = match seq.next_element::<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt02>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item {
    V0(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0),
    V1(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item {
    V0(::std::vec::Vec<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>),
    V1(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item {
    V0(::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>>),
    V1(Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root100ItemItemItemAlt0ItemAlt0ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root100ItemItemItemAlt0ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100ItemItemItemAlt0ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root100ItemItemItemAlt0ItemAlt0Item {
    V0(::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item>>),
    V1(Root100ItemItemItemAlt0ItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0ItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root100ItemItemItemAlt0ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root100ItemItemItemAlt0ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0ItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root100ItemItemItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root100ItemItemItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100ItemItemItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root100ItemItemItemAlt0Item {
    V0(::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0Item>>),
    V1(Root100ItemItemItemAlt0ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root100ItemItemItemAlt0ItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root100ItemItemItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root100ItemItemItemAlt0ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root100ItemItemItemAlt1(pub i64);
impl ::core::ops::Deref for Root100ItemItemItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root100ItemItemItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root100ItemItemItem {
    V0(::std::vec::Vec<Root100ItemItemItemAlt0Item>),
    V1(Root100ItemItemItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root100ItemItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root100ItemItemItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItem::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root100ItemItemItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root100ItemItemItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItem::V1(x)),
                Err(e) => errs.push((1, "Root100ItemItemItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root100ItemItemItem::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root10500000(pub i64);
impl ::core::ops::Deref for Root10500000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root10500000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root10500000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1050000(
    pub Root10500000,
);

impl<'de> ::serde::Deserialize<'de> for Root1050000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1050000;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1050000, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root10500000 = match seq.next_element::<Root10500000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1050000(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105000(
    pub Root1050000,
);

impl<'de> ::serde::Deserialize<'de> for Root105000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105000;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105000, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1050000 = match seq.next_element::<Root1050000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105000(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root10500(
    pub Root105000,
);

impl<'de> ::serde::Deserialize<'de> for Root10500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root10500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root10500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105000 = match seq.next_element::<Root105000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root10500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item1(pub i64);
impl ::core::ops::Deref for Root105010Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item2(pub i64);
impl ::core::ops::Deref for Root105010Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item60(pub ::std::string::String);
impl ::core::ops::Deref for Root105010Item60 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item60 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105010Item60: expected URI scheme"));
        }
        Ok(Root105010Item60(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item620(pub i64);
impl ::core::ops::Deref for Root105010Item620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item620 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item621(pub i64);
impl ::core::ops::Deref for Root105010Item621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item621 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item621(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item62(
    pub Root105010Item620,
    pub Root105010Item621,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item62 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item62;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item62, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item620 = match seq.next_element::<Root105010Item620>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105010Item621 = match seq.next_element::<Root105010Item621>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item62(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item630(pub i64);
impl ::core::ops::Deref for Root105010Item630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item630 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item631(pub i64);
impl ::core::ops::Deref for Root105010Item631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item631 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item631(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item63(
    pub Root105010Item630,
    pub Root105010Item631,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item63 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item63;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item63, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item630 = match seq.next_element::<Root105010Item630>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105010Item631 = match seq.next_element::<Root105010Item631>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item63(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item6(
    pub Root105010Item60,
    pub ::std::string::String,
    pub Root105010Item62,
    pub Root105010Item63,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item6 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item6;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item6, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item60 = match seq.next_element::<Root105010Item60>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105010Item62 = match seq.next_element::<Root105010Item62>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105010Item63 = match seq.next_element::<Root105010Item63>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item6(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item800(pub i64);
impl ::core::ops::Deref for Root105010Item800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105010Item801(pub f64);
impl ::core::ops::Deref for Root105010Item801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105010Item801: non-finite number")); }
        
        Ok(Root105010Item801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105010Item802(pub f64);
impl ::core::ops::Deref for Root105010Item802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item802 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105010Item802: non-finite number")); }
        
        Ok(Root105010Item802(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item80(
    pub Root105010Item800,
    pub Root105010Item801,
    pub Root105010Item802,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item80 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item80;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item80, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item800 = match seq.next_element::<Root105010Item800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root105010Item801 = match seq.next_element::<Root105010Item801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root105010Item802 = match seq.next_element::<Root105010Item802>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item80(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item810(pub i64);
impl ::core::ops::Deref for Root105010Item810 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item811(pub i64);
impl ::core::ops::Deref for Root105010Item811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item811 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item811(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item81(
    pub Root105010Item810,
    pub Root105010Item811,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item81 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item81;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item81, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item810 = match seq.next_element::<Root105010Item810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105010Item811 = match seq.next_element::<Root105010Item811>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item81(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item820(pub i64);
impl ::core::ops::Deref for Root105010Item820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item820 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item821(pub i64);
impl ::core::ops::Deref for Root105010Item821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item821 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item821(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item82(
    pub Root105010Item820,
    pub Root105010Item821,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item82 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item82;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item82, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item820 = match seq.next_element::<Root105010Item820>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105010Item821 = match seq.next_element::<Root105010Item821>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item82(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item83(pub i64);
impl ::core::ops::Deref for Root105010Item83 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item83 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item83(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item8(
    pub Root105010Item80,
    pub Root105010Item81,
    pub Root105010Item82,
    pub Root105010Item83,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item8 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item8;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item8, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item80 = match seq.next_element::<Root105010Item80>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root105010Item81 = match seq.next_element::<Root105010Item81>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105010Item82 = match seq.next_element::<Root105010Item82>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105010Item83 = match seq.next_element::<Root105010Item83>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item8(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item2110(pub i64);
impl ::core::ops::Deref for Root105010Item2110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item2110(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item211(
    pub Root105010Item2110,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item211;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item211, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item2110 = match seq.next_element::<Root105010Item2110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item211(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item2120(pub i64);
impl ::core::ops::Deref for Root105010Item2120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item2120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item2121(pub i64);
impl ::core::ops::Deref for Root105010Item2121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item2121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item21220(pub i64);
impl ::core::ops::Deref for Root105010Item21220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item21220 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item21220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item21221(pub i64);
impl ::core::ops::Deref for Root105010Item21221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item21221 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item21221(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2122(
    pub Root105010Item21220,
    pub Root105010Item21221,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2122 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2122;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2122, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item21220 = match seq.next_element::<Root105010Item21220>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105010Item21221 = match seq.next_element::<Root105010Item21221>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2122(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item212(
    pub Root105010Item2120,
    pub Root105010Item2121,
    pub Root105010Item2122,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item212 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item212;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item212, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item2120 = match seq.next_element::<Root105010Item2120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root105010Item2121 = match seq.next_element::<Root105010Item2121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root105010Item2122 = match seq.next_element::<Root105010Item2122>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item212(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item214000(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item214000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item214000;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item214000, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item214000(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item21400(
    pub Root105010Item214000,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item21400 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item21400;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item21400, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item214000 = match seq.next_element::<Root105010Item214000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item21400(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2140(
    pub Root105010Item21400,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2140 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2140;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2140, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item21400 = match seq.next_element::<Root105010Item21400>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2140(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item214(
    pub Root105010Item2140,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item214 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item214;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item214, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item2140 = match seq.next_element::<Root105010Item2140>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item214(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item215000(pub i64);
impl ::core::ops::Deref for Root105010Item215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item215000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item215000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item21500(
    pub Root105010Item215000,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item21500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item21500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item21500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item215000 = match seq.next_element::<Root105010Item215000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item21500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105010Item2150102(pub f64);
impl ::core::ops::Deref for Root105010Item2150102 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2150102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105010Item2150102: non-finite number")); }
        
        Ok(Root105010Item2150102(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105010Item2150103(pub f64);
impl ::core::ops::Deref for Root105010Item2150103 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2150103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105010Item2150103: non-finite number")); }
        
        Ok(Root105010Item2150103(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item215010(
    pub Null,
    pub Null,
    pub Root105010Item2150102,
    pub Root105010Item2150103,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item215010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item215010;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item215010, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105010Item2150102 = match seq.next_element::<Root105010Item2150102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105010Item2150103 = match seq.next_element::<Root105010Item2150103>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item215010(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item21501(
    pub Root105010Item215010,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item21501 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item21501;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item21501, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item215010 = match seq.next_element::<Root105010Item215010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item21501(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2150(
    pub Root105010Item21500,
    pub Root105010Item21501,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item21500 = match seq.next_element::<Root105010Item21500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105010Item21501 = match seq.next_element::<Root105010Item21501>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2150(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item215(
    pub Root105010Item2150,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item215 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item215;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item215, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item2150 = match seq.next_element::<Root105010Item2150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item215(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item2160(pub i64);
impl ::core::ops::Deref for Root105010Item2160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item2160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item2163Item(pub i64);
impl ::core::ops::Deref for Root105010Item2163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item2163Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item2163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item216530(pub i64);
impl ::core::ops::Deref for Root105010Item216530 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item216530 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item216530(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item216531(pub i64);
impl ::core::ops::Deref for Root105010Item216531 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item216531 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item216531(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item216532(pub i64);
impl ::core::ops::Deref for Root105010Item216532 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item216532 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item216532(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item216533(pub i64);
impl ::core::ops::Deref for Root105010Item216533 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item216533 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item216533(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item216534(pub i64);
impl ::core::ops::Deref for Root105010Item216534 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item216534 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item216534(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item21653(
    pub Root105010Item216530,
    pub Root105010Item216531,
    pub Root105010Item216532,
    pub Root105010Item216533,
    pub Root105010Item216534,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item21653 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item21653;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item21653, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item216530 = match seq.next_element::<Root105010Item216530>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105010Item216531 = match seq.next_element::<Root105010Item216531>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105010Item216532 = match seq.next_element::<Root105010Item216532>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105010Item216533 = match seq.next_element::<Root105010Item216533>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105010Item216534 = match seq.next_element::<Root105010Item216534>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item21653(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2165(
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root105010Item21653,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2165;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2165, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105010Item21653 = match seq.next_element::<Root105010Item21653>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2165(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item21680(pub i64);
impl ::core::ops::Deref for Root105010Item21680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item21680 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item21680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item21681(pub i64);
impl ::core::ops::Deref for Root105010Item21681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item21681 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item21681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item21682(pub i64);
impl ::core::ops::Deref for Root105010Item21682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item21682 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item21682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item21683(pub i64);
impl ::core::ops::Deref for Root105010Item21683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item21683 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item21683(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2168(
    pub Root105010Item21680,
    pub Root105010Item21681,
    pub Root105010Item21682,
    pub Root105010Item21683,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2168 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2168;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2168, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item21680 = match seq.next_element::<Root105010Item21680>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root105010Item21681 = match seq.next_element::<Root105010Item21681>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105010Item21682 = match seq.next_element::<Root105010Item21682>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105010Item21683 = match seq.next_element::<Root105010Item21683>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2168(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item216(
    pub Root105010Item2160,
    pub Null,
    pub Null,
    pub ::core::option::Option<::std::vec::Vec<Root105010Item2163Item>>,
    pub Null,
    pub Root105010Item2165,
    pub Null,
    pub Null,
    pub Root105010Item2168,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item216 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item216;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item216, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item2160 = match seq.next_element::<Root105010Item2160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: ::core::option::Option<::std::vec::Vec<Root105010Item2163Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root105010Item2163Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Root105010Item2165 = match seq.next_element::<Root105010Item2165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root105010Item2168 = match seq.next_element::<Root105010Item2168>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item216(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2119(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2119 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2119;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2119, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2119(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=20 (required exactly 20)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item21(
    pub Null,
    pub Root105010Item211,
    pub Root105010Item212,
    pub Null,
    pub Root105010Item214,
    pub Root105010Item215,
    pub Root105010Item216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105010Item2119,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item21 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item21;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 20")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item21, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 20 elements")), };
                let a1: Root105010Item211 = match seq.next_element::<Root105010Item211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 20 elements")), };
                let a2: Root105010Item212 = match seq.next_element::<Root105010Item212>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 20 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 20 elements")), };
                let a4: Root105010Item214 = match seq.next_element::<Root105010Item214>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 20 elements")), };
                let a5: Root105010Item215 = match seq.next_element::<Root105010Item215>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 20 elements")), };
                let a6: Root105010Item216 = match seq.next_element::<Root105010Item216>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 20 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 20 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 20 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 20 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 20 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 20 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 20 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 20 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 20 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 20 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 20 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 20 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 20 elements")), };
                let a19: Root105010Item2119 = match seq.next_element::<Root105010Item2119>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 20 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item21(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item22(pub i64);
impl ::core::ops::Deref for Root105010Item22 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item22 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item22(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item260(pub i64);
impl ::core::ops::Deref for Root105010Item260 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item260 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item260(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26100(pub i64);
impl ::core::ops::Deref for Root105010Item26100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26101(pub i64);
impl ::core::ops::Deref for Root105010Item26101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26102(pub i64);
impl ::core::ops::Deref for Root105010Item26102 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26102(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26103(pub ::std::string::String);
impl ::core::ops::Deref for Root105010Item26103 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105010Item26103: expected URI scheme"));
        }
        Ok(Root105010Item26103(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26104(pub i64);
impl ::core::ops::Deref for Root105010Item26104 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26104 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26104(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2610(
    pub Root105010Item26100,
    pub Root105010Item26101,
    pub Root105010Item26102,
    pub Root105010Item26103,
    pub Root105010Item26104,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2610 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2610;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2610, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item26100 = match seq.next_element::<Root105010Item26100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105010Item26101 = match seq.next_element::<Root105010Item26101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105010Item26102 = match seq.next_element::<Root105010Item26102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105010Item26103 = match seq.next_element::<Root105010Item26103>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105010Item26104 = match seq.next_element::<Root105010Item26104>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2610(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26110(pub i64);
impl ::core::ops::Deref for Root105010Item26110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26110(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26111(pub i64);
impl ::core::ops::Deref for Root105010Item26111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26111 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26111(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26112(pub i64);
impl ::core::ops::Deref for Root105010Item26112 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26112 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26112(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26113(pub ::std::string::String);
impl ::core::ops::Deref for Root105010Item26113 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26113 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105010Item26113: expected URI scheme"));
        }
        Ok(Root105010Item26113(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26114(pub i64);
impl ::core::ops::Deref for Root105010Item26114 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26114 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26114(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2611(
    pub Root105010Item26110,
    pub Root105010Item26111,
    pub Root105010Item26112,
    pub Root105010Item26113,
    pub Root105010Item26114,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2611 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2611;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2611, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item26110 = match seq.next_element::<Root105010Item26110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105010Item26111 = match seq.next_element::<Root105010Item26111>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105010Item26112 = match seq.next_element::<Root105010Item26112>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105010Item26113 = match seq.next_element::<Root105010Item26113>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105010Item26114 = match seq.next_element::<Root105010Item26114>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2611(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26120(pub i64);
impl ::core::ops::Deref for Root105010Item26120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26121(pub i64);
impl ::core::ops::Deref for Root105010Item26121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26122(pub i64);
impl ::core::ops::Deref for Root105010Item26122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26122 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26122(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26123(pub ::std::string::String);
impl ::core::ops::Deref for Root105010Item26123 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26123 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105010Item26123: expected URI scheme"));
        }
        Ok(Root105010Item26123(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26124(pub i64);
impl ::core::ops::Deref for Root105010Item26124 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26124 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26124(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2612(
    pub Root105010Item26120,
    pub Root105010Item26121,
    pub Root105010Item26122,
    pub Root105010Item26123,
    pub Root105010Item26124,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2612 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2612;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2612, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item26120 = match seq.next_element::<Root105010Item26120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105010Item26121 = match seq.next_element::<Root105010Item26121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105010Item26122 = match seq.next_element::<Root105010Item26122>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105010Item26123 = match seq.next_element::<Root105010Item26123>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105010Item26124 = match seq.next_element::<Root105010Item26124>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2612(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26131(pub i64);
impl ::core::ops::Deref for Root105010Item26131 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26131 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26131(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26132(pub i64);
impl ::core::ops::Deref for Root105010Item26132 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26132 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26132(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26133(pub ::std::string::String);
impl ::core::ops::Deref for Root105010Item26133 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26133 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105010Item26133: expected URI scheme"));
        }
        Ok(Root105010Item26133(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26134(pub i64);
impl ::core::ops::Deref for Root105010Item26134 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26134 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26134(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2613(
    pub Null,
    pub Root105010Item26131,
    pub Root105010Item26132,
    pub Root105010Item26133,
    pub Root105010Item26134,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2613 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2613;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2613, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105010Item26131 = match seq.next_element::<Root105010Item26131>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105010Item26132 = match seq.next_element::<Root105010Item26132>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105010Item26133 = match seq.next_element::<Root105010Item26133>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105010Item26134 = match seq.next_element::<Root105010Item26134>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2613(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26141(pub i64);
impl ::core::ops::Deref for Root105010Item26141 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26141 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26141(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26142(pub i64);
impl ::core::ops::Deref for Root105010Item26142 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26142 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26142(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26143(pub ::std::string::String);
impl ::core::ops::Deref for Root105010Item26143 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26143 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105010Item26143: expected URI scheme"));
        }
        Ok(Root105010Item26143(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105010Item26144(pub i64);
impl ::core::ops::Deref for Root105010Item26144 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105010Item26144 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105010Item26144(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item2614(
    pub Null,
    pub Root105010Item26141,
    pub Root105010Item26142,
    pub Root105010Item26143,
    pub Root105010Item26144,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item2614 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item2614;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item2614, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105010Item26141 = match seq.next_element::<Root105010Item26141>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105010Item26142 = match seq.next_element::<Root105010Item26142>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105010Item26143 = match seq.next_element::<Root105010Item26143>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105010Item26144 = match seq.next_element::<Root105010Item26144>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item2614(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item261(
    pub Root105010Item2610,
    pub Root105010Item2611,
    pub Root105010Item2612,
    pub Root105010Item2613,
    pub Root105010Item2614,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item261 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item261;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item261, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item2610 = match seq.next_element::<Root105010Item2610>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105010Item2611 = match seq.next_element::<Root105010Item2611>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105010Item2612 = match seq.next_element::<Root105010Item2612>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105010Item2613 = match seq.next_element::<Root105010Item2613>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105010Item2614 = match seq.next_element::<Root105010Item2614>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item261(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item26(
    pub Root105010Item260,
    pub Root105010Item261,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item26 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item26;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item26, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105010Item260 = match seq.next_element::<Root105010Item260>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105010Item261 = match seq.next_element::<Root105010Item261>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item26(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item29(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item29 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item29;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item29, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item29(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=32 (required exactly 32)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105010Item(
    pub ::std::string::String,
    pub Root105010Item1,
    pub Root105010Item2,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub Null,
    pub Root105010Item6,
    pub Null,
    pub Root105010Item8,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root105010Item21,
    pub Root105010Item22,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root105010Item26>,
    pub Null,
    pub Null,
    pub Root105010Item29,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105010Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105010Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 32")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105010Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 32 elements")), };
                let a1: Root105010Item1 = match seq.next_element::<Root105010Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 32 elements")), };
                let a2: Root105010Item2 = match seq.next_element::<Root105010Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 32 elements")), };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 32 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 32 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 32 elements")), };
                let a6: Root105010Item6 = match seq.next_element::<Root105010Item6>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 32 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 32 elements")), };
                let a8: Root105010Item8 = match seq.next_element::<Root105010Item8>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 32 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 32 elements")), };
                let a10: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 32 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 32 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 32 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 32 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 32 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 32 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 32 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 32 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 32 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 32 elements")), };
                let a20: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 32 elements")), };
                let a21: Root105010Item21 = match seq.next_element::<Root105010Item21>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 32 elements")), };
                let a22: Root105010Item22 = match seq.next_element::<Root105010Item22>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 32 elements")), };
                let a23: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 32 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 32 elements")), };
                let a25: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 32 elements")), };
                let a26: ::core::option::Option<Root105010Item26> = match seq.next_element::<::core::option::Option<Root105010Item26>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 32 elements")), };
                let a27: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 32 elements")), };
                let a28: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 32 elements")), };
                let a29: Root105010Item29 = match seq.next_element::<Root105010Item29>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 32 elements")), };
                let a30: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 32 elements")), };
                let a31: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 32 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105010Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105011(pub i64);
impl ::core::ops::Deref for Root105011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105018000(pub i64);
impl ::core::ops::Deref for Root105018000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105018000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105018000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105018001(pub i64);
impl ::core::ops::Deref for Root105018001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105018001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105018001(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root10501800(
    pub Root105018000,
    pub Root105018001,
);

impl<'de> ::serde::Deserialize<'de> for Root10501800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root10501800;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root10501800, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105018000 = match seq.next_element::<Root105018000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105018001 = match seq.next_element::<Root105018001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root10501800(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1050180(
    pub Root10501800,
);

impl<'de> ::serde::Deserialize<'de> for Root1050180 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1050180;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1050180, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root10501800 = match seq.next_element::<Root10501800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1050180(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1050181(pub i64);
impl ::core::ops::Deref for Root1050181 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1050181 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1050181(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1050183(pub i64);
impl ::core::ops::Deref for Root1050183 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1050183 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1050183(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1050184(pub i64);
impl ::core::ops::Deref for Root1050184 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1050184 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1050184(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105018(
    pub Root1050180,
    pub Root1050181,
    pub Null,
    pub Root1050183,
    pub Root1050184,
);

impl<'de> ::serde::Deserialize<'de> for Root105018 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105018;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105018, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1050180 = match seq.next_element::<Root1050180>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root1050181 = match seq.next_element::<Root1050181>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root1050183 = match seq.next_element::<Root1050183>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root1050184 = match seq.next_element::<Root1050184>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105018(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1050110(pub i64);
impl ::core::ops::Deref for Root1050110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1050110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1050110(x))
    }
}
/// tuple len=11 (required first 0 slots); accepts 0..=11 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root10501(
    pub ::core::option::Option<::std::vec::Vec<Root105010Item>>,
    pub ::core::option::Option<Root105011>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root105018>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root1050110>,
);

impl<'de> ::serde::Deserialize<'de> for Root10501 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root10501;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=11")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root10501, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::vec::Vec<Root105010Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root105010Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root105011> = match seq.next_element::<::core::option::Option<Root105011>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Root105018> = match seq.next_element::<::core::option::Option<Root105018>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Root1050110> = match seq.next_element::<::core::option::Option<Root1050110>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root10501(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1050(
    pub Root10500,
    pub Root10501,
);

impl<'de> ::serde::Deserialize<'de> for Root1050 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1050;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1050, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root10500 = match seq.next_element::<Root10500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root10501 = match seq.next_element::<Root10501>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1050(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root10510000(pub i64);
impl ::core::ops::Deref for Root10510000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root10510000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root10510000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1051000(
    pub Root10510000,
);

impl<'de> ::serde::Deserialize<'de> for Root1051000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1051000;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1051000, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root10510000 = match seq.next_element::<Root10510000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1051000(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105100(
    pub Root1051000,
);

impl<'de> ::serde::Deserialize<'de> for Root105100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105100;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105100, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1051000 = match seq.next_element::<Root1051000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105100(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root10510(
    pub Root105100,
);

impl<'de> ::serde::Deserialize<'de> for Root10510 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root10510;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root10510, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105100 = match seq.next_element::<Root105100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root10510(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item1(pub i64);
impl ::core::ops::Deref for Root105110Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item2(pub i64);
impl ::core::ops::Deref for Root105110Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item60(pub ::std::string::String);
impl ::core::ops::Deref for Root105110Item60 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item60 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105110Item60: expected URI scheme"));
        }
        Ok(Root105110Item60(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item620(pub i64);
impl ::core::ops::Deref for Root105110Item620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item620 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item621(pub i64);
impl ::core::ops::Deref for Root105110Item621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item621 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item621(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item62(
    pub Root105110Item620,
    pub Root105110Item621,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item62 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item62;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item62, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item620 = match seq.next_element::<Root105110Item620>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105110Item621 = match seq.next_element::<Root105110Item621>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item62(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item630(pub i64);
impl ::core::ops::Deref for Root105110Item630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item630 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item631(pub i64);
impl ::core::ops::Deref for Root105110Item631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item631 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item631(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item63(
    pub Root105110Item630,
    pub Root105110Item631,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item63 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item63;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item63, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item630 = match seq.next_element::<Root105110Item630>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105110Item631 = match seq.next_element::<Root105110Item631>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item63(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item6(
    pub Root105110Item60,
    pub ::std::string::String,
    pub Root105110Item62,
    pub Root105110Item63,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item6 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item6;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item6, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item60 = match seq.next_element::<Root105110Item60>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105110Item62 = match seq.next_element::<Root105110Item62>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105110Item63 = match seq.next_element::<Root105110Item63>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item6(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item800(pub i64);
impl ::core::ops::Deref for Root105110Item800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105110Item801(pub f64);
impl ::core::ops::Deref for Root105110Item801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105110Item801: non-finite number")); }
        
        Ok(Root105110Item801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105110Item802(pub f64);
impl ::core::ops::Deref for Root105110Item802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item802 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105110Item802: non-finite number")); }
        
        Ok(Root105110Item802(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item80(
    pub Root105110Item800,
    pub Root105110Item801,
    pub Root105110Item802,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item80 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item80;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item80, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item800 = match seq.next_element::<Root105110Item800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root105110Item801 = match seq.next_element::<Root105110Item801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root105110Item802 = match seq.next_element::<Root105110Item802>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item80(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item810(pub i64);
impl ::core::ops::Deref for Root105110Item810 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item811(pub i64);
impl ::core::ops::Deref for Root105110Item811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item811 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item811(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item81(
    pub Root105110Item810,
    pub Root105110Item811,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item81 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item81;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item81, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item810 = match seq.next_element::<Root105110Item810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105110Item811 = match seq.next_element::<Root105110Item811>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item81(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item820(pub i64);
impl ::core::ops::Deref for Root105110Item820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item820 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item821(pub i64);
impl ::core::ops::Deref for Root105110Item821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item821 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item821(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item82(
    pub Root105110Item820,
    pub Root105110Item821,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item82 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item82;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item82, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item820 = match seq.next_element::<Root105110Item820>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105110Item821 = match seq.next_element::<Root105110Item821>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item82(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item83(pub i64);
impl ::core::ops::Deref for Root105110Item83 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item83 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item83(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item8(
    pub Root105110Item80,
    pub Root105110Item81,
    pub Root105110Item82,
    pub Root105110Item83,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item8 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item8;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item8, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item80 = match seq.next_element::<Root105110Item80>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root105110Item81 = match seq.next_element::<Root105110Item81>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105110Item82 = match seq.next_element::<Root105110Item82>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105110Item83 = match seq.next_element::<Root105110Item83>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item8(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item2110(pub i64);
impl ::core::ops::Deref for Root105110Item2110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item2110(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item211(
    pub Root105110Item2110,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item211;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item211, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item2110 = match seq.next_element::<Root105110Item2110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item211(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item2120(pub i64);
impl ::core::ops::Deref for Root105110Item2120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item2120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item2121(pub i64);
impl ::core::ops::Deref for Root105110Item2121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item2121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item21220(pub i64);
impl ::core::ops::Deref for Root105110Item21220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item21220 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item21220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item21221(pub i64);
impl ::core::ops::Deref for Root105110Item21221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item21221 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item21221(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2122(
    pub Root105110Item21220,
    pub Root105110Item21221,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2122 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2122;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2122, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item21220 = match seq.next_element::<Root105110Item21220>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105110Item21221 = match seq.next_element::<Root105110Item21221>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2122(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item212(
    pub Root105110Item2120,
    pub Root105110Item2121,
    pub Root105110Item2122,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item212 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item212;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item212, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item2120 = match seq.next_element::<Root105110Item2120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root105110Item2121 = match seq.next_element::<Root105110Item2121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root105110Item2122 = match seq.next_element::<Root105110Item2122>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item212(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item214000(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item214000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item214000;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item214000, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item214000(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item21400(
    pub Root105110Item214000,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item21400 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item21400;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item21400, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item214000 = match seq.next_element::<Root105110Item214000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item21400(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2140(
    pub Root105110Item21400,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2140 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2140;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2140, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item21400 = match seq.next_element::<Root105110Item21400>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2140(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item214(
    pub Root105110Item2140,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item214 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item214;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item214, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item2140 = match seq.next_element::<Root105110Item2140>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item214(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item215000(pub i64);
impl ::core::ops::Deref for Root105110Item215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item215000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item215000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item21500(
    pub Root105110Item215000,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item21500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item21500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item21500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item215000 = match seq.next_element::<Root105110Item215000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item21500(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105110Item2150102(pub f64);
impl ::core::ops::Deref for Root105110Item2150102 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2150102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105110Item2150102: non-finite number")); }
        
        Ok(Root105110Item2150102(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root105110Item2150103(pub f64);
impl ::core::ops::Deref for Root105110Item2150103 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2150103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root105110Item2150103: non-finite number")); }
        
        Ok(Root105110Item2150103(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item215010(
    pub Null,
    pub Null,
    pub Root105110Item2150102,
    pub Root105110Item2150103,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item215010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item215010;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item215010, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105110Item2150102 = match seq.next_element::<Root105110Item2150102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105110Item2150103 = match seq.next_element::<Root105110Item2150103>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item215010(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item21501(
    pub Root105110Item215010,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item21501 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item21501;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item21501, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item215010 = match seq.next_element::<Root105110Item215010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item21501(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2150(
    pub Root105110Item21500,
    pub Root105110Item21501,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2150 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2150;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2150, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item21500 = match seq.next_element::<Root105110Item21500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105110Item21501 = match seq.next_element::<Root105110Item21501>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2150(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item215(
    pub Root105110Item2150,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item215 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item215;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item215, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item2150 = match seq.next_element::<Root105110Item2150>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item215(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item2160(pub i64);
impl ::core::ops::Deref for Root105110Item2160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item2160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item2163Item(pub i64);
impl ::core::ops::Deref for Root105110Item2163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item2163Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item2163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item216530(pub i64);
impl ::core::ops::Deref for Root105110Item216530 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item216530 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item216530(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item216531(pub i64);
impl ::core::ops::Deref for Root105110Item216531 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item216531 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item216531(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item216532(pub i64);
impl ::core::ops::Deref for Root105110Item216532 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item216532 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item216532(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item216533(pub i64);
impl ::core::ops::Deref for Root105110Item216533 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item216533 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item216533(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item216534(pub i64);
impl ::core::ops::Deref for Root105110Item216534 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item216534 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item216534(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item21653(
    pub Root105110Item216530,
    pub Root105110Item216531,
    pub Root105110Item216532,
    pub Root105110Item216533,
    pub Root105110Item216534,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item21653 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item21653;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item21653, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item216530 = match seq.next_element::<Root105110Item216530>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105110Item216531 = match seq.next_element::<Root105110Item216531>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105110Item216532 = match seq.next_element::<Root105110Item216532>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105110Item216533 = match seq.next_element::<Root105110Item216533>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105110Item216534 = match seq.next_element::<Root105110Item216534>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item21653(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2165(
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root105110Item21653,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2165;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2165, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105110Item21653 = match seq.next_element::<Root105110Item21653>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2165(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item21680(pub i64);
impl ::core::ops::Deref for Root105110Item21680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item21680 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item21680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item21681(pub i64);
impl ::core::ops::Deref for Root105110Item21681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item21681 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item21681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item21682(pub i64);
impl ::core::ops::Deref for Root105110Item21682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item21682 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item21682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item21683(pub i64);
impl ::core::ops::Deref for Root105110Item21683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item21683 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item21683(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2168(
    pub Root105110Item21680,
    pub Root105110Item21681,
    pub Root105110Item21682,
    pub Root105110Item21683,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2168 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2168;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2168, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item21680 = match seq.next_element::<Root105110Item21680>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root105110Item21681 = match seq.next_element::<Root105110Item21681>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root105110Item21682 = match seq.next_element::<Root105110Item21682>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root105110Item21683 = match seq.next_element::<Root105110Item21683>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2168(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item216(
    pub Root105110Item2160,
    pub Null,
    pub Null,
    pub ::core::option::Option<::std::vec::Vec<Root105110Item2163Item>>,
    pub Null,
    pub Root105110Item2165,
    pub Null,
    pub Null,
    pub Root105110Item2168,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item216 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item216;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item216, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item2160 = match seq.next_element::<Root105110Item2160>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: ::core::option::Option<::std::vec::Vec<Root105110Item2163Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root105110Item2163Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Root105110Item2165 = match seq.next_element::<Root105110Item2165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root105110Item2168 = match seq.next_element::<Root105110Item2168>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item216(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2119(
    pub ::std::string::String,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2119 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2119;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2119, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2119(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=20 (required exactly 20)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item21(
    pub Null,
    pub Root105110Item211,
    pub Root105110Item212,
    pub Null,
    pub Root105110Item214,
    pub Root105110Item215,
    pub Root105110Item216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105110Item2119,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item21 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item21;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 20")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item21, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 20 elements")), };
                let a1: Root105110Item211 = match seq.next_element::<Root105110Item211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 20 elements")), };
                let a2: Root105110Item212 = match seq.next_element::<Root105110Item212>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 20 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 20 elements")), };
                let a4: Root105110Item214 = match seq.next_element::<Root105110Item214>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 20 elements")), };
                let a5: Root105110Item215 = match seq.next_element::<Root105110Item215>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 20 elements")), };
                let a6: Root105110Item216 = match seq.next_element::<Root105110Item216>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 20 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 20 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 20 elements")), };
                let a9: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 20 elements")), };
                let a10: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 20 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 20 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 20 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 20 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 20 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 20 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 20 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 20 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 20 elements")), };
                let a19: Root105110Item2119 = match seq.next_element::<Root105110Item2119>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 20 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item21(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item22(pub i64);
impl ::core::ops::Deref for Root105110Item22 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item22 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item22(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item260(pub i64);
impl ::core::ops::Deref for Root105110Item260 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item260 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item260(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26100(pub i64);
impl ::core::ops::Deref for Root105110Item26100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26101(pub i64);
impl ::core::ops::Deref for Root105110Item26101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26102(pub i64);
impl ::core::ops::Deref for Root105110Item26102 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26102(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26103(pub ::std::string::String);
impl ::core::ops::Deref for Root105110Item26103 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105110Item26103: expected URI scheme"));
        }
        Ok(Root105110Item26103(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26104(pub i64);
impl ::core::ops::Deref for Root105110Item26104 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26104 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26104(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2610(
    pub Root105110Item26100,
    pub Root105110Item26101,
    pub Root105110Item26102,
    pub Root105110Item26103,
    pub Root105110Item26104,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2610 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2610;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2610, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item26100 = match seq.next_element::<Root105110Item26100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105110Item26101 = match seq.next_element::<Root105110Item26101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105110Item26102 = match seq.next_element::<Root105110Item26102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105110Item26103 = match seq.next_element::<Root105110Item26103>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105110Item26104 = match seq.next_element::<Root105110Item26104>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2610(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26110(pub i64);
impl ::core::ops::Deref for Root105110Item26110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26110(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26111(pub i64);
impl ::core::ops::Deref for Root105110Item26111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26111 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26111(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26112(pub i64);
impl ::core::ops::Deref for Root105110Item26112 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26112 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26112(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26113(pub ::std::string::String);
impl ::core::ops::Deref for Root105110Item26113 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26113 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105110Item26113: expected URI scheme"));
        }
        Ok(Root105110Item26113(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26114(pub i64);
impl ::core::ops::Deref for Root105110Item26114 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26114 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26114(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2611(
    pub Root105110Item26110,
    pub Root105110Item26111,
    pub Root105110Item26112,
    pub Root105110Item26113,
    pub Root105110Item26114,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2611 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2611;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2611, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item26110 = match seq.next_element::<Root105110Item26110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105110Item26111 = match seq.next_element::<Root105110Item26111>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105110Item26112 = match seq.next_element::<Root105110Item26112>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105110Item26113 = match seq.next_element::<Root105110Item26113>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105110Item26114 = match seq.next_element::<Root105110Item26114>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2611(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26120(pub i64);
impl ::core::ops::Deref for Root105110Item26120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26121(pub i64);
impl ::core::ops::Deref for Root105110Item26121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26122(pub i64);
impl ::core::ops::Deref for Root105110Item26122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26122 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26122(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26123(pub ::std::string::String);
impl ::core::ops::Deref for Root105110Item26123 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26123 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105110Item26123: expected URI scheme"));
        }
        Ok(Root105110Item26123(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26124(pub i64);
impl ::core::ops::Deref for Root105110Item26124 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26124 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26124(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2612(
    pub Root105110Item26120,
    pub Root105110Item26121,
    pub Root105110Item26122,
    pub Root105110Item26123,
    pub Root105110Item26124,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2612 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2612;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2612, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item26120 = match seq.next_element::<Root105110Item26120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105110Item26121 = match seq.next_element::<Root105110Item26121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105110Item26122 = match seq.next_element::<Root105110Item26122>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105110Item26123 = match seq.next_element::<Root105110Item26123>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105110Item26124 = match seq.next_element::<Root105110Item26124>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2612(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26131(pub i64);
impl ::core::ops::Deref for Root105110Item26131 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26131 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26131(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26132(pub i64);
impl ::core::ops::Deref for Root105110Item26132 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26132 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26132(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26133(pub ::std::string::String);
impl ::core::ops::Deref for Root105110Item26133 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26133 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105110Item26133: expected URI scheme"));
        }
        Ok(Root105110Item26133(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26134(pub i64);
impl ::core::ops::Deref for Root105110Item26134 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26134 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26134(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2613(
    pub Null,
    pub Root105110Item26131,
    pub Root105110Item26132,
    pub Root105110Item26133,
    pub Root105110Item26134,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2613 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2613;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2613, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105110Item26131 = match seq.next_element::<Root105110Item26131>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105110Item26132 = match seq.next_element::<Root105110Item26132>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105110Item26133 = match seq.next_element::<Root105110Item26133>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105110Item26134 = match seq.next_element::<Root105110Item26134>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2613(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26141(pub i64);
impl ::core::ops::Deref for Root105110Item26141 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26141 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26141(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26142(pub i64);
impl ::core::ops::Deref for Root105110Item26142 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26142 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26142(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26143(pub ::std::string::String);
impl ::core::ops::Deref for Root105110Item26143 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26143 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root105110Item26143: expected URI scheme"));
        }
        Ok(Root105110Item26143(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105110Item26144(pub i64);
impl ::core::ops::Deref for Root105110Item26144 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105110Item26144 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105110Item26144(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item2614(
    pub Null,
    pub Root105110Item26141,
    pub Root105110Item26142,
    pub Root105110Item26143,
    pub Root105110Item26144,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item2614 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item2614;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item2614, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105110Item26141 = match seq.next_element::<Root105110Item26141>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105110Item26142 = match seq.next_element::<Root105110Item26142>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105110Item26143 = match seq.next_element::<Root105110Item26143>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105110Item26144 = match seq.next_element::<Root105110Item26144>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item2614(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item261(
    pub Root105110Item2610,
    pub Root105110Item2611,
    pub Root105110Item2612,
    pub Root105110Item2613,
    pub Root105110Item2614,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item261 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item261;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item261, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item2610 = match seq.next_element::<Root105110Item2610>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root105110Item2611 = match seq.next_element::<Root105110Item2611>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Root105110Item2612 = match seq.next_element::<Root105110Item2612>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root105110Item2613 = match seq.next_element::<Root105110Item2613>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root105110Item2614 = match seq.next_element::<Root105110Item2614>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item261(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item26(
    pub Root105110Item260,
    pub Root105110Item261,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item26 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item26;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item26, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105110Item260 = match seq.next_element::<Root105110Item260>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105110Item261 = match seq.next_element::<Root105110Item261>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item26(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item29(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item29 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item29;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item29, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item29(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=32 (required exactly 32)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105110Item(
    pub ::std::string::String,
    pub Root105110Item1,
    pub Root105110Item2,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub Null,
    pub Root105110Item6,
    pub Null,
    pub Root105110Item8,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub Root105110Item21,
    pub Root105110Item22,
    pub Null,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root105110Item26>,
    pub Null,
    pub Null,
    pub Root105110Item29,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root105110Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105110Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 32")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105110Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 32 elements")), };
                let a1: Root105110Item1 = match seq.next_element::<Root105110Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 32 elements")), };
                let a2: Root105110Item2 = match seq.next_element::<Root105110Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 32 elements")), };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 32 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 32 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 32 elements")), };
                let a6: Root105110Item6 = match seq.next_element::<Root105110Item6>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 32 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 32 elements")), };
                let a8: Root105110Item8 = match seq.next_element::<Root105110Item8>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 32 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 32 elements")), };
                let a10: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 32 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 32 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 32 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 32 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 32 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 32 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 32 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 32 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 32 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 32 elements")), };
                let a20: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 32 elements")), };
                let a21: Root105110Item21 = match seq.next_element::<Root105110Item21>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 32 elements")), };
                let a22: Root105110Item22 = match seq.next_element::<Root105110Item22>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(22, &"expected 32 elements")), };
                let a23: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(23, &"expected 32 elements")), };
                let a24: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(24, &"expected 32 elements")), };
                let a25: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(25, &"expected 32 elements")), };
                let a26: ::core::option::Option<Root105110Item26> = match seq.next_element::<::core::option::Option<Root105110Item26>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(26, &"expected 32 elements")), };
                let a27: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(27, &"expected 32 elements")), };
                let a28: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(28, &"expected 32 elements")), };
                let a29: Root105110Item29 = match seq.next_element::<Root105110Item29>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(29, &"expected 32 elements")), };
                let a30: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(30, &"expected 32 elements")), };
                let a31: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(31, &"expected 32 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105110Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105111(pub i64);
impl ::core::ops::Deref for Root105111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105111 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105111(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105118000(pub i64);
impl ::core::ops::Deref for Root105118000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105118000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105118000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root105118001(pub i64);
impl ::core::ops::Deref for Root105118001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root105118001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root105118001(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root10511800(
    pub Root105118000,
    pub Root105118001,
);

impl<'de> ::serde::Deserialize<'de> for Root10511800 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root10511800;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root10511800, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root105118000 = match seq.next_element::<Root105118000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root105118001 = match seq.next_element::<Root105118001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root10511800(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1051180(
    pub Root10511800,
);

impl<'de> ::serde::Deserialize<'de> for Root1051180 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1051180;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1051180, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root10511800 = match seq.next_element::<Root10511800>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1051180(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1051181(pub i64);
impl ::core::ops::Deref for Root1051181 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1051181 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1051181(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1051183(pub i64);
impl ::core::ops::Deref for Root1051183 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1051183 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1051183(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1051184(pub i64);
impl ::core::ops::Deref for Root1051184 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1051184 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1051184(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105118(
    pub Root1051180,
    pub Root1051181,
    pub Null,
    pub Root1051183,
    pub Root1051184,
);

impl<'de> ::serde::Deserialize<'de> for Root105118 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105118;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105118, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1051180 = match seq.next_element::<Root1051180>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Root1051181 = match seq.next_element::<Root1051181>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Root1051183 = match seq.next_element::<Root1051183>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root1051184 = match seq.next_element::<Root1051184>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105118(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1051110(pub i64);
impl ::core::ops::Deref for Root1051110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1051110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1051110(x))
    }
}
/// tuple len=11 (required first 0 slots); accepts 0..=11 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root10511(
    pub ::core::option::Option<::std::vec::Vec<Root105110Item>>,
    pub ::core::option::Option<Root105111>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root105118>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root1051110>,
);

impl<'de> ::serde::Deserialize<'de> for Root10511 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root10511;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=11")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root10511, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::vec::Vec<Root105110Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root105110Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root105111> = match seq.next_element::<::core::option::Option<Root105111>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Root105118> = match seq.next_element::<::core::option::Option<Root105118>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Root1051110> = match seq.next_element::<::core::option::Option<Root1051110>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root10511(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1051(
    pub Root10510,
    pub Root10511,
);

impl<'de> ::serde::Deserialize<'de> for Root1051 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1051;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1051, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root10510 = match seq.next_element::<Root10510>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root10511 = match seq.next_element::<Root10511>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1051(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root105(
    pub Root1050,
    pub Root1051,
);

impl<'de> ::serde::Deserialize<'de> for Root105 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root105;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root105, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1050 = match seq.next_element::<Root1050>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1051 = match seq.next_element::<Root1051>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root105(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3001(pub i64);
impl ::core::ops::Deref for Root118Item3001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3001(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30020(pub i64);
impl ::core::ops::Deref for Root118Item30020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30020 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30020(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30021(pub i64);
impl ::core::ops::Deref for Root118Item30021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30022(pub i64);
impl ::core::ops::Deref for Root118Item30022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30022 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30022(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3002(
    pub Root118Item30020,
    pub Root118Item30021,
    pub Root118Item30022,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3002 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3002;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3002, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30020 = match seq.next_element::<Root118Item30020>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item30021 = match seq.next_element::<Root118Item30021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item30022 = match seq.next_element::<Root118Item30022>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3002(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3003ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3003ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3003ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3003ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3003ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3003ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3003ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3003ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3003ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3003ItemItemAlt00Item>,
    pub ::std::vec::Vec<::core::option::Option<Root118Item3003ItemItemAlt01Item>>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3003ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3003ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3003ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3003ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3003ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<::core::option::Option<Root118Item3003ItemItemAlt01Item>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<Root118Item3003ItemItemAlt01Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3003ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3003ItemItem {
    V0(Root118Item3003ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3003ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3003ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3003ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3003ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3003ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3004(pub i64);
impl ::core::ops::Deref for Root118Item3004 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3004 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3004(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3005(pub i64);
impl ::core::ops::Deref for Root118Item3005 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3005 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3005(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item300(
    pub ::std::string::String,
    pub Root118Item3001,
    pub Root118Item3002,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3003ItemItem>>,
    pub Root118Item3004,
    pub Root118Item3005,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item300 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item300;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item300, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3001 = match seq.next_element::<Root118Item3001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3002 = match seq.next_element::<Root118Item3002>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3003ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3003ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3004 = match seq.next_element::<Root118Item3004>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3005 = match seq.next_element::<Root118Item3005>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item300(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3011(pub i64);
impl ::core::ops::Deref for Root118Item3011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30120(pub i64);
impl ::core::ops::Deref for Root118Item30120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30121(pub i64);
impl ::core::ops::Deref for Root118Item30121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30121 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30122(pub i64);
impl ::core::ops::Deref for Root118Item30122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30122 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30122(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3012(
    pub Root118Item30120,
    pub Root118Item30121,
    pub Root118Item30122,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3012 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3012;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3012, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30120 = match seq.next_element::<Root118Item30120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item30121 = match seq.next_element::<Root118Item30121>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item30122 = match seq.next_element::<Root118Item30122>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3012(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3013ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3013ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3013ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3013ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3013ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3013ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3013ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3013ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3013ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3013ItemItemAlt00Item>,
    pub ::std::vec::Vec<::core::option::Option<Root118Item3013ItemItemAlt01Item>>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3013ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3013ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3013ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3013ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3013ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<::core::option::Option<Root118Item3013ItemItemAlt01Item>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<Root118Item3013ItemItemAlt01Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3013ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3013ItemItem {
    V0(Root118Item3013ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3013ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3013ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3013ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3013ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3013ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3014(pub i64);
impl ::core::ops::Deref for Root118Item3014 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3014 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3014(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3015(pub i64);
impl ::core::ops::Deref for Root118Item3015 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3015 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3015(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item301(
    pub ::std::string::String,
    pub Root118Item3011,
    pub Root118Item3012,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3013ItemItem>>,
    pub Root118Item3014,
    pub Root118Item3015,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item301 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item301;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item301, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3011 = match seq.next_element::<Root118Item3011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3012 = match seq.next_element::<Root118Item3012>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3013ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3013ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3014 = match seq.next_element::<Root118Item3014>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3015 = match seq.next_element::<Root118Item3015>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item301(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3021(pub i64);
impl ::core::ops::Deref for Root118Item3021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30220(pub i64);
impl ::core::ops::Deref for Root118Item30220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30220 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30221(pub i64);
impl ::core::ops::Deref for Root118Item30221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30221 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30221(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30222(pub i64);
impl ::core::ops::Deref for Root118Item30222 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30222 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30222(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3022(
    pub Root118Item30220,
    pub Root118Item30221,
    pub Root118Item30222,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3022 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3022;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3022, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30220 = match seq.next_element::<Root118Item30220>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item30221 = match seq.next_element::<Root118Item30221>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item30222 = match seq.next_element::<Root118Item30222>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3022(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3023ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3023ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3023ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3023ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3023ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3023ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3023ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3023ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3023ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3023ItemItemAlt00Item>,
    pub ::std::vec::Vec<Root118Item3023ItemItemAlt01Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3023ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3023ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3023ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3023ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3023ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<Root118Item3023ItemItemAlt01Item> = match seq.next_element::<::std::vec::Vec<Root118Item3023ItemItemAlt01Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3023ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3023ItemItem {
    V0(Root118Item3023ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3023ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3023ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3023ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3023ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3023ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3024(pub i64);
impl ::core::ops::Deref for Root118Item3024 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3024 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3024(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3025(pub i64);
impl ::core::ops::Deref for Root118Item3025 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3025 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3025(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item302(
    pub ::std::string::String,
    pub Root118Item3021,
    pub Root118Item3022,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3023ItemItem>>,
    pub Root118Item3024,
    pub Root118Item3025,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item302 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item302;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item302, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3021 = match seq.next_element::<Root118Item3021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3022 = match seq.next_element::<Root118Item3022>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3023ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3023ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3024 = match seq.next_element::<Root118Item3024>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3025 = match seq.next_element::<Root118Item3025>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item302(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3031(pub i64);
impl ::core::ops::Deref for Root118Item3031 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3031 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3031(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30320(pub i64);
impl ::core::ops::Deref for Root118Item30320 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30320 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30320(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30321(pub i64);
impl ::core::ops::Deref for Root118Item30321 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30321 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30321(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30322(pub i64);
impl ::core::ops::Deref for Root118Item30322 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30322 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30322(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3032(
    pub Root118Item30320,
    pub Root118Item30321,
    pub Root118Item30322,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3032 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3032;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3032, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30320 = match seq.next_element::<Root118Item30320>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item30321 = match seq.next_element::<Root118Item30321>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item30322 = match seq.next_element::<Root118Item30322>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3032(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3033ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3033ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3033ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3033ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3033ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3033ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3033ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3033ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3033ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3033ItemItemAlt00Item>,
    pub ::std::vec::Vec<Root118Item3033ItemItemAlt01Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3033ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3033ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3033ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3033ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3033ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<Root118Item3033ItemItemAlt01Item> = match seq.next_element::<::std::vec::Vec<Root118Item3033ItemItemAlt01Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3033ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3033ItemItem {
    V0(Root118Item3033ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3033ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3033ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3033ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3033ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3033ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3034(pub i64);
impl ::core::ops::Deref for Root118Item3034 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3034 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3034(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3035(pub i64);
impl ::core::ops::Deref for Root118Item3035 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3035 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3035(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item303(
    pub ::std::string::String,
    pub Root118Item3031,
    pub Root118Item3032,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3033ItemItem>>,
    pub Root118Item3034,
    pub Root118Item3035,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item303 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item303;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item303, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3031 = match seq.next_element::<Root118Item3031>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3032 = match seq.next_element::<Root118Item3032>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3033ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3033ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3034 = match seq.next_element::<Root118Item3034>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3035 = match seq.next_element::<Root118Item3035>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item303(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3041(pub i64);
impl ::core::ops::Deref for Root118Item3041 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3041 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3041(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30420(pub i64);
impl ::core::ops::Deref for Root118Item30420 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30420 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30420(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30421(pub i64);
impl ::core::ops::Deref for Root118Item30421 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30421 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30421(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30422(pub i64);
impl ::core::ops::Deref for Root118Item30422 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30422 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30422(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3042(
    pub Root118Item30420,
    pub Root118Item30421,
    pub Root118Item30422,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3042 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3042;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3042, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30420 = match seq.next_element::<Root118Item30420>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item30421 = match seq.next_element::<Root118Item30421>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item30422 = match seq.next_element::<Root118Item30422>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3042(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3043ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3043ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3043ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3043ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3043ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3043ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3043ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3043ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3043ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3043ItemItemAlt00Item>,
    pub ::std::vec::Vec<Root118Item3043ItemItemAlt01Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3043ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3043ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3043ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3043ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3043ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<Root118Item3043ItemItemAlt01Item> = match seq.next_element::<::std::vec::Vec<Root118Item3043ItemItemAlt01Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3043ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3043ItemItem {
    V0(Root118Item3043ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3043ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3043ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3043ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3043ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3043ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3044(pub i64);
impl ::core::ops::Deref for Root118Item3044 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3044 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3044(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3045(pub i64);
impl ::core::ops::Deref for Root118Item3045 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3045 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3045(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item304(
    pub ::std::string::String,
    pub Root118Item3041,
    pub Root118Item3042,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3043ItemItem>>,
    pub Root118Item3044,
    pub Root118Item3045,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item304 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item304;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item304, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3041 = match seq.next_element::<Root118Item3041>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3042 = match seq.next_element::<Root118Item3042>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3043ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3043ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3044 = match seq.next_element::<Root118Item3044>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3045 = match seq.next_element::<Root118Item3045>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item304(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3051(pub i64);
impl ::core::ops::Deref for Root118Item3051 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3051 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3051(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30520(pub i64);
impl ::core::ops::Deref for Root118Item30520 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30520 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30520(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30521(pub i64);
impl ::core::ops::Deref for Root118Item30521 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30521 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30521(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30522(pub i64);
impl ::core::ops::Deref for Root118Item30522 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30522 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30522(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3052(
    pub Root118Item30520,
    pub Root118Item30521,
    pub Root118Item30522,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3052 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3052;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3052, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30520 = match seq.next_element::<Root118Item30520>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item30521 = match seq.next_element::<Root118Item30521>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item30522 = match seq.next_element::<Root118Item30522>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3052(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3053ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3053ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3053ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3053ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3053ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3053ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3053ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3053ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3053ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3053ItemItemAlt00Item>,
    pub ::std::vec::Vec<Root118Item3053ItemItemAlt01Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3053ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3053ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3053ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3053ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3053ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<Root118Item3053ItemItemAlt01Item> = match seq.next_element::<::std::vec::Vec<Root118Item3053ItemItemAlt01Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3053ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3053ItemItem {
    V0(Root118Item3053ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3053ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3053ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3053ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3053ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3053ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3054(pub i64);
impl ::core::ops::Deref for Root118Item3054 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3054 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3054(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3055(pub i64);
impl ::core::ops::Deref for Root118Item3055 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3055 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3055(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item305(
    pub ::std::string::String,
    pub Root118Item3051,
    pub Root118Item3052,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3053ItemItem>>,
    pub Root118Item3054,
    pub Root118Item3055,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item305 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item305;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item305, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3051 = match seq.next_element::<Root118Item3051>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3052 = match seq.next_element::<Root118Item3052>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3053ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3053ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3054 = match seq.next_element::<Root118Item3054>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3055 = match seq.next_element::<Root118Item3055>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item305(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3061(pub i64);
impl ::core::ops::Deref for Root118Item3061 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3061 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3061(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30620(pub i64);
impl ::core::ops::Deref for Root118Item30620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30620 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30621(pub i64);
impl ::core::ops::Deref for Root118Item30621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30621 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30621(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item30622(pub i64);
impl ::core::ops::Deref for Root118Item30622 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item30622 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item30622(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3062(
    pub Root118Item30620,
    pub Root118Item30621,
    pub Root118Item30622,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3062 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3062;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3062, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30620 = match seq.next_element::<Root118Item30620>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item30621 = match seq.next_element::<Root118Item30621>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item30622 = match seq.next_element::<Root118Item30622>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3062(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3063ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3063ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3063ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3063ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3063ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3063ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3063ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3063ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3063ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3063ItemItemAlt00Item>,
    pub ::std::vec::Vec<Root118Item3063ItemItemAlt01Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3063ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3063ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3063ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3063ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3063ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<Root118Item3063ItemItemAlt01Item> = match seq.next_element::<::std::vec::Vec<Root118Item3063ItemItemAlt01Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3063ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3063ItemItem {
    V0(Root118Item3063ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3063ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3063ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3063ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3063ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3063ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3064(pub i64);
impl ::core::ops::Deref for Root118Item3064 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3064 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3064(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3065(pub i64);
impl ::core::ops::Deref for Root118Item3065 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3065 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3065(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item306(
    pub ::std::string::String,
    pub Root118Item3061,
    pub Root118Item3062,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3063ItemItem>>,
    pub Root118Item3064,
    pub Root118Item3065,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item306 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item306;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item306, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3061 = match seq.next_element::<Root118Item3061>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3062 = match seq.next_element::<Root118Item3062>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3063ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3063ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3064 = match seq.next_element::<Root118Item3064>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3065 = match seq.next_element::<Root118Item3065>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item306(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item30(
    pub Root118Item300,
    pub Root118Item301,
    pub Root118Item302,
    pub Root118Item303,
    pub Root118Item304,
    pub Root118Item305,
    pub Root118Item306,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item30 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item30;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item30, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item300 = match seq.next_element::<Root118Item300>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Root118Item301 = match seq.next_element::<Root118Item301>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Root118Item302 = match seq.next_element::<Root118Item302>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Root118Item303 = match seq.next_element::<Root118Item303>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Root118Item304 = match seq.next_element::<Root118Item304>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Root118Item305 = match seq.next_element::<Root118Item305>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root118Item306 = match seq.next_element::<Root118Item306>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item30(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3101(pub i64);
impl ::core::ops::Deref for Root118Item3101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31020(pub i64);
impl ::core::ops::Deref for Root118Item31020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31020 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31020(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31021(pub i64);
impl ::core::ops::Deref for Root118Item31021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31022(pub i64);
impl ::core::ops::Deref for Root118Item31022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31022 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31022(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3102(
    pub Root118Item31020,
    pub Root118Item31021,
    pub Root118Item31022,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3102;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3102, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item31020 = match seq.next_element::<Root118Item31020>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item31021 = match seq.next_element::<Root118Item31021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item31022 = match seq.next_element::<Root118Item31022>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3102(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3103ItemItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root118Item3103ItemItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3103ItemItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3103ItemItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3103ItemItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root118Item3103ItemItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3103ItemItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3103ItemItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3103ItemItemAlt0(
    pub ::std::vec::Vec<Root118Item3103ItemItemAlt00Item>,
    pub ::std::vec::Vec<::core::option::Option<Root118Item3103ItemItemAlt01Item>>,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3103ItemItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3103ItemItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3103ItemItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root118Item3103ItemItemAlt00Item> = match seq.next_element::<::std::vec::Vec<Root118Item3103ItemItemAlt00Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<::core::option::Option<Root118Item3103ItemItemAlt01Item>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<Root118Item3103ItemItemAlt01Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3103ItemItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root118Item3103ItemItem {
    V0(Root118Item3103ItemItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root118Item3103ItemItem {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root118Item3103ItemItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root118Item3103ItemItem::V0(x)),
                Err(e) => errs.push((0, "Root118Item3103ItemItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root118Item3103ItemItem::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3104(pub i64);
impl ::core::ops::Deref for Root118Item3104 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3104 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3104(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item3105(pub i64);
impl ::core::ops::Deref for Root118Item3105 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item3105 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item3105(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item310(
    pub ::std::string::String,
    pub Root118Item3101,
    pub Root118Item3102,
    pub ::std::vec::Vec<::std::vec::Vec<Root118Item3103ItemItem>>,
    pub Root118Item3104,
    pub Root118Item3105,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item310 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item310;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item310, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root118Item3101 = match seq.next_element::<Root118Item3101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root118Item3102 = match seq.next_element::<Root118Item3102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::vec::Vec<::std::vec::Vec<Root118Item3103ItemItem>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<Root118Item3103ItemItem>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root118Item3104 = match seq.next_element::<Root118Item3104>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root118Item3105 = match seq.next_element::<Root118Item3105>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item310(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item311(pub i64);
impl ::core::ops::Deref for Root118Item311 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item311 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item311(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item312(pub i64);
impl ::core::ops::Deref for Root118Item312 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item312 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item312(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item314100(pub i64);
impl ::core::ops::Deref for Root118Item314100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item314100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item314100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item314101(pub i64);
impl ::core::ops::Deref for Root118Item314101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item314101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item314101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31410210(pub i64);
impl ::core::ops::Deref for Root118Item31410210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31410210 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31410210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31410211(pub i64);
impl ::core::ops::Deref for Root118Item31410211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31410211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31410211(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3141021(
    pub Root118Item31410210,
    pub Root118Item31410211,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3141021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3141021;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3141021, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item31410210 = match seq.next_element::<Root118Item31410210>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item31410211 = match seq.next_element::<Root118Item31410211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3141021(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item314102(
    pub Null,
    pub Root118Item3141021,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item314102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item314102;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item314102, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item3141021 = match seq.next_element::<Root118Item3141021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item314102(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item31410(
    pub Root118Item314100,
    pub Root118Item314101,
    pub Root118Item314102,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item31410 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item31410;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item31410, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item314100 = match seq.next_element::<Root118Item314100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item314101 = match seq.next_element::<Root118Item314101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item314102 = match seq.next_element::<Root118Item314102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item31410(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3141(
    pub Root118Item31410,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3141 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3141;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3141, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item31410 = match seq.next_element::<Root118Item31410>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3141(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item314(
    pub ::std::string::String,
    pub Root118Item3141,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item314 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item314;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item314, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item3141 = match seq.next_element::<Root118Item3141>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item314(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item315100(pub i64);
impl ::core::ops::Deref for Root118Item315100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item315100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item315100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item315101(pub i64);
impl ::core::ops::Deref for Root118Item315101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item315101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item315101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31510210(pub i64);
impl ::core::ops::Deref for Root118Item31510210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31510210 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31510210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31510211(pub i64);
impl ::core::ops::Deref for Root118Item31510211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31510211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31510211(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3151021(
    pub Root118Item31510210,
    pub Root118Item31510211,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3151021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3151021;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3151021, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item31510210 = match seq.next_element::<Root118Item31510210>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item31510211 = match seq.next_element::<Root118Item31510211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3151021(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item315102(
    pub Null,
    pub Root118Item3151021,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item315102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item315102;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item315102, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item3151021 = match seq.next_element::<Root118Item3151021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item315102(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item31510(
    pub Root118Item315100,
    pub Root118Item315101,
    pub Root118Item315102,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item31510 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item31510;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item31510, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item315100 = match seq.next_element::<Root118Item315100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item315101 = match seq.next_element::<Root118Item315101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item315102 = match seq.next_element::<Root118Item315102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item31510(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3151(
    pub Root118Item31510,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3151 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3151;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3151, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item31510 = match seq.next_element::<Root118Item31510>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3151(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item315(
    pub ::std::string::String,
    pub Root118Item3151,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item315 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item315;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item315, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item3151 = match seq.next_element::<Root118Item3151>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item315(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item318100(pub i64);
impl ::core::ops::Deref for Root118Item318100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item318100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item318100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item318101(pub i64);
impl ::core::ops::Deref for Root118Item318101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item318101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item318101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31810210(pub i64);
impl ::core::ops::Deref for Root118Item31810210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31810210 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31810210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item31810211(pub i64);
impl ::core::ops::Deref for Root118Item31810211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item31810211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item31810211(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3181021(
    pub Root118Item31810210,
    pub Root118Item31810211,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3181021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3181021;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3181021, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item31810210 = match seq.next_element::<Root118Item31810210>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item31810211 = match seq.next_element::<Root118Item31810211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3181021(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item318102(
    pub Null,
    pub Root118Item3181021,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item318102 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item318102;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item318102, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item3181021 = match seq.next_element::<Root118Item3181021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item318102(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item31810(
    pub Root118Item318100,
    pub Root118Item318101,
    pub Root118Item318102,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item31810 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item31810;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item31810, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item318100 = match seq.next_element::<Root118Item318100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root118Item318101 = match seq.next_element::<Root118Item318101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root118Item318102 = match seq.next_element::<Root118Item318102>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item31810(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3181(
    pub Root118Item31810,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3181 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3181;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3181, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item31810 = match seq.next_element::<Root118Item31810>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3181(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item318(
    pub ::std::string::String,
    pub Root118Item3181,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item318 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item318;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item318, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root118Item3181 = match seq.next_element::<Root118Item3181>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item318(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=9 (required exactly 9)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item31(
    pub Root118Item310,
    pub ::core::option::Option<Root118Item311>,
    pub Root118Item312,
    pub Null,
    pub Root118Item314,
    pub Root118Item315,
    pub Null,
    pub Null,
    pub Root118Item318,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item31 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item31;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 9")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item31, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item310 = match seq.next_element::<Root118Item310>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 9 elements")), };
                let a1: ::core::option::Option<Root118Item311> = match seq.next_element::<::core::option::Option<Root118Item311>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 9 elements")), };
                let a2: Root118Item312 = match seq.next_element::<Root118Item312>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 9 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 9 elements")), };
                let a4: Root118Item314 = match seq.next_element::<Root118Item314>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 9 elements")), };
                let a5: Root118Item315 = match seq.next_element::<Root118Item315>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 9 elements")), };
                let a6: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 9 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 9 elements")), };
                let a8: Root118Item318 = match seq.next_element::<Root118Item318>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 9 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item31(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item32(pub i64);
impl ::core::ops::Deref for Root118Item32 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item32 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item32(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root118Item36(pub i64);
impl ::core::ops::Deref for Root118Item36 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root118Item36 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root118Item36(x))
    }
}
/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item3(
    pub Root118Item30,
    pub Root118Item31,
    pub Root118Item32,
    pub Null,
    pub Null,
    pub Null,
    pub Root118Item36,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item3;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item3, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root118Item30 = match seq.next_element::<Root118Item30>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Root118Item31 = match seq.next_element::<Root118Item31>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Root118Item32 = match seq.next_element::<Root118Item32>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root118Item36 = match seq.next_element::<Root118Item36>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item3(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root118Item(
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Root118Item3,
);

impl<'de> ::serde::Deserialize<'de> for Root118Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root118Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root118Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root118Item3 = match seq.next_element::<Root118Item3>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root118Item(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1190(pub i64);
impl ::core::ops::Deref for Root1190 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1190 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1190(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root11912(pub f64);
impl ::core::ops::Deref for Root11912 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root11912 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root11912: non-finite number")); }
        
        Ok(Root11912(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root11913(pub f64);
impl ::core::ops::Deref for Root11913 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root11913 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root11913: non-finite number")); }
        
        Ok(Root11913(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1191(
    pub Null,
    pub Null,
    pub Root11912,
    pub Root11913,
);

impl<'de> ::serde::Deserialize<'de> for Root1191 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1191;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1191, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root11912 = match seq.next_element::<Root11912>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root11913 = match seq.next_element::<Root11913>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1191(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root119(
    pub Root1190,
    pub Root1191,
);

impl<'de> ::serde::Deserialize<'de> for Root119 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root119;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root119, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1190 = match seq.next_element::<Root1190>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1191 = match seq.next_element::<Root1191>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root119(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root125001Item0(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root125001Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root125001Item0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root125001Item0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root125001Item0(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root125001Item1(
    pub ::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
);

impl<'de> ::serde::Deserialize<'de> for Root125001Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root125001Item1;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root125001Item1, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<::std::string::String>>> = match seq.next_element::<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root125001Item1(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root125001Item(
    pub Root125001Item0,
    pub Root125001Item1,
);

impl<'de> ::serde::Deserialize<'de> for Root125001Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root125001Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root125001Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root125001Item0 = match seq.next_element::<Root125001Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root125001Item1 = match seq.next_element::<Root125001Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root125001Item(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root125003(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root125003 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root125003;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root125003, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root125003(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root125004(pub i64);
impl ::core::ops::Deref for Root125004 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root125004 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root125004(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root12500(
    pub Null,
    pub ::std::vec::Vec<Root125001Item>,
    pub Null,
    pub ::core::option::Option<Root125003>,
    pub Root125004,
);

impl<'de> ::serde::Deserialize<'de> for Root12500 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root12500;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root12500, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: ::std::vec::Vec<Root125001Item> = match seq.next_element::<::std::vec::Vec<Root125001Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: ::core::option::Option<Root125003> = match seq.next_element::<::core::option::Option<Root125003>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root125004 = match seq.next_element::<Root125004>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root12500(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1250(
    pub Root12500,
);

impl<'de> ::serde::Deserialize<'de> for Root1250 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1250;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1250, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root12500 = match seq.next_element::<Root12500>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1250(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root125(
    pub Root1250,
);

impl<'de> ::serde::Deserialize<'de> for Root125 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root125;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root125, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1250 = match seq.next_element::<Root1250>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root125(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root130(pub i64);
impl ::core::ops::Deref for Root130 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root130 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root130(x))
    }
}
/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root13400Item(
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root13400Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root13400Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root13400Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root13400Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root13401(pub i64);
impl ::core::ops::Deref for Root13401 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root13401 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root13401(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root13402(pub i64);
impl ::core::ops::Deref for Root13402 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root13402 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root13402(x))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1340(
    pub ::std::vec::Vec<Root13400Item>,
    pub Root13401,
    pub Root13402,
);

impl<'de> ::serde::Deserialize<'de> for Root1340 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1340;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1340, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root13400Item> = match seq.next_element::<::std::vec::Vec<Root13400Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root13401 = match seq.next_element::<Root13401>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root13402 = match seq.next_element::<Root13402>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1340(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root134(
    pub Root1340,
);

impl<'de> ::serde::Deserialize<'de> for Root134 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root134;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root134, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1340 = match seq.next_element::<Root1340>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root134(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root136(pub i64);
impl ::core::ops::Deref for Root136 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root136 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root136(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1421010ItemAlt0Item0(pub i64);
impl ::core::ops::Deref for Root1421010ItemAlt0Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421010ItemAlt0Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1421010ItemAlt0Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1421010ItemAlt0Item1(pub i64);
impl ::core::ops::Deref for Root1421010ItemAlt0Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421010ItemAlt0Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1421010ItemAlt0Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1421010ItemAlt0Item200(pub i64);
impl ::core::ops::Deref for Root1421010ItemAlt0Item200 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421010ItemAlt0Item200 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1421010ItemAlt0Item200(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421010ItemAlt0Item20(
    pub Root1421010ItemAlt0Item200,
);

impl<'de> ::serde::Deserialize<'de> for Root1421010ItemAlt0Item20 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421010ItemAlt0Item20;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421010ItemAlt0Item20, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421010ItemAlt0Item200 = match seq.next_element::<Root1421010ItemAlt0Item200>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421010ItemAlt0Item20(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421010ItemAlt0Item2(
    pub Root1421010ItemAlt0Item20,
);

impl<'de> ::serde::Deserialize<'de> for Root1421010ItemAlt0Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421010ItemAlt0Item2;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421010ItemAlt0Item2, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421010ItemAlt0Item20 = match seq.next_element::<Root1421010ItemAlt0Item20>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421010ItemAlt0Item2(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421010ItemAlt0Item(
    pub Root1421010ItemAlt0Item0,
    pub Root1421010ItemAlt0Item1,
    pub Root1421010ItemAlt0Item2,
);

impl<'de> ::serde::Deserialize<'de> for Root1421010ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421010ItemAlt0Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421010ItemAlt0Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421010ItemAlt0Item0 = match seq.next_element::<Root1421010ItemAlt0Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root1421010ItemAlt0Item1 = match seq.next_element::<Root1421010ItemAlt0Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root1421010ItemAlt0Item2 = match seq.next_element::<Root1421010ItemAlt0Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421010ItemAlt0Item(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root1421010Item {
    V0(::std::vec::Vec<Root1421010ItemAlt0Item>),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root1421010Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root1421010ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root1421010Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root1421010ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root1421010Item::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1421012(pub ::std::string::String);
impl ::core::ops::Deref for Root1421012 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421012 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1421012: expected URI scheme"));
        }
        Ok(Root1421012(s))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root142101(
    pub ::std::vec::Vec<Root1421010Item>,
    pub Null,
    pub Root1421012,
);

impl<'de> ::serde::Deserialize<'de> for Root142101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root142101;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root142101, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root1421010Item> = match seq.next_element::<::std::vec::Vec<Root1421010Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root1421012 = match seq.next_element::<Root1421012>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root142101(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root142103(pub i64);
impl ::core::ops::Deref for Root142103 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root142103 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root142103(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root142104(pub i64);
impl ::core::ops::Deref for Root142104 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root142104 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root142104(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1421060Item0ItemAlt000(pub i64);
impl ::core::ops::Deref for Root1421060Item0ItemAlt000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1421060Item0ItemAlt000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1421060Item0ItemAlt001(pub i64);
impl ::core::ops::Deref for Root1421060Item0ItemAlt001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt001 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1421060Item0ItemAlt001(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1421060Item0ItemAlt00210(pub i64);
impl ::core::ops::Deref for Root1421060Item0ItemAlt00210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt00210 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1421060Item0ItemAlt00210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1421060Item0ItemAlt00211(pub i64);
impl ::core::ops::Deref for Root1421060Item0ItemAlt00211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt00211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1421060Item0ItemAlt00211(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421060Item0ItemAlt0021(
    pub Root1421060Item0ItemAlt00210,
    pub Root1421060Item0ItemAlt00211,
);

impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt0021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421060Item0ItemAlt0021;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421060Item0ItemAlt0021, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421060Item0ItemAlt00210 = match seq.next_element::<Root1421060Item0ItemAlt00210>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1421060Item0ItemAlt00211 = match seq.next_element::<Root1421060Item0ItemAlt00211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421060Item0ItemAlt0021(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421060Item0ItemAlt002(
    pub Null,
    pub Root1421060Item0ItemAlt0021,
);

impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt002 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421060Item0ItemAlt002;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421060Item0ItemAlt002, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1421060Item0ItemAlt0021 = match seq.next_element::<Root1421060Item0ItemAlt0021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421060Item0ItemAlt002(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421060Item0ItemAlt00(
    pub Root1421060Item0ItemAlt000,
    pub Root1421060Item0ItemAlt001,
    pub Root1421060Item0ItemAlt002,
);

impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt00 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421060Item0ItemAlt00;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421060Item0ItemAlt00, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421060Item0ItemAlt000 = match seq.next_element::<Root1421060Item0ItemAlt000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root1421060Item0ItemAlt001 = match seq.next_element::<Root1421060Item0ItemAlt001>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root1421060Item0ItemAlt002 = match seq.next_element::<Root1421060Item0ItemAlt002>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421060Item0ItemAlt00(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421060Item0ItemAlt0(
    pub Root1421060Item0ItemAlt00,
);

impl<'de> ::serde::Deserialize<'de> for Root1421060Item0ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421060Item0ItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421060Item0ItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421060Item0ItemAlt00 = match seq.next_element::<Root1421060Item0ItemAlt00>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421060Item0ItemAlt0(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[derive(Debug, Clone, serde::Serialize)]
pub enum Root1421060Item0Item {
    V0(Root1421060Item0ItemAlt0),
    V1(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root1421060Item0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root1421060Item0ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root1421060Item0Item::V0(x)),
                Err(e) => errs.push((0, "Root1421060Item0ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root1421060Item0Item::V1(x)),
                Err(e) => errs.push((1, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1421060Item300(pub ::std::string::String);
impl ::core::ops::Deref for Root1421060Item300 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421060Item300 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1421060Item300: expected URI scheme"));
        }
        Ok(Root1421060Item300(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1421060Item301(pub ::std::string::String);
impl ::core::ops::Deref for Root1421060Item301 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1421060Item301 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1421060Item301: expected URI scheme"));
        }
        Ok(Root1421060Item301(s))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421060Item30(
    pub Root1421060Item300,
    pub Root1421060Item301,
);

impl<'de> ::serde::Deserialize<'de> for Root1421060Item30 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421060Item30;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421060Item30, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421060Item300 = match seq.next_element::<Root1421060Item300>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1421060Item301 = match seq.next_element::<Root1421060Item301>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421060Item30(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421060Item3(
    pub Root1421060Item30,
);

impl<'de> ::serde::Deserialize<'de> for Root1421060Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421060Item3;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421060Item3, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1421060Item30 = match seq.next_element::<Root1421060Item30>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421060Item3(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required first 0 slots); accepts 0..=5 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421060Item(
    pub ::core::option::Option<::std::vec::Vec<Root1421060Item0Item>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root1421060Item3>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root1421060Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421060Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421060Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::vec::Vec<Root1421060Item0Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root1421060Item0Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root1421060Item3> = match seq.next_element::<::core::option::Option<Root1421060Item3>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root1421060Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root142106(
    pub ::std::vec::Vec<Root1421060Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root142106 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root142106;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root142106, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root1421060Item> = match seq.next_element::<::std::vec::Vec<Root1421060Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root142106(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root142109(pub i64);
impl ::core::ops::Deref for Root142109 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root142109 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root142109(x))
    }
}
/// tuple len=13 (required exactly 13)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root14210(
    pub Null,
    pub ::core::option::Option<Root142101>,
    pub Null,
    pub ::core::option::Option<Root142103>,
    pub ::core::option::Option<Root142104>,
    pub Null,
    pub ::core::option::Option<Root142106>,
    pub Null,
    pub Null,
    pub ::core::option::Option<Root142109>,
    pub ::core::option::Option<::std::string::String>,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root14210 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root14210;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 13")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root14210, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 13 elements")), };
                let a1: ::core::option::Option<Root142101> = match seq.next_element::<::core::option::Option<Root142101>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 13 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 13 elements")), };
                let a3: ::core::option::Option<Root142103> = match seq.next_element::<::core::option::Option<Root142103>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 13 elements")), };
                let a4: ::core::option::Option<Root142104> = match seq.next_element::<::core::option::Option<Root142104>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 13 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 13 elements")), };
                let a6: ::core::option::Option<Root142106> = match seq.next_element::<::core::option::Option<Root142106>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 13 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 13 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 13 elements")), };
                let a9: ::core::option::Option<Root142109> = match seq.next_element::<::core::option::Option<Root142109>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 13 elements")), };
                let a10: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 13 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 13 elements")), };
                let a12: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 13 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root14210(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1421(
    pub Root14210,
);

impl<'de> ::serde::Deserialize<'de> for Root1421 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1421;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1421, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root14210 = match seq.next_element::<Root14210>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1421(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root142(
    pub Null,
    pub Root1421,
);

impl<'de> ::serde::Deserialize<'de> for Root142 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root142;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root142, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1421 = match seq.next_element::<Root1421>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root142(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1460(pub i64);
impl ::core::ops::Deref for Root1460 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1460 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1460(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root146(
    pub Root1460,
);

impl<'de> ::serde::Deserialize<'de> for Root146 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root146;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root146, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1460 = match seq.next_element::<Root1460>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root146(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root157(pub ::std::string::String);
impl ::core::ops::Deref for Root157 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root157 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root157: expected URI scheme"));
        }
        Ok(Root157(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1600(pub i64);
impl ::core::ops::Deref for Root1600 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1600 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1600(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root160(
    pub Root1600,
);

impl<'de> ::serde::Deserialize<'de> for Root160 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root160;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root160, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1600 = match seq.next_element::<Root1600>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root160(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root161(
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root161 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root161;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root161, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root161(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root16400(pub i64);
impl ::core::ops::Deref for Root16400 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root16400 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root16400(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1640(
    pub Root16400,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1640 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1640;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1640, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root16400 = match seq.next_element::<Root16400>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1640(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root164(
    pub Root1640,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root164 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root164;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root164, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1640 = match seq.next_element::<Root1640>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root164(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1650(pub i64);
impl ::core::ops::Deref for Root1650 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1650 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1650(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root165(
    pub Root1650,
);

impl<'de> ::serde::Deserialize<'de> for Root165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root165;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root165, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1650 = match seq.next_element::<Root1650>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root165(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root170(pub i64);
impl ::core::ops::Deref for Root170 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root170 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root170(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1740(pub ::std::string::String);
impl ::core::ops::Deref for Root1740 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1740 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1740: expected URI scheme"));
        }
        Ok(Root1740(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root174(
    pub Root1740,
);

impl<'de> ::serde::Deserialize<'de> for Root174 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root174;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root174, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1740 = match seq.next_element::<Root1740>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root174(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1780101(pub i64);
impl ::core::ops::Deref for Root1780101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1780101 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1780101(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root178010(
    pub ::std::string::String,
    pub Root1780101,
);

impl<'de> ::serde::Deserialize<'de> for Root178010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root178010;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root178010, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1780101 = match seq.next_element::<Root1780101>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root178010(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1780111(pub i64);
impl ::core::ops::Deref for Root1780111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1780111 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1780111(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root178011(
    pub ::std::string::String,
    pub Root1780111,
);

impl<'de> ::serde::Deserialize<'de> for Root178011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root178011;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root178011, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1780111 = match seq.next_element::<Root1780111>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root178011(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root17801(
    pub Root178010,
    pub Root178011,
);

impl<'de> ::serde::Deserialize<'de> for Root17801 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root17801;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root17801, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root178010 = match seq.next_element::<Root178010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root178011 = match seq.next_element::<Root178011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root17801(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root178050(pub ::std::string::String);
impl ::core::ops::Deref for Root178050 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root178050 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root178050: expected URI scheme"));
        }
        Ok(Root178050(s))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root17805(
    pub Root178050,
    pub Null,
    pub Null,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root17805 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root17805;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root17805, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root178050 = match seq.next_element::<Root178050>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root17805(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1780(
    pub ::std::string::String,
    pub Root17801,
    pub Null,
    pub ::std::string::String,
    pub Null,
    pub Root17805,
);

impl<'de> ::serde::Deserialize<'de> for Root1780 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1780;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1780, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Root17801 = match seq.next_element::<Root17801>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root17805 = match seq.next_element::<Root17805>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1780(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root178(
    pub Root1780,
);

impl<'de> ::serde::Deserialize<'de> for Root178 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root178;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root178, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1780 = match seq.next_element::<Root1780>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root178(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root181(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root181 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root181;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root181, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root181(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root183000(pub i64);
impl ::core::ops::Deref for Root183000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root183000 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root183000(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root183001Item(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root183001Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root183001Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root183001Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root183001Item(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root18300(
    pub Root183000,
    pub ::std::vec::Vec<Root183001Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root18300 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root18300;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root18300, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root183000 = match seq.next_element::<Root183000>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<Root183001Item> = match seq.next_element::<::std::vec::Vec<Root183001Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root18300(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root183010(pub i64);
impl ::core::ops::Deref for Root183010 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root183010 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root183010(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1830110(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1830110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1830110;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1830110, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1830110(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root183011(
    pub Root1830110,
);

impl<'de> ::serde::Deserialize<'de> for Root183011 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root183011;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root183011, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1830110 = match seq.next_element::<Root1830110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root183011(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root18301(
    pub Root183010,
    pub Root183011,
);

impl<'de> ::serde::Deserialize<'de> for Root18301 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root18301;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root18301, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root183010 = match seq.next_element::<Root183010>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root183011 = match seq.next_element::<Root183011>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root18301(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root183020(pub i64);
impl ::core::ops::Deref for Root183020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root183020 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root183020(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1830210(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1830210 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1830210;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1830210, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1830210(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root183021(
    pub Root1830210,
);

impl<'de> ::serde::Deserialize<'de> for Root183021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root183021;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root183021, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1830210 = match seq.next_element::<Root1830210>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root183021(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root18302(
    pub Root183020,
    pub Root183021,
);

impl<'de> ::serde::Deserialize<'de> for Root18302 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root18302;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root18302, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root183020 = match seq.next_element::<Root183020>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root183021 = match seq.next_element::<Root183021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root18302(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root183030(pub i64);
impl ::core::ops::Deref for Root183030 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root183030 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root183030(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1830310(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1830310 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1830310;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1830310, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1830310(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root183031(
    pub Root1830310,
);

impl<'de> ::serde::Deserialize<'de> for Root183031 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root183031;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root183031, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1830310 = match seq.next_element::<Root1830310>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root183031(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root18303(
    pub Root183030,
    pub Root183031,
);

impl<'de> ::serde::Deserialize<'de> for Root18303 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root18303;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root18303, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root183030 = match seq.next_element::<Root183030>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root183031 = match seq.next_element::<Root183031>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root18303(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1830(
    pub Root18300,
    pub Root18301,
    pub Root18302,
    pub Root18303,
);

impl<'de> ::serde::Deserialize<'de> for Root1830 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1830;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1830, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root18300 = match seq.next_element::<Root18300>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Root18301 = match seq.next_element::<Root18301>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root18302 = match seq.next_element::<Root18302>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root18303 = match seq.next_element::<Root18303>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1830(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1831(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1831 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1831;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1831, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1831(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root183(
    pub Root1830,
    pub Root1831,
);

impl<'de> ::serde::Deserialize<'de> for Root183 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root183;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root183, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1830 = match seq.next_element::<Root1830>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1831 = match seq.next_element::<Root1831>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root183(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1961Item1(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1961Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1961Item1;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1961Item1, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1961Item1(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1961Item20(pub ::std::string::String);
impl ::core::ops::Deref for Root1961Item20 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1961Item20 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1961Item20: expected URI scheme"));
        }
        Ok(Root1961Item20(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1961Item2(
    pub Root1961Item20,
);

impl<'de> ::serde::Deserialize<'de> for Root1961Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1961Item2;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1961Item2, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1961Item20 = match seq.next_element::<Root1961Item20>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1961Item2(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1961Item3(pub ::std::string::String);
impl ::core::ops::Deref for Root1961Item3 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1961Item3 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1961Item3: expected URI scheme"));
        }
        Ok(Root1961Item3(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1961Item4(pub ::std::string::String);
impl ::core::ops::Deref for Root1961Item4 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1961Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1961Item4: expected URI scheme"));
        }
        Ok(Root1961Item4(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1961Item100(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1961Item100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1961Item100;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1961Item100, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1961Item100(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1961Item10(
    pub Root1961Item100,
);

impl<'de> ::serde::Deserialize<'de> for Root1961Item10 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1961Item10;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1961Item10, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1961Item100 = match seq.next_element::<Root1961Item100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1961Item10(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1961Item11(pub i64);
impl ::core::ops::Deref for Root1961Item11 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1961Item11 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1961Item11(x))
    }
}
/// tuple len=13 (required first 0 slots); accepts 0..=13 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1961Item(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root1961Item1>,
    pub ::core::option::Option<Root1961Item2>,
    pub ::core::option::Option<Root1961Item3>,
    pub ::core::option::Option<Root1961Item4>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root1961Item10>,
    pub ::core::option::Option<Root1961Item11>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root1961Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1961Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=13")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1961Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root1961Item1> = match seq.next_element::<::core::option::Option<Root1961Item1>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Root1961Item2> = match seq.next_element::<::core::option::Option<Root1961Item2>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root1961Item3> = match seq.next_element::<::core::option::Option<Root1961Item3>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root1961Item4> = match seq.next_element::<::core::option::Option<Root1961Item4>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Root1961Item10> = match seq.next_element::<::core::option::Option<Root1961Item10>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Root1961Item11> = match seq.next_element::<::core::option::Option<Root1961Item11>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root1961Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1963Item0(pub i64);
impl ::core::ops::Deref for Root1963Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1963Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1963Item0(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1963Item11(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1963Item11 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1963Item11;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1963Item11, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1963Item11(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1963Item120(pub ::std::string::String);
impl ::core::ops::Deref for Root1963Item120 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1963Item120 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1963Item120: expected URI scheme"));
        }
        Ok(Root1963Item120(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1963Item12(
    pub Root1963Item120,
);

impl<'de> ::serde::Deserialize<'de> for Root1963Item12 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1963Item12;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1963Item12, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1963Item120 = match seq.next_element::<Root1963Item120>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1963Item12(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1963Item13(pub ::std::string::String);
impl ::core::ops::Deref for Root1963Item13 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1963Item13 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1963Item13: expected URI scheme"));
        }
        Ok(Root1963Item13(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root1963Item14(pub ::std::string::String);
impl ::core::ops::Deref for Root1963Item14 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1963Item14 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root1963Item14: expected URI scheme"));
        }
        Ok(Root1963Item14(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1963Item1100(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root1963Item1100 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1963Item1100;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1963Item1100, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1963Item1100(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1963Item110(
    pub Root1963Item1100,
);

impl<'de> ::serde::Deserialize<'de> for Root1963Item110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1963Item110;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1963Item110, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1963Item1100 = match seq.next_element::<Root1963Item1100>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1963Item110(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root1963Item111(pub i64);
impl ::core::ops::Deref for Root1963Item111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root1963Item111 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root1963Item111(x))
    }
}
/// tuple len=13 (required first 0 slots); accepts 0..=13 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1963Item1(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root1963Item11>,
    pub ::core::option::Option<Root1963Item12>,
    pub ::core::option::Option<Root1963Item13>,
    pub ::core::option::Option<Root1963Item14>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root1963Item110>,
    pub ::core::option::Option<Root1963Item111>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root1963Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1963Item1;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=13")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1963Item1, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Root1963Item11> = match seq.next_element::<::core::option::Option<Root1963Item11>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Root1963Item12> = match seq.next_element::<::core::option::Option<Root1963Item12>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Root1963Item13> = match seq.next_element::<::core::option::Option<Root1963Item13>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root1963Item14> = match seq.next_element::<::core::option::Option<Root1963Item14>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<Root1963Item110> = match seq.next_element::<::core::option::Option<Root1963Item110>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<Root1963Item111> = match seq.next_element::<::core::option::Option<Root1963Item111>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root1963Item1(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root1963Item(
    pub Root1963Item0,
    pub Root1963Item1,
);

impl<'de> ::serde::Deserialize<'de> for Root1963Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root1963Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root1963Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root1963Item0 = match seq.next_element::<Root1963Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: Root1963Item1 = match seq.next_element::<Root1963Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root1963Item(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root196(
    pub Null,
    pub ::std::vec::Vec<Root1961Item>,
    pub Null,
    pub ::std::vec::Vec<Root1963Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root196 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root196;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root196, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: ::std::vec::Vec<Root1961Item> = match seq.next_element::<::std::vec::Vec<Root1961Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: ::std::vec::Vec<Root1963Item> = match seq.next_element::<::std::vec::Vec<Root1963Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root196(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item(pub i64);
impl ::core::ops::Deref for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt01Item(pub i64);
impl ::core::ops::Deref for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt01Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt01Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt01Item(x))
    }
}
/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0(
    pub ::core::option::Option<::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item>>,
    pub ::std::vec::Vec<::core::option::Option<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt01Item>>,
);

impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt00Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::vec::Vec<::core::option::Option<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt01Item>> = match seq.next_element::<::std::vec::Vec<::core::option::Option<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt01Item>>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item {
    V0(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0),
    V1(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt0", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root203ItemAlt0ItemAlt0ItemAlt0Item {
    V0(::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>),
    V1(Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root203ItemAlt0ItemAlt0ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root203ItemAlt0ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root203ItemAlt0ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root203ItemAlt0ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root203ItemAlt0ItemAlt0Item {
    V0(::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0Item>),
    V1(Root203ItemAlt0ItemAlt0ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root203ItemAlt0ItemAlt0ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root203ItemAlt0ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root203ItemAlt0ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0ItemAlt0Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root203ItemAlt0ItemAlt1(pub i64);
impl ::core::ops::Deref for Root203ItemAlt0ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root203ItemAlt0ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root203ItemAlt0Item {
    V0(::std::vec::Vec<Root203ItemAlt0ItemAlt0Item>),
    V1(Root203ItemAlt0ItemAlt1),
}

impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt0Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<Root203ItemAlt0ItemAlt0Item>>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<Root203ItemAlt0ItemAlt0Item>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root203ItemAlt0ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root203ItemAlt0Item::V1(x)),
                Err(e) => errs.push((1, "Root203ItemAlt0ItemAlt1", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root203ItemAlt1(pub i64);
impl ::core::ops::Deref for Root203ItemAlt1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root203ItemAlt1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root203ItemAlt1(x))
    }
}
#[derive(Debug, Clone, serde::Serialize)]
pub enum Root203Item {
    V0(::std::vec::Vec<::core::option::Option<Root203ItemAlt0Item>>),
    V1(Root203ItemAlt1),
    V2(::std::string::String),
}

impl<'de> ::serde::Deserialize<'de> for Root203Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let val = ::serde_json::Value::deserialize(de)?;
        let mut errs: ::std::vec::Vec<(usize, &'static str, ::std::string::String)> = ::std::vec::Vec::new();
        {
            match ::serde_json::from_value::<::std::vec::Vec<::core::option::Option<Root203ItemAlt0Item>>>(val.clone()) {
                Ok(x) => return Ok(Root203Item::V0(x)),
                Err(e) => errs.push((0, "::std::vec::Vec<::core::option::Option<Root203ItemAlt0Item>>", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<Root203ItemAlt1>(val.clone()) {
                Ok(x) => return Ok(Root203Item::V1(x)),
                Err(e) => errs.push((1, "Root203ItemAlt1", e.to_string())),
            }
        }
        {
            match ::serde_json::from_value::<::std::string::String>(val.clone()) {
                Ok(x) => return Ok(Root203Item::V2(x)),
                Err(e) => errs.push((2, "::std::string::String", e.to_string())),
            }
        }
        if errs.is_empty() {
            return Err(::serde::de::Error::custom("no union arm matched (no errors captured)"));
        }
        let mut s = ::std::string::String::from("no union arm matched:\n");
        for (idx, ty, msg) in errs {
            s.push_str(&::std::format!("  - arm {idx} ({ty}) → {msg}\n"));
        }
        Err(::serde::de::Error::custom(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root205(pub i64);
impl ::core::ops::Deref for Root205 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root205 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root205(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root20802(pub f64);
impl ::core::ops::Deref for Root20802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root20802 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root20802: non-finite number")); }
        
        Ok(Root20802(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root20803(pub f64);
impl ::core::ops::Deref for Root20803 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root20803 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root20803: non-finite number")); }
        
        Ok(Root20803(x))
    }
}
/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2080(
    pub Null,
    pub Null,
    pub Root20802,
    pub Root20803,
);

impl<'de> ::serde::Deserialize<'de> for Root2080 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2080;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2080, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Root20802 = match seq.next_element::<Root20802>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root20803 = match seq.next_element::<Root20803>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2080(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root208(
    pub Root2080,
);

impl<'de> ::serde::Deserialize<'de> for Root208 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root208;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root208, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2080 = match seq.next_element::<Root2080>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root208(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root214(pub i64);
impl ::core::ops::Deref for Root214 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root214 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root214(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root2260(pub ::std::string::String);
impl ::core::ops::Deref for Root2260 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2260 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2260: expected URI scheme"));
        }
        Ok(Root2260(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2266(pub i64);
impl ::core::ops::Deref for Root2266 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2266 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2266(x))
    }
}
/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root226(
    pub Root2260,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2266,
);

impl<'de> ::serde::Deserialize<'de> for Root226 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root226;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root226, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2260 = match seq.next_element::<Root2260>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root2266 = match seq.next_element::<Root2266>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root226(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required first 0 slots); accepts 0..=7 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2270(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
);

impl<'de> ::serde::Deserialize<'de> for Root2270 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2270;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2270, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root2270(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root227(
    pub Root2270,
);

impl<'de> ::serde::Deserialize<'de> for Root227 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root227;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root227, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2270 = match seq.next_element::<Root2270>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root227(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root23060(pub ::std::string::String);
impl ::core::ops::Deref for Root23060 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root23060 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root23060: expected URI scheme"));
        }
        Ok(Root23060(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2306(
    pub Root23060,
);

impl<'de> ::serde::Deserialize<'de> for Root2306 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2306;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2306, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root23060 = match seq.next_element::<Root23060>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2306(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2302110(pub i64);
impl ::core::ops::Deref for Root2302110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2302110 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2302110(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root230211(
    pub Root2302110,
);

impl<'de> ::serde::Deserialize<'de> for Root230211 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root230211;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root230211, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2302110 = match seq.next_element::<Root2302110>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root230211(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root230214400(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root230214400 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root230214400;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root230214400, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root230214400(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root230214401(pub ::std::string::String);
impl ::core::ops::Deref for Root230214401 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root230214401 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root230214401: expected URI scheme"));
        }
        Ok(Root230214401(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root230214402(pub ::std::string::String);
impl ::core::ops::Deref for Root230214402 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root230214402 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root230214402: expected URI scheme"));
        }
        Ok(Root230214402(s))
    }
}
/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root23021440(
    pub Root230214400,
    pub Root230214401,
    pub Root230214402,
);

impl<'de> ::serde::Deserialize<'de> for Root23021440 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root23021440;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root23021440, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root230214400 = match seq.next_element::<Root230214400>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root230214401 = match seq.next_element::<Root230214401>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root230214402 = match seq.next_element::<Root230214402>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root23021440(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2302144(
    pub Root23021440,
);

impl<'de> ::serde::Deserialize<'de> for Root2302144 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2302144;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2302144, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root23021440 = match seq.next_element::<Root23021440>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2302144(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root230214(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2302144,
);

impl<'de> ::serde::Deserialize<'de> for Root230214 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root230214;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root230214, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root2302144 = match seq.next_element::<Root2302144>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root230214(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root230216530(pub i64);
impl ::core::ops::Deref for Root230216530 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root230216530 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root230216530(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root23021653(
    pub Root230216530,
);

impl<'de> ::serde::Deserialize<'de> for Root23021653 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root23021653;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root23021653, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root230216530 = match seq.next_element::<Root230216530>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root23021653(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=4 (required exactly 4)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2302165(
    pub Null,
    pub Null,
    pub Null,
    pub Root23021653,
);

impl<'de> ::serde::Deserialize<'de> for Root2302165 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2302165;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 4")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2302165, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 4 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 4 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 4 elements")), };
                let a3: Root23021653 = match seq.next_element::<Root23021653>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 4 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2302165(
                    a0,
                    a1,
                    a2,
                    a3,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root230216(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2302165,
);

impl<'de> ::serde::Deserialize<'de> for Root230216 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root230216;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root230216, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: Root2302165 = match seq.next_element::<Root2302165>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root230216(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root23021(
    pub Null,
    pub Root230211,
    pub Null,
    pub Null,
    pub Root230214,
    pub Null,
    pub Root230216,
);

impl<'de> ::serde::Deserialize<'de> for Root23021 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root23021;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root23021, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Root230211 = match seq.next_element::<Root230211>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Root230214 = match seq.next_element::<Root230214>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: Root230216 = match seq.next_element::<Root230216>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root23021(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=22 (required exactly 22)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root230(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2306,
    pub Null,
    pub Null,
    pub ::std::string::String,
    pub ::std::string::String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root23021,
);

impl<'de> ::serde::Deserialize<'de> for Root230 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root230;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 22")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root230, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 22 elements")), };
                let a1: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 22 elements")), };
                let a2: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 22 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 22 elements")), };
                let a4: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 22 elements")), };
                let a5: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 22 elements")), };
                let a6: Root2306 = match seq.next_element::<Root2306>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 22 elements")), };
                let a7: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(7, &"expected 22 elements")), };
                let a8: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(8, &"expected 22 elements")), };
                let a9: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(9, &"expected 22 elements")), };
                let a10: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(10, &"expected 22 elements")), };
                let a11: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(11, &"expected 22 elements")), };
                let a12: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(12, &"expected 22 elements")), };
                let a13: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(13, &"expected 22 elements")), };
                let a14: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(14, &"expected 22 elements")), };
                let a15: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(15, &"expected 22 elements")), };
                let a16: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(16, &"expected 22 elements")), };
                let a17: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(17, &"expected 22 elements")), };
                let a18: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(18, &"expected 22 elements")), };
                let a19: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(19, &"expected 22 elements")), };
                let a20: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(20, &"expected 22 elements")), };
                let a21: Root23021 = match seq.next_element::<Root23021>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(21, &"expected 22 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root230(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required exactly 2)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2450Item0(
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2450Item0 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2450Item0;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 2")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2450Item0, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 2 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 2 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2450Item0(
                    a0,
                    a1,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, serde::Serialize)]
pub struct Root2450Item1(pub f64);
impl ::core::ops::Deref for Root2450Item1 {
    type Target = f64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2450Item1 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <f64 as ::serde::Deserialize>::deserialize(de)?;
        if !x.is_finite() { return Err(::serde::de::Error::custom("Root2450Item1: non-finite number")); }
        
        Ok(Root2450Item1(x))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2450Item20(
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2450Item20 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2450Item20;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2450Item20, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2450Item20(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2450Item2(
    pub Root2450Item20,
);

impl<'de> ::serde::Deserialize<'de> for Root2450Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2450Item2;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2450Item2, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2450Item20 = match seq.next_element::<Root2450Item20>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2450Item2(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2450Item(
    pub Root2450Item0,
    pub Root2450Item1,
    pub Root2450Item2,
);

impl<'de> ::serde::Deserialize<'de> for Root2450Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2450Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2450Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2450Item0 = match seq.next_element::<Root2450Item0>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: Root2450Item1 = match seq.next_element::<Root2450Item1>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root2450Item2 = match seq.next_element::<Root2450Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2450Item(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root245(
    pub ::std::vec::Vec<Root2450Item>,
);

impl<'de> ::serde::Deserialize<'de> for Root245 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root245;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root245, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::vec::Vec<Root2450Item> = match seq.next_element::<::std::vec::Vec<Root2450Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root245(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root2471Item20(pub ::std::string::String);
impl ::core::ops::Deref for Root2471Item20 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2471Item20 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2471Item20: expected URI scheme"));
        }
        Ok(Root2471Item20(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2471Item2(
    pub Root2471Item20,
);

impl<'de> ::serde::Deserialize<'de> for Root2471Item2 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2471Item2;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2471Item2, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2471Item20 = match seq.next_element::<Root2471Item20>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2471Item2(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root2471Item401(pub ::std::string::String);
impl ::core::ops::Deref for Root2471Item401 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2471Item401 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2471Item401: expected URI scheme"));
        }
        Ok(Root2471Item401(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize)]
pub struct Root2471Item40220(pub ::std::string::String);
impl ::core::ops::Deref for Root2471Item40220 {
    type Target = ::std::string::String;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2471Item40220 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let s = <::std::string::String as ::serde::Deserialize>::deserialize(de)?;
        if !(s.starts_with("http://") || s.starts_with("https://") || s.starts_with("mailto:") || s.starts_with("tel:")) {
            return Err(::serde::de::Error::custom("Root2471Item40220: expected URI scheme"));
        }
        Ok(Root2471Item40220(s))
    }
}
/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2471Item4022(
    pub Root2471Item40220,
);

impl<'de> ::serde::Deserialize<'de> for Root2471Item4022 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2471Item4022;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2471Item4022, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2471Item40220 = match seq.next_element::<Root2471Item40220>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2471Item4022(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=3 (required exactly 3)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2471Item402(
    pub ::std::string::String,
    pub ::std::string::String,
    pub Root2471Item4022,
);

impl<'de> ::serde::Deserialize<'de> for Root2471Item402 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2471Item402;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 3")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2471Item402, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 3 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 3 elements")), };
                let a2: Root2471Item4022 = match seq.next_element::<Root2471Item4022>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 3 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2471Item402(
                    a0,
                    a1,
                    a2,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2471Item403(pub i64);
impl ::core::ops::Deref for Root2471Item403 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2471Item403 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2471Item403(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2471Item404(pub i64);
impl ::core::ops::Deref for Root2471Item404 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2471Item404 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2471Item404(x))
    }
}
/// tuple len=7 (required exactly 7)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2471Item40(
    pub ::std::string::String,
    pub Root2471Item401,
    pub Root2471Item402,
    pub Root2471Item403,
    pub Root2471Item404,
    pub ::std::string::String,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2471Item40 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2471Item40;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 7")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2471Item40, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 7 elements")), };
                let a1: Root2471Item401 = match seq.next_element::<Root2471Item401>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 7 elements")), };
                let a2: Root2471Item402 = match seq.next_element::<Root2471Item402>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 7 elements")), };
                let a3: Root2471Item403 = match seq.next_element::<Root2471Item403>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 7 elements")), };
                let a4: Root2471Item404 = match seq.next_element::<Root2471Item404>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 7 elements")), };
                let a5: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 7 elements")), };
                let a6: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(6, &"expected 7 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2471Item40(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required exactly 1)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2471Item4(
    pub Root2471Item40,
);

impl<'de> ::serde::Deserialize<'de> for Root2471Item4 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2471Item4;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 1")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2471Item4, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: Root2471Item40 = match seq.next_element::<Root2471Item40>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 1 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2471Item4(
                    a0,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=6 (required exactly 6)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root2471Item(
    pub ::std::string::String,
    pub ::std::string::String,
    pub Root2471Item2,
    pub ::std::string::String,
    pub Root2471Item4,
    pub ::std::string::String,
);

impl<'de> ::serde::Deserialize<'de> for Root2471Item {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root2471Item;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 6")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root2471Item, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 6 elements")), };
                let a1: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 6 elements")), };
                let a2: Root2471Item2 = match seq.next_element::<Root2471Item2>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 6 elements")), };
                let a3: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 6 elements")), };
                let a4: Root2471Item4 = match seq.next_element::<Root2471Item4>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 6 elements")), };
                let a5: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(5, &"expected 6 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root2471Item(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, serde::Serialize)]
pub struct Root2474(pub i64);
impl ::core::ops::Deref for Root2474 {
    type Target = i64;
    fn deref(&self) -> &Self::Target { &self.0 }
}
impl<'de> ::serde::Deserialize<'de> for Root2474 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let x = <i64 as ::serde::Deserialize>::deserialize(de)?;
        
        Ok(Root2474(x))
    }
}
/// tuple len=5 (required exactly 5)
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root247(
    pub ::std::string::String,
    pub ::std::vec::Vec<Root2471Item>,
    pub ::std::string::String,
    pub Null,
    pub Root2474,
);

impl<'de> ::serde::Deserialize<'de> for Root247 {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root247;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of fixed length 5")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root247, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(0, &"expected 5 elements")), };
                let a1: ::std::vec::Vec<Root2471Item> = match seq.next_element::<::std::vec::Vec<Root2471Item>>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(1, &"expected 5 elements")), };
                let a2: ::std::string::String = match seq.next_element::<::std::string::String>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(2, &"expected 5 elements")), };
                let a3: Null = match seq.next_element::<Null>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(3, &"expected 5 elements")), };
                let a4: Root2474 = match seq.next_element::<Root2474>()? { Some(v) => v, None => return Err(::serde::de::Error::invalid_length(4, &"expected 5 elements")), };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"unexpected extra elements"));
}
                Ok(Root247(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=248 (required first 0 slots); accepts 0..=248 elements
#[derive(Debug, Clone, serde::Serialize)]
pub struct Root(
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::vec::Vec<::std::string::String>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root4>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root7>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root9>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<::std::string::String>>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root24>,
    pub ::core::option::Option<Root25>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root32>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root34>,
    pub ::core::option::Option<Root35>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root37>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Root40>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<Root46Item>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root491>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root57>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root61>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root64>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root67>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root72>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root75>,
    pub ::core::option::Option<::std::vec::Vec<Root76Item>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root82>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<Root86Item>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root88>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root100ItemItemItem>>>>>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root105>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<Root118Item>>,
    pub ::core::option::Option<Root119>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root125>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root130>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root134>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root136>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root142>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<::std::string::String>>,
    pub ::core::option::Option<Root146>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root157>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root160>,
    pub ::core::option::Option<Root161>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root164>,
    pub ::core::option::Option<Root165>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root170>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root174>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root178>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root181>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root183>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root196>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::vec::Vec<::core::option::Option<Root203Item>>>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root205>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root208>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root214>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root226>,
    pub ::core::option::Option<Root227>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root230>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<::std::string::String>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root245>,
    pub ::core::option::Option<Null>,
    pub ::core::option::Option<Root247>,
);

impl<'de> ::serde::Deserialize<'de> for Root {
    fn deserialize<D>(de: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> ::serde::de::Visitor<'de> for V {
            type Value = Root;
            fn expecting(&self, f:&mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                write!(f, "array of length 0..=248")
            }
            fn visit_seq<A>(self, mut seq: A) -> ::std::result::Result<Root, A::Error>
            where
                A: ::serde::de::SeqAccess<'de>,
            {
                let a0: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a1: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a2: ::core::option::Option<::std::vec::Vec<::std::string::String>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::std::string::String>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a3: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a4: ::core::option::Option<Root4> = match seq.next_element::<::core::option::Option<Root4>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a5: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a6: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a7: ::core::option::Option<Root7> = match seq.next_element::<::core::option::Option<Root7>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a8: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a9: ::core::option::Option<Root9> = match seq.next_element::<::core::option::Option<Root9>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a10: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a11: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a12: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a13: ::core::option::Option<::std::vec::Vec<::std::string::String>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::std::string::String>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a14: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a15: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a16: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a17: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a18: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a19: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a20: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a21: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a22: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a23: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a24: ::core::option::Option<Root24> = match seq.next_element::<::core::option::Option<Root24>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a25: ::core::option::Option<Root25> = match seq.next_element::<::core::option::Option<Root25>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a26: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a27: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a28: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a29: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a30: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a31: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a32: ::core::option::Option<Root32> = match seq.next_element::<::core::option::Option<Root32>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a33: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a34: ::core::option::Option<Root34> = match seq.next_element::<::core::option::Option<Root34>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a35: ::core::option::Option<Root35> = match seq.next_element::<::core::option::Option<Root35>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a36: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a37: ::core::option::Option<Root37> = match seq.next_element::<::core::option::Option<Root37>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a38: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a39: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a40: ::core::option::Option<Root40> = match seq.next_element::<::core::option::Option<Root40>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a41: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a42: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a43: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a44: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a45: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a46: ::core::option::Option<::std::vec::Vec<Root46Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root46Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a47: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a48: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a49: ::core::option::Option<Root491> = match seq.next_element::<::core::option::Option<Root491>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a50: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a51: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a52: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a53: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a54: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a55: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a56: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a57: ::core::option::Option<Root57> = match seq.next_element::<::core::option::Option<Root57>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a58: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a59: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a60: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a61: ::core::option::Option<Root61> = match seq.next_element::<::core::option::Option<Root61>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a62: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a63: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a64: ::core::option::Option<Root64> = match seq.next_element::<::core::option::Option<Root64>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a65: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a66: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a67: ::core::option::Option<Root67> = match seq.next_element::<::core::option::Option<Root67>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a68: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a69: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a70: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a71: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a72: ::core::option::Option<Root72> = match seq.next_element::<::core::option::Option<Root72>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a73: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a74: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a75: ::core::option::Option<Root75> = match seq.next_element::<::core::option::Option<Root75>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a76: ::core::option::Option<::std::vec::Vec<Root76Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root76Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a77: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a78: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a79: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a80: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a81: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a82: ::core::option::Option<Root82> = match seq.next_element::<::core::option::Option<Root82>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a83: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a84: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a85: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a86: ::core::option::Option<::std::vec::Vec<Root86Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root86Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a87: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a88: ::core::option::Option<Root88> = match seq.next_element::<::core::option::Option<Root88>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a89: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a90: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a91: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a92: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a93: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a94: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a95: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a96: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a97: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a98: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a99: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a100: ::core::option::Option<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root100ItemItemItem>>>>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<::std::vec::Vec<::std::vec::Vec<::core::option::Option<Root100ItemItemItem>>>>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a101: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a102: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a103: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a104: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a105: ::core::option::Option<Root105> = match seq.next_element::<::core::option::Option<Root105>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a106: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a107: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a108: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a109: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a110: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a111: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a112: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a113: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a114: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a115: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a116: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a117: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a118: ::core::option::Option<::std::vec::Vec<Root118Item>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<Root118Item>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a119: ::core::option::Option<Root119> = match seq.next_element::<::core::option::Option<Root119>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a120: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a121: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a122: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a123: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a124: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a125: ::core::option::Option<Root125> = match seq.next_element::<::core::option::Option<Root125>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a126: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a127: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a128: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a129: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a130: ::core::option::Option<Root130> = match seq.next_element::<::core::option::Option<Root130>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a131: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a132: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a133: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a134: ::core::option::Option<Root134> = match seq.next_element::<::core::option::Option<Root134>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a135: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a136: ::core::option::Option<Root136> = match seq.next_element::<::core::option::Option<Root136>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a137: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a138: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a139: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a140: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a141: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a142: ::core::option::Option<Root142> = match seq.next_element::<::core::option::Option<Root142>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a143: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a144: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a145: ::core::option::Option<::std::vec::Vec<::std::string::String>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::std::string::String>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a146: ::core::option::Option<Root146> = match seq.next_element::<::core::option::Option<Root146>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a147: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a148: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a149: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a150: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a151: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a152: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a153: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a154: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a155: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a156: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a157: ::core::option::Option<Root157> = match seq.next_element::<::core::option::Option<Root157>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a158: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a159: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a160: ::core::option::Option<Root160> = match seq.next_element::<::core::option::Option<Root160>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a161: ::core::option::Option<Root161> = match seq.next_element::<::core::option::Option<Root161>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a162: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a163: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a164: ::core::option::Option<Root164> = match seq.next_element::<::core::option::Option<Root164>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a165: ::core::option::Option<Root165> = match seq.next_element::<::core::option::Option<Root165>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a166: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a167: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a168: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a169: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a170: ::core::option::Option<Root170> = match seq.next_element::<::core::option::Option<Root170>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a171: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a172: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a173: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a174: ::core::option::Option<Root174> = match seq.next_element::<::core::option::Option<Root174>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a175: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a176: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a177: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a178: ::core::option::Option<Root178> = match seq.next_element::<::core::option::Option<Root178>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a179: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a180: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a181: ::core::option::Option<Root181> = match seq.next_element::<::core::option::Option<Root181>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a182: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a183: ::core::option::Option<Root183> = match seq.next_element::<::core::option::Option<Root183>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a184: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a185: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a186: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a187: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a188: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a189: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a190: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a191: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a192: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a193: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a194: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a195: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a196: ::core::option::Option<Root196> = match seq.next_element::<::core::option::Option<Root196>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a197: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a198: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a199: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a200: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a201: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a202: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a203: ::core::option::Option<::std::vec::Vec<::core::option::Option<Root203Item>>> = match seq.next_element::<::core::option::Option<::std::vec::Vec<::core::option::Option<Root203Item>>>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a204: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a205: ::core::option::Option<Root205> = match seq.next_element::<::core::option::Option<Root205>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a206: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a207: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a208: ::core::option::Option<Root208> = match seq.next_element::<::core::option::Option<Root208>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a209: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a210: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a211: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a212: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a213: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a214: ::core::option::Option<Root214> = match seq.next_element::<::core::option::Option<Root214>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a215: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a216: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a217: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a218: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a219: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a220: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a221: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a222: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a223: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a224: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a225: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a226: ::core::option::Option<Root226> = match seq.next_element::<::core::option::Option<Root226>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a227: ::core::option::Option<Root227> = match seq.next_element::<::core::option::Option<Root227>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a228: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a229: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a230: ::core::option::Option<Root230> = match seq.next_element::<::core::option::Option<Root230>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a231: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a232: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a233: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a234: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a235: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a236: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a237: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a238: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a239: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a240: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a241: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a242: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a243: ::core::option::Option<::std::string::String> = match seq.next_element::<::core::option::Option<::std::string::String>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a244: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a245: ::core::option::Option<Root245> = match seq.next_element::<::core::option::Option<Root245>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a246: ::core::option::Option<Null> = match seq.next_element::<::core::option::Option<Null>>()? { Some(v) => v, None => ::core::option::Option::None };
                let a247: ::core::option::Option<Root247> = match seq.next_element::<::core::option::Option<Root247>>()? { Some(v) => v, None => ::core::option::Option::None };
                if let ::core::option::Option::Some::<::serde_json::Value>(_extra) = seq.next_element()? {
return Err(::serde::de::Error::invalid_length(::core::usize::MAX, &"at most the declared number of elements"));
}
                Ok(Root(
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                    a10,
                    a11,
                    a12,
                    a13,
                    a14,
                    a15,
                    a16,
                    a17,
                    a18,
                    a19,
                    a20,
                    a21,
                    a22,
                    a23,
                    a24,
                    a25,
                    a26,
                    a27,
                    a28,
                    a29,
                    a30,
                    a31,
                    a32,
                    a33,
                    a34,
                    a35,
                    a36,
                    a37,
                    a38,
                    a39,
                    a40,
                    a41,
                    a42,
                    a43,
                    a44,
                    a45,
                    a46,
                    a47,
                    a48,
                    a49,
                    a50,
                    a51,
                    a52,
                    a53,
                    a54,
                    a55,
                    a56,
                    a57,
                    a58,
                    a59,
                    a60,
                    a61,
                    a62,
                    a63,
                    a64,
                    a65,
                    a66,
                    a67,
                    a68,
                    a69,
                    a70,
                    a71,
                    a72,
                    a73,
                    a74,
                    a75,
                    a76,
                    a77,
                    a78,
                    a79,
                    a80,
                    a81,
                    a82,
                    a83,
                    a84,
                    a85,
                    a86,
                    a87,
                    a88,
                    a89,
                    a90,
                    a91,
                    a92,
                    a93,
                    a94,
                    a95,
                    a96,
                    a97,
                    a98,
                    a99,
                    a100,
                    a101,
                    a102,
                    a103,
                    a104,
                    a105,
                    a106,
                    a107,
                    a108,
                    a109,
                    a110,
                    a111,
                    a112,
                    a113,
                    a114,
                    a115,
                    a116,
                    a117,
                    a118,
                    a119,
                    a120,
                    a121,
                    a122,
                    a123,
                    a124,
                    a125,
                    a126,
                    a127,
                    a128,
                    a129,
                    a130,
                    a131,
                    a132,
                    a133,
                    a134,
                    a135,
                    a136,
                    a137,
                    a138,
                    a139,
                    a140,
                    a141,
                    a142,
                    a143,
                    a144,
                    a145,
                    a146,
                    a147,
                    a148,
                    a149,
                    a150,
                    a151,
                    a152,
                    a153,
                    a154,
                    a155,
                    a156,
                    a157,
                    a158,
                    a159,
                    a160,
                    a161,
                    a162,
                    a163,
                    a164,
                    a165,
                    a166,
                    a167,
                    a168,
                    a169,
                    a170,
                    a171,
                    a172,
                    a173,
                    a174,
                    a175,
                    a176,
                    a177,
                    a178,
                    a179,
                    a180,
                    a181,
                    a182,
                    a183,
                    a184,
                    a185,
                    a186,
                    a187,
                    a188,
                    a189,
                    a190,
                    a191,
                    a192,
                    a193,
                    a194,
                    a195,
                    a196,
                    a197,
                    a198,
                    a199,
                    a200,
                    a201,
                    a202,
                    a203,
                    a204,
                    a205,
                    a206,
                    a207,
                    a208,
                    a209,
                    a210,
                    a211,
                    a212,
                    a213,
                    a214,
                    a215,
                    a216,
                    a217,
                    a218,
                    a219,
                    a220,
                    a221,
                    a222,
                    a223,
                    a224,
                    a225,
                    a226,
                    a227,
                    a228,
                    a229,
                    a230,
                    a231,
                    a232,
                    a233,
                    a234,
                    a235,
                    a236,
                    a237,
                    a238,
                    a239,
                    a240,
                    a241,
                    a242,
                    a243,
                    a244,
                    a245,
                    a246,
                    a247,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

