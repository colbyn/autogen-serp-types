// AUTOGENERATED: strict types + deserializers
use once_cell::sync::Lazy;
use regex::Regex;
use serde::de::Error as DeError;
use serde::{Deserialize, Deserializer};

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Null;

impl<'de> Deserialize<'de> for Null {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Null;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "null")
            }
            fn visit_unit<E>(self) -> Result<Null, E>
            where
                E: DeError,
            {
                Ok(Null)
            }
            fn visit_none<E>(self) -> Result<Null, E>
            where
                E: DeError,
            {
                Ok(Null)
            }
            fn visit_some<D>(self, _d: D) -> Result<Null, D::Error>
            where
                D: Deserializer<'de>,
            {
                Err(DeError::invalid_type(
                    serde::de::Unexpected::Other("non-null"),
                    &"null",
                ))
            }
        }
        de.deserialize_option(V)
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root430(pub String);
impl std::ops::Deref for Root430 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root430 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root430: expected URI scheme"));
        }
        Ok(Root430(s))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root43(pub Root430, pub String, pub Null, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root47(pub f64);
impl std::ops::Deref for Root47 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root47 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root47: non-finite number"));
        }
        if x < 1.0 {
            return Err(DeError::custom("Root47: number below minimum"));
        }
        if x > 5.0 {
            return Err(DeError::custom("Root47: number above maximum"));
        }

        Ok(Root47(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root48(pub i64);
impl std::ops::Deref for Root48 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root48 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root48: integer below minimum"));
        }
        if x > 7104 {
            return Err(DeError::custom("Root48: integer above maximum"));
        }

        Ok(Root48(x))
    }
}
/// tuple len=11 (required first 10 slots); accepts 10..=11 elements
#[derive(Debug)]
pub struct Root4(
    pub Null,
    pub Null,
    pub Option<String>,
    pub Root43,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Root47,
    pub Root48,
    pub Null,
    pub Option<String>,
);

impl<'de> serde::Deserialize<'de> for Root4 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root4;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 10..=11")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root4, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(0, &"at least 10 elements"));
                    }
                };
                let a1: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 10 elements"));
                    }
                };
                let a2: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(2, &"at least 10 elements"));
                    }
                };
                let a3: Root43 = match seq.next_element::<Root43>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 10 elements"));
                    }
                };
                let a4: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 10 elements"));
                    }
                };
                let a5: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(5, &"at least 10 elements"));
                    }
                };
                let a6: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(6, &"at least 10 elements"));
                    }
                };
                let a7: Root47 = match seq.next_element::<Root47>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(7, &"at least 10 elements"));
                    }
                };
                let a8: Root48 = match seq.next_element::<Root48>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(8, &"at least 10 elements"));
                    }
                };
                let a9: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(9, &"at least 10 elements"));
                    }
                };
                let a10: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => None,
                };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root4(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root70(pub String);
impl std::ops::Deref for Root70 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root70 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root70: expected URI scheme"));
        }
        Ok(Root70(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root74(pub String);
impl std::ops::Deref for Root74 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT74: Lazy<Regex> = Lazy::new(|| Regex::new("^,AOvVaw.*").unwrap());
impl<'de> Deserialize<'de> for Root74 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT74.is_match(&s) {
            return Err(DeError::custom("Root74: string failed pattern"));
        }
        Ok(Root74(s))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root7(pub Root70, pub String, pub Null, pub Null, pub Root74);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root92(pub f64);
impl std::ops::Deref for Root92 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root92 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root92: non-finite number"));
        }
        if x < 35.976811399999995 {
            return Err(DeError::custom("Root92: number below minimum"));
        }
        if x > 51.2072 {
            return Err(DeError::custom("Root92: number above maximum"));
        }

        Ok(Root92(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root93(pub f64);
impl std::ops::Deref for Root93 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root93 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root93: non-finite number"));
        }
        if x < -129.942708600000003 {
            return Err(DeError::custom("Root93: number below minimum"));
        }
        if x > -106.677120000000002 {
            return Err(DeError::custom("Root93: number above maximum"));
        }

        Ok(Root93(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root9(pub Null, pub Null, pub Root92, pub Root93);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root17(pub i64);
impl std::ops::Deref for Root17 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root17 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root17: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root17: integer above maximum"));
        }

        Ok(Root17(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item000(pub i64);
impl std::ops::Deref for Root240Item000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root240Item000: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root240Item000: integer above maximum"));
        }

        Ok(Root240Item000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0053(pub i64);
impl std::ops::Deref for Root240Item0053 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0053 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root240Item0053: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root240Item0053: integer above maximum"));
        }

        Ok(Root240Item0053(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0054(pub i64);
impl std::ops::Deref for Root240Item0054 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0054 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root240Item0054: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root240Item0054: integer above maximum"));
        }

        Ok(Root240Item0054(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item005(
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item0053,
    pub Root240Item0054,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0063(pub i64);
impl std::ops::Deref for Root240Item0063 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0063 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root240Item0063: integer below minimum"));
        }
        if x > 7 {
            return Err(DeError::custom("Root240Item0063: integer above maximum"));
        }

        Ok(Root240Item0063(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0064(pub i64);
impl std::ops::Deref for Root240Item0064 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0064 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root240Item0064: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root240Item0064: integer above maximum"));
        }

        Ok(Root240Item0064(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item006(
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item0063,
    pub Root240Item0064,
);

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item00(
    pub Root240Item000,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item005,
    pub Root240Item006,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item010(pub i64);
impl std::ops::Deref for Root240Item010 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item010 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root240Item010: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root240Item010: integer above maximum"));
        }

        Ok(Root240Item010(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0151(pub i64);
impl std::ops::Deref for Root240Item0151 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0151 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root240Item0151: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root240Item0151: integer above maximum"));
        }

        Ok(Root240Item0151(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0152(pub i64);
impl std::ops::Deref for Root240Item0152 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0152 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root240Item0152: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root240Item0152: integer above maximum"));
        }

        Ok(Root240Item0152(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item015(pub Null, pub Root240Item0151, pub Root240Item0152);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0161(pub i64);
impl std::ops::Deref for Root240Item0161 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0161 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root240Item0161: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root240Item0161: integer above maximum"));
        }

        Ok(Root240Item0161(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root240Item0162(pub i64);
impl std::ops::Deref for Root240Item0162 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root240Item0162 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root240Item0162: integer below minimum"));
        }
        if x > 24 {
            return Err(DeError::custom("Root240Item0162: integer above maximum"));
        }

        Ok(Root240Item0162(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item016(pub Null, pub Root240Item0161, pub Root240Item0162);

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item01(
    pub Root240Item010,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root240Item015,
    pub Root240Item016,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item0(pub Root240Item00, pub Root240Item01);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root240Item(pub Root240Item0);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root24(pub Vec<Root240Item>);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2518000(pub i64);
impl std::ops::Deref for Root2518000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2518000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root2518000: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root2518000: integer above maximum"));
        }

        Ok(Root2518000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root251800(pub Root2518000);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root251801(pub String);
impl std::ops::Deref for Root251801 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT251801: Lazy<Regex> = Lazy::new(|| Regex::new("^Favorites.*").unwrap());
impl<'de> Deserialize<'de> for Root251801 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT251801.is_match(&s) {
            return Err(DeError::custom("Root251801: string failed pattern"));
        }
        Ok(Root251801(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root251803(pub i64);
impl std::ops::Deref for Root251803 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root251803 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root251803: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root251803: integer above maximum"));
        }

        Ok(Root251803(x))
    }
}
/// tuple len=12 (required first 12 slots)
#[derive(Debug, Deserialize)]
pub struct Root25180(
    pub Root251800,
    pub Root251801,
    pub Null,
    pub Root251803,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2518100(pub i64);
impl std::ops::Deref for Root2518100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2518100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root2518100: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root2518100: integer above maximum"));
        }

        Ok(Root2518100(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root251810(pub Root2518100);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root251811(pub String);
impl std::ops::Deref for Root251811 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT251811: Lazy<Regex> = Lazy::new(|| Regex::new("^Want to go.*").unwrap());
impl<'de> Deserialize<'de> for Root251811 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT251811.is_match(&s) {
            return Err(DeError::custom("Root251811: string failed pattern"));
        }
        Ok(Root251811(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root251813(pub i64);
impl std::ops::Deref for Root251813 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root251813 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root251813: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root251813: integer above maximum"));
        }

        Ok(Root251813(x))
    }
}
/// tuple len=12 (required first 12 slots)
#[derive(Debug, Deserialize)]
pub struct Root25181(
    pub Root251810,
    pub Root251811,
    pub Null,
    pub Root251813,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2518200(pub i64);
impl std::ops::Deref for Root2518200 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2518200 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom("Root2518200: integer below minimum"));
        }
        if x > 7 {
            return Err(DeError::custom("Root2518200: integer above maximum"));
        }

        Ok(Root2518200(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root251820(pub Root2518200);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root251821(pub String);
impl std::ops::Deref for Root251821 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT251821: Lazy<Regex> = Lazy::new(|| Regex::new("^Travel plans.*").unwrap());
impl<'de> Deserialize<'de> for Root251821 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT251821.is_match(&s) {
            return Err(DeError::custom("Root251821: string failed pattern"));
        }
        Ok(Root251821(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root251823(pub i64);
impl std::ops::Deref for Root251823 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root251823 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root251823: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root251823: integer above maximum"));
        }

        Ok(Root251823(x))
    }
}
/// tuple len=12 (required first 12 slots)
#[derive(Debug, Deserialize)]
pub struct Root25182(
    pub Root251820,
    pub Root251821,
    pub Null,
    pub Root251823,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2518300(pub i64);
impl std::ops::Deref for Root2518300 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2518300 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root2518300: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root2518300: integer above maximum"));
        }

        Ok(Root2518300(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root251830(pub Root2518300);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root251831(pub String);
impl std::ops::Deref for Root251831 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT251831: Lazy<Regex> = Lazy::new(|| Regex::new("^Starred places.*").unwrap());
impl<'de> Deserialize<'de> for Root251831 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT251831.is_match(&s) {
            return Err(DeError::custom("Root251831: string failed pattern"));
        }
        Ok(Root251831(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root251833(pub i64);
impl std::ops::Deref for Root251833 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root251833 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root251833: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root251833: integer above maximum"));
        }

        Ok(Root251833(x))
    }
}
/// tuple len=12 (required first 12 slots)
#[derive(Debug, Deserialize)]
pub struct Root25183(
    pub Root251830,
    pub Root251831,
    pub Null,
    pub Root251833,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2518400(pub i64);
impl std::ops::Deref for Root2518400 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2518400 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 8 {
            return Err(DeError::custom("Root2518400: integer below minimum"));
        }
        if x > 8 {
            return Err(DeError::custom("Root2518400: integer above maximum"));
        }

        Ok(Root2518400(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root251840(pub Root2518400);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root251841(pub String);
impl std::ops::Deref for Root251841 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT251841: Lazy<Regex> = Lazy::new(|| Regex::new("^Saved places.*").unwrap());
impl<'de> Deserialize<'de> for Root251841 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT251841.is_match(&s) {
            return Err(DeError::custom("Root251841: string failed pattern"));
        }
        Ok(Root251841(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root251843(pub i64);
impl std::ops::Deref for Root251843 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root251843 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root251843: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root251843: integer above maximum"));
        }

        Ok(Root251843(x))
    }
}
/// tuple len=12 (required first 12 slots)
#[derive(Debug, Deserialize)]
pub struct Root25184(
    pub Root251840,
    pub Root251841,
    pub Null,
    pub Root251843,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root2518(
    pub Root25180,
    pub Root25181,
    pub Root25182,
    pub Root25183,
    pub Root25184,
);

/// tuple len=23 (required first 23 slots)
#[derive(Debug, Deserialize)]
pub struct Root25(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2518,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root30(pub String);
impl std::ops::Deref for Root30 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT30: Lazy<Regex> = Lazy::new(|| Regex::new("^America/.*").unwrap());
impl<'de> Deserialize<'de> for Root30 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT30.is_match(&s) {
            return Err(DeError::custom("Root30: string failed pattern"));
        }
        Ok(Root30(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3205(pub i64);
impl std::ops::Deref for Root3205 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3205 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root3205: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root3205: integer above maximum"));
        }

        Ok(Root3205(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root320(
    pub Null,
    pub String,
    pub Null,
    pub Null,
    pub Null,
    pub Root3205,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3215(pub i64);
impl std::ops::Deref for Root3215 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3215 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root3215: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root3215: integer above maximum"));
        }

        Ok(Root3215(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root321(
    pub Null,
    pub String,
    pub Null,
    pub Null,
    pub Null,
    pub Root3215,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root323(pub String);
impl std::ops::Deref for Root323 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT323: Lazy<Regex> = Lazy::new(|| {
    Regex::new("^https://www\\.google\\.com/local/review/rap/report\\?d=286732321&t=5&postId=0x8.*")
        .unwrap()
});
impl<'de> Deserialize<'de> for Root323 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT323.is_match(&s) {
            return Err(DeError::custom("Root323: string failed pattern"));
        }
        Ok(Root323(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root324(pub String);
impl std::ops::Deref for Root324 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT324: Lazy<Regex> = Lazy::new(|| {
    Regex::new("^https://support\\.google\\.com/local-listings/answer/9851099.*").unwrap()
});
impl<'de> Deserialize<'de> for Root324 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT324.is_match(&s) {
            return Err(DeError::custom("Root324: string failed pattern"));
        }
        Ok(Root324(s))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root32(pub Root320, pub Root321, pub Null, pub Root323, pub Root324);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34100(pub String);
impl std::ops::Deref for Root34100 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34100: Lazy<Regex> = Lazy::new(|| Regex::new("^Friday.*").unwrap());
impl<'de> Deserialize<'de> for Root34100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34100.is_match(&s) {
            return Err(DeError::custom("Root34100: string failed pattern"));
        }
        Ok(Root34100(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34104(pub String);
impl std::ops::Deref for Root34104 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34104: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-05.*").unwrap());
impl<'de> Deserialize<'de> for Root34104 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34104.is_match(&s) {
            return Err(DeError::custom("Root34104: string failed pattern"));
        }
        Ok(Root34104(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34105(pub i64);
impl std::ops::Deref for Root34105 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34105 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34105: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34105: integer above maximum"));
        }

        Ok(Root34105(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34106Item0(pub i64);
impl std::ops::Deref for Root34106Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34106Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34106Item0: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root34106Item0: integer above maximum"));
        }

        Ok(Root34106Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34106Item1(pub i64);
impl std::ops::Deref for Root34106Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34106Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34106Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34106Item1: integer above maximum"));
        }

        Ok(Root34106Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34106Item2(pub i64);
impl std::ops::Deref for Root34106Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34106Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34106Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root34106Item2: integer above maximum"));
        }

        Ok(Root34106Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34106Item3(pub i64);
impl std::ops::Deref for Root34106Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34106Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34106Item3: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root34106Item3: integer above maximum"));
        }

        Ok(Root34106Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root34106Item(
    pub Root34106Item0,
    pub Root34106Item1,
    pub Root34106Item2,
    pub Root34106Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34107(pub i64);
impl std::ops::Deref for Root34107 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34107 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34107: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root34107: integer above maximum"));
        }

        Ok(Root34107(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3410(
    pub Root34100,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root34104,
    pub Root34105,
    pub Option<Vec<Root34106Item>>,
    pub Root34107,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34110(pub String);
impl std::ops::Deref for Root34110 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34110: Lazy<Regex> = Lazy::new(|| Regex::new("^Saturday.*").unwrap());
impl<'de> Deserialize<'de> for Root34110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34110.is_match(&s) {
            return Err(DeError::custom("Root34110: string failed pattern"));
        }
        Ok(Root34110(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34114(pub String);
impl std::ops::Deref for Root34114 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34114: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-06.*").unwrap());
impl<'de> Deserialize<'de> for Root34114 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34114.is_match(&s) {
            return Err(DeError::custom("Root34114: string failed pattern"));
        }
        Ok(Root34114(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34115(pub i64);
impl std::ops::Deref for Root34115 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34115 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34115: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34115: integer above maximum"));
        }

        Ok(Root34115(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34116Item0(pub i64);
impl std::ops::Deref for Root34116Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34116Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34116Item0: integer below minimum"));
        }
        if x > 17 {
            return Err(DeError::custom("Root34116Item0: integer above maximum"));
        }

        Ok(Root34116Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34116Item1(pub i64);
impl std::ops::Deref for Root34116Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34116Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34116Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34116Item1: integer above maximum"));
        }

        Ok(Root34116Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34116Item2(pub i64);
impl std::ops::Deref for Root34116Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34116Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34116Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root34116Item2: integer above maximum"));
        }

        Ok(Root34116Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34116Item3(pub i64);
impl std::ops::Deref for Root34116Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34116Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34116Item3: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34116Item3: integer above maximum"));
        }

        Ok(Root34116Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root34116Item(
    pub Root34116Item0,
    pub Root34116Item1,
    pub Root34116Item2,
    pub Root34116Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34117(pub i64);
impl std::ops::Deref for Root34117 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34117 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34117: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root34117: integer above maximum"));
        }

        Ok(Root34117(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3411(
    pub Root34110,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root34114,
    pub Root34115,
    pub Option<Vec<Root34116Item>>,
    pub Root34117,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34120(pub String);
impl std::ops::Deref for Root34120 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34120: Lazy<Regex> = Lazy::new(|| Regex::new("^Sunday.*").unwrap());
impl<'de> Deserialize<'de> for Root34120 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34120.is_match(&s) {
            return Err(DeError::custom("Root34120: string failed pattern"));
        }
        Ok(Root34120(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root34121(pub String);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34124(pub String);
impl std::ops::Deref for Root34124 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34124: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-07.*").unwrap());
impl<'de> Deserialize<'de> for Root34124 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34124.is_match(&s) {
            return Err(DeError::custom("Root34124: string failed pattern"));
        }
        Ok(Root34124(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34125(pub i64);
impl std::ops::Deref for Root34125 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34125 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34125: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34125: integer above maximum"));
        }

        Ok(Root34125(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3412600(pub i64);
impl std::ops::Deref for Root3412600 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3412600 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3412600: integer below minimum"));
        }
        if x > 17 {
            return Err(DeError::custom("Root3412600: integer above maximum"));
        }

        Ok(Root3412600(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3412601(pub i64);
impl std::ops::Deref for Root3412601 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3412601 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3412601: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root3412601: integer above maximum"));
        }

        Ok(Root3412601(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3412602(pub i64);
impl std::ops::Deref for Root3412602 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3412602 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3412602: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root3412602: integer above maximum"));
        }

        Ok(Root3412602(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3412603(pub i64);
impl std::ops::Deref for Root3412603 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3412603 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3412603: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root3412603: integer above maximum"));
        }

        Ok(Root3412603(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root341260(
    pub Root3412600,
    pub Root3412601,
    pub Root3412602,
    pub Root3412603,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root34126(pub Root341260);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34127(pub i64);
impl std::ops::Deref for Root34127 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34127 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34127: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root34127: integer above maximum"));
        }

        Ok(Root34127(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3412(
    pub Root34120,
    pub Root34121,
    pub Null,
    pub Null,
    pub Root34124,
    pub Root34125,
    pub Option<Root34126>,
    pub Root34127,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34130(pub String);
impl std::ops::Deref for Root34130 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34130: Lazy<Regex> = Lazy::new(|| Regex::new("^Monday.*").unwrap());
impl<'de> Deserialize<'de> for Root34130 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34130.is_match(&s) {
            return Err(DeError::custom("Root34130: string failed pattern"));
        }
        Ok(Root34130(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34134(pub String);
impl std::ops::Deref for Root34134 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34134: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-08.*").unwrap());
impl<'de> Deserialize<'de> for Root34134 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34134.is_match(&s) {
            return Err(DeError::custom("Root34134: string failed pattern"));
        }
        Ok(Root34134(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34135(pub i64);
impl std::ops::Deref for Root34135 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34135 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34135: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34135: integer above maximum"));
        }

        Ok(Root34135(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34136Item0(pub i64);
impl std::ops::Deref for Root34136Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34136Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34136Item0: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root34136Item0: integer above maximum"));
        }

        Ok(Root34136Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34136Item1(pub i64);
impl std::ops::Deref for Root34136Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34136Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34136Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34136Item1: integer above maximum"));
        }

        Ok(Root34136Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34136Item2(pub i64);
impl std::ops::Deref for Root34136Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34136Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34136Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root34136Item2: integer above maximum"));
        }

        Ok(Root34136Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34136Item3(pub i64);
impl std::ops::Deref for Root34136Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34136Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34136Item3: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root34136Item3: integer above maximum"));
        }

        Ok(Root34136Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root34136Item(
    pub Root34136Item0,
    pub Root34136Item1,
    pub Root34136Item2,
    pub Root34136Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34137(pub i64);
impl std::ops::Deref for Root34137 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34137 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34137: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root34137: integer above maximum"));
        }

        Ok(Root34137(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3413(
    pub Root34130,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root34134,
    pub Root34135,
    pub Option<Vec<Root34136Item>>,
    pub Root34137,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34140(pub String);
impl std::ops::Deref for Root34140 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34140: Lazy<Regex> = Lazy::new(|| Regex::new("^Tuesday.*").unwrap());
impl<'de> Deserialize<'de> for Root34140 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34140.is_match(&s) {
            return Err(DeError::custom("Root34140: string failed pattern"));
        }
        Ok(Root34140(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34144(pub String);
impl std::ops::Deref for Root34144 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34144: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-09.*").unwrap());
impl<'de> Deserialize<'de> for Root34144 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34144.is_match(&s) {
            return Err(DeError::custom("Root34144: string failed pattern"));
        }
        Ok(Root34144(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34145(pub i64);
impl std::ops::Deref for Root34145 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34145 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34145: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34145: integer above maximum"));
        }

        Ok(Root34145(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34146Item0(pub i64);
impl std::ops::Deref for Root34146Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34146Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34146Item0: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root34146Item0: integer above maximum"));
        }

        Ok(Root34146Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34146Item1(pub i64);
impl std::ops::Deref for Root34146Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34146Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34146Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34146Item1: integer above maximum"));
        }

        Ok(Root34146Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34146Item2(pub i64);
impl std::ops::Deref for Root34146Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34146Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34146Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root34146Item2: integer above maximum"));
        }

        Ok(Root34146Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34146Item3(pub i64);
impl std::ops::Deref for Root34146Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34146Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34146Item3: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root34146Item3: integer above maximum"));
        }

        Ok(Root34146Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root34146Item(
    pub Root34146Item0,
    pub Root34146Item1,
    pub Root34146Item2,
    pub Root34146Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34147(pub i64);
impl std::ops::Deref for Root34147 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34147 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34147: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root34147: integer above maximum"));
        }

        Ok(Root34147(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3414(
    pub Root34140,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root34144,
    pub Root34145,
    pub Option<Vec<Root34146Item>>,
    pub Root34147,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34150(pub String);
impl std::ops::Deref for Root34150 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34150: Lazy<Regex> = Lazy::new(|| Regex::new("^Wednesday.*").unwrap());
impl<'de> Deserialize<'de> for Root34150 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34150.is_match(&s) {
            return Err(DeError::custom("Root34150: string failed pattern"));
        }
        Ok(Root34150(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34154(pub String);
impl std::ops::Deref for Root34154 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34154: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-10.*").unwrap());
impl<'de> Deserialize<'de> for Root34154 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34154.is_match(&s) {
            return Err(DeError::custom("Root34154: string failed pattern"));
        }
        Ok(Root34154(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34155(pub i64);
impl std::ops::Deref for Root34155 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34155 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34155: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34155: integer above maximum"));
        }

        Ok(Root34155(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34156Item0(pub i64);
impl std::ops::Deref for Root34156Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34156Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34156Item0: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root34156Item0: integer above maximum"));
        }

        Ok(Root34156Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34156Item1(pub i64);
impl std::ops::Deref for Root34156Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34156Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34156Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34156Item1: integer above maximum"));
        }

        Ok(Root34156Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34156Item2(pub i64);
impl std::ops::Deref for Root34156Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34156Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34156Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root34156Item2: integer above maximum"));
        }

        Ok(Root34156Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34156Item3(pub i64);
impl std::ops::Deref for Root34156Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34156Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34156Item3: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root34156Item3: integer above maximum"));
        }

        Ok(Root34156Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root34156Item(
    pub Root34156Item0,
    pub Root34156Item1,
    pub Root34156Item2,
    pub Root34156Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34157(pub i64);
impl std::ops::Deref for Root34157 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34157 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34157: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root34157: integer above maximum"));
        }

        Ok(Root34157(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3415(
    pub Root34150,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root34154,
    pub Root34155,
    pub Option<Vec<Root34156Item>>,
    pub Root34157,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34160(pub String);
impl std::ops::Deref for Root34160 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34160: Lazy<Regex> = Lazy::new(|| Regex::new("^Thursday.*").unwrap());
impl<'de> Deserialize<'de> for Root34160 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34160.is_match(&s) {
            return Err(DeError::custom("Root34160: string failed pattern"));
        }
        Ok(Root34160(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34164(pub String);
impl std::ops::Deref for Root34164 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34164: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-11.*").unwrap());
impl<'de> Deserialize<'de> for Root34164 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34164.is_match(&s) {
            return Err(DeError::custom("Root34164: string failed pattern"));
        }
        Ok(Root34164(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34165(pub i64);
impl std::ops::Deref for Root34165 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34165 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34165: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34165: integer above maximum"));
        }

        Ok(Root34165(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34166Item0(pub i64);
impl std::ops::Deref for Root34166Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34166Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34166Item0: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root34166Item0: integer above maximum"));
        }

        Ok(Root34166Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34166Item1(pub i64);
impl std::ops::Deref for Root34166Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34166Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34166Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34166Item1: integer above maximum"));
        }

        Ok(Root34166Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34166Item2(pub i64);
impl std::ops::Deref for Root34166Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34166Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34166Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root34166Item2: integer above maximum"));
        }

        Ok(Root34166Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34166Item3(pub i64);
impl std::ops::Deref for Root34166Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34166Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34166Item3: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root34166Item3: integer above maximum"));
        }

        Ok(Root34166Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root34166Item(
    pub Root34166Item0,
    pub Root34166Item1,
    pub Root34166Item2,
    pub Root34166Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34167(pub i64);
impl std::ops::Deref for Root34167 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34167 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34167: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root34167: integer above maximum"));
        }

        Ok(Root34167(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3416(
    pub Root34160,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root34164,
    pub Root34165,
    pub Option<Vec<Root34166Item>>,
    pub Root34167,
);

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root341(
    pub Root3410,
    pub Root3411,
    pub Root3412,
    pub Root3413,
    pub Root3414,
    pub Root3415,
    pub Root3416,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34400(pub String);
impl std::ops::Deref for Root34400 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34400: Lazy<Regex> = Lazy::new(|| Regex::new("^Friday.*").unwrap());
impl<'de> Deserialize<'de> for Root34400 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34400.is_match(&s) {
            return Err(DeError::custom("Root34400: string failed pattern"));
        }
        Ok(Root34400(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root34404(pub String);
impl std::ops::Deref for Root34404 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT34404: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-05.*").unwrap());
impl<'de> Deserialize<'de> for Root34404 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT34404.is_match(&s) {
            return Err(DeError::custom("Root34404: string failed pattern"));
        }
        Ok(Root34404(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34405(pub i64);
impl std::ops::Deref for Root34405 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34405 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root34405: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root34405: integer above maximum"));
        }

        Ok(Root34405(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34406Item0(pub i64);
impl std::ops::Deref for Root34406Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34406Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34406Item0: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root34406Item0: integer above maximum"));
        }

        Ok(Root34406Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34406Item1(pub i64);
impl std::ops::Deref for Root34406Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34406Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34406Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root34406Item1: integer above maximum"));
        }

        Ok(Root34406Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34406Item2(pub i64);
impl std::ops::Deref for Root34406Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34406Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34406Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root34406Item2: integer above maximum"));
        }

        Ok(Root34406Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34406Item3(pub i64);
impl std::ops::Deref for Root34406Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34406Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34406Item3: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root34406Item3: integer above maximum"));
        }

        Ok(Root34406Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root34406Item(
    pub Root34406Item0,
    pub Root34406Item1,
    pub Root34406Item2,
    pub Root34406Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root34407(pub i64);
impl std::ops::Deref for Root34407 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root34407 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root34407: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root34407: integer above maximum"));
        }

        Ok(Root34407(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root3440(
    pub Root34400,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root34404,
    pub Root34405,
    pub Option<Vec<Root34406Item>>,
    pub Root34407,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3441(pub i64);
impl std::ops::Deref for Root3441 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3441 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root3441: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root3441: integer above maximum"));
        }

        Ok(Root3441(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3442(pub i64);
impl std::ops::Deref for Root3442 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3442 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root3442: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root3442: integer above maximum"));
        }

        Ok(Root3442(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3443(pub i64);
impl std::ops::Deref for Root3443 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3443 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3443: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root3443: integer above maximum"));
        }

        Ok(Root3443(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root344(
    pub Root3440,
    pub Root3441,
    pub Root3442,
    pub Option<Root3443>,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root3460(pub String);
impl std::ops::Deref for Root3460 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT3460: Lazy<Regex> = Lazy::new(|| Regex::new("^Friday.*").unwrap());
impl<'de> Deserialize<'de> for Root3460 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT3460.is_match(&s) {
            return Err(DeError::custom("Root3460: string failed pattern"));
        }
        Ok(Root3460(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root3464(pub String);
impl std::ops::Deref for Root3464 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT3464: Lazy<Regex> = Lazy::new(|| Regex::new("^2025-09-05.*").unwrap());
impl<'de> Deserialize<'de> for Root3464 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT3464.is_match(&s) {
            return Err(DeError::custom("Root3464: string failed pattern"));
        }
        Ok(Root3464(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3465(pub i64);
impl std::ops::Deref for Root3465 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3465 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root3465: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root3465: integer above maximum"));
        }

        Ok(Root3465(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3466Item0(pub i64);
impl std::ops::Deref for Root3466Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3466Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3466Item0: integer below minimum"));
        }
        if x > 18 {
            return Err(DeError::custom("Root3466Item0: integer above maximum"));
        }

        Ok(Root3466Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3466Item1(pub i64);
impl std::ops::Deref for Root3466Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3466Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3466Item1: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root3466Item1: integer above maximum"));
        }

        Ok(Root3466Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3466Item2(pub i64);
impl std::ops::Deref for Root3466Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3466Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3466Item2: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root3466Item2: integer above maximum"));
        }

        Ok(Root3466Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3466Item3(pub i64);
impl std::ops::Deref for Root3466Item3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3466Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3466Item3: integer below minimum"));
        }
        if x > 59 {
            return Err(DeError::custom("Root3466Item3: integer above maximum"));
        }

        Ok(Root3466Item3(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root3466Item(
    pub Root3466Item0,
    pub Root3466Item1,
    pub Root3466Item2,
    pub Root3466Item3,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3467(pub i64);
impl std::ops::Deref for Root3467 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3467 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3467: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root3467: integer above maximum"));
        }

        Ok(Root3467(x))
    }
}
/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root346(
    pub Root3460,
    pub Vec<String>,
    pub Null,
    pub Null,
    pub Root3464,
    pub Root3465,
    pub Option<Vec<Root3466Item>>,
    pub Root3467,
);

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root34(
    pub Null,
    pub Root341,
    pub Null,
    pub Null,
    pub Root344,
    pub Null,
    pub Root346,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt0(pub i64);
impl std::ops::Deref for Root35ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root35ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root35ItemAlt0: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root35ItemAlt0: integer above maximum"));
        }

        Ok(Root35ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 4 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0(pub i64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0: integer below minimum",
            ));
        }
        if x > 86917 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0(pub f64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0: non-finite number",
            ));
        }
        if x < 0.0 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0: number below minimum",
            ));
        }
        if x > 14.0 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0: number above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0(pub f64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0: non-finite number",
            ));
        }
        if x < -111.154128999999998 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0: number below minimum",
            ));
        }
        if x > 39.095188 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0: number above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt1(pub String);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt1 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT35ITEMALT2ITEMALT2ITEMALT1ITEMALT2ITEMALT2ITEMALT1: Lazy<Regex> =
    Lazy::new(|| Regex::new("^Q0FF.*").unwrap());
impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT35ITEMALT2ITEMALT2ITEMALT1ITEMALT2ITEMALT2ITEMALT1.is_match(&s) {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt1: string failed pattern",
            ));
        }
        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt1(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 22 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de>
    for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0
{
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt20(pub i64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt20 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de>
    for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt20
{
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 331 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt20: integer below minimum",
            ));
        }
        if x > 437 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt20: integer above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt20(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt21(pub i64);
impl std::ops::Deref for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt21 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de>
    for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt21
{
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 240 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt21: integer below minimum",
            ));
        }
        if x > 240 {
            return Err(DeError::custom(
                "Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt21: integer above maximum",
            ));
        }

        Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt21(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt2(
    pub Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt20,
    pub Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt21,
);

#[derive(Debug)]
pub enum Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2Item {
    V0(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0),
    V1(String),
    V2(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt2),
}

impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2Item::V0(x)); }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2Item::V1(x));
        }
        if let Ok(x) = <Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2ItemAlt2 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item {
    V0(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0),
    V1(String),
    V2(Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item::V0(x)); }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item::V1(x));
        }
        if let Ok(x) = <Vec<
            Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2Item>,
        > as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2Item {
    V0(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0),
    V1(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt1),
    V2(Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2Item::V0(x)); }
        if let Ok(x) = <Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt1 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2Item::V1(x)); }
        if let Ok(x) = <Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2Item {
    V0(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0),
    V1(String),
    V2(Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2Item::V1(x));
        }
        if let Ok(x) = <Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root35ItemAlt2ItemAlt2ItemAlt1Item {
    V0(Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0),
    V1(String),
    V2(Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2ItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt0 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root35ItemAlt2ItemAlt2ItemAlt1Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35ItemAlt2ItemAlt2ItemAlt1Item::V1(x));
        }
        if let Ok(x) = <Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root35ItemAlt2ItemAlt2ItemAlt1Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root35ItemAlt2ItemAlt2Item {
    V0(Root35ItemAlt2ItemAlt2ItemAlt0),
    V1(Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1Item>>),
}

impl<'de> Deserialize<'de> for Root35ItemAlt2ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root35ItemAlt2ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root35ItemAlt2ItemAlt2Item::V0(x));
        }
        if let Ok(x) =
            <Vec<Option<Root35ItemAlt2ItemAlt2ItemAlt1Item>> as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root35ItemAlt2ItemAlt2Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root35ItemAlt2Item {
    V0(Root35ItemAlt2ItemAlt0),
    V1(String),
    V2(Vec<Option<Root35ItemAlt2ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root35ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root35ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35ItemAlt2Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35ItemAlt2Item::V1(x));
        }
        if let Ok(x) = <Vec<Option<Root35ItemAlt2ItemAlt2Item>> as serde::Deserialize>::deserialize(
            val.clone(),
        ) {
            return Ok(Root35ItemAlt2Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root35Item {
    V0(Root35ItemAlt0),
    V1(String),
    V2(Vec<Option<Root35ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root35Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root35ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root35Item::V1(x));
        }
        if let Ok(x) =
            <Vec<Option<Root35ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root35Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item1(pub i64);
impl std::ops::Deref for Root370Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root370Item1: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root370Item1: integer above maximum"));
        }

        Ok(Root370Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item2(pub i64);
impl std::ops::Deref for Root370Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root370Item2: integer below minimum"));
        }
        if x > 27 {
            return Err(DeError::custom("Root370Item2: integer above maximum"));
        }

        Ok(Root370Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root370Item60(pub String);
impl std::ops::Deref for Root370Item60 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item60 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root370Item60: expected URI scheme"));
        }
        Ok(Root370Item60(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item620(pub i64);
impl std::ops::Deref for Root370Item620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item620 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root370Item620: integer below minimum"));
        }
        if x > 13312 {
            return Err(DeError::custom("Root370Item620: integer above maximum"));
        }

        Ok(Root370Item620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item621(pub i64);
impl std::ops::Deref for Root370Item621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item621 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root370Item621: integer below minimum"));
        }
        if x > 12000 {
            return Err(DeError::custom("Root370Item621: integer above maximum"));
        }

        Ok(Root370Item621(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item62(pub Root370Item620, pub Root370Item621);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item630(pub i64);
impl std::ops::Deref for Root370Item630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item630 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 80 {
            return Err(DeError::custom("Root370Item630: integer below minimum"));
        }
        if x > 80 {
            return Err(DeError::custom("Root370Item630: integer above maximum"));
        }

        Ok(Root370Item630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item631(pub i64);
impl std::ops::Deref for Root370Item631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item631 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 92 {
            return Err(DeError::custom("Root370Item631: integer below minimum"));
        }
        if x > 92 {
            return Err(DeError::custom("Root370Item631: integer above maximum"));
        }

        Ok(Root370Item631(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item63(pub Root370Item630, pub Root370Item631);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item6(
    pub Root370Item60,
    pub String,
    pub Option<Root370Item62>,
    pub Root370Item63,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item800(pub i64);
impl std::ops::Deref for Root370Item800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item800 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root370Item800: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root370Item800: integer above maximum"));
        }

        Ok(Root370Item800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root370Item801(pub f64);
impl std::ops::Deref for Root370Item801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item801 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root370Item801: non-finite number"));
        }
        if x < -115.005603699999995 {
            return Err(DeError::custom("Root370Item801: number below minimum"));
        }
        if x > 0.0 {
            return Err(DeError::custom("Root370Item801: number above maximum"));
        }

        Ok(Root370Item801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root370Item802(pub f64);
impl std::ops::Deref for Root370Item802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item802 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root370Item802: non-finite number"));
        }
        if x < 0.0 {
            return Err(DeError::custom("Root370Item802: number below minimum"));
        }
        if x > 42.395631000000002 {
            return Err(DeError::custom("Root370Item802: number above maximum"));
        }

        Ok(Root370Item802(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item80(pub Root370Item800, pub Root370Item801, pub Root370Item802);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root370Item810(pub f64);
impl std::ops::Deref for Root370Item810 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item810 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root370Item810: non-finite number"));
        }
        if x < 0.0 {
            return Err(DeError::custom("Root370Item810: number below minimum"));
        }
        if x > 358.973880000000008 {
            return Err(DeError::custom("Root370Item810: number above maximum"));
        }

        Ok(Root370Item810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item811(pub i64);
impl std::ops::Deref for Root370Item811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item811 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 90 {
            return Err(DeError::custom("Root370Item811: integer below minimum"));
        }
        if x > 110 {
            return Err(DeError::custom("Root370Item811: integer above maximum"));
        }

        Ok(Root370Item811(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item81(pub Root370Item810, pub Root370Item811);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item820(pub i64);
impl std::ops::Deref for Root370Item820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item820 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root370Item820: integer below minimum"));
        }
        if x > 13312 {
            return Err(DeError::custom("Root370Item820: integer above maximum"));
        }

        Ok(Root370Item820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item821(pub i64);
impl std::ops::Deref for Root370Item821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item821 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root370Item821: integer below minimum"));
        }
        if x > 12000 {
            return Err(DeError::custom("Root370Item821: integer above maximum"));
        }

        Ok(Root370Item821(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item82(pub Root370Item820, pub Root370Item821);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item83(pub i64);
impl std::ops::Deref for Root370Item83 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item83 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 75 {
            return Err(DeError::custom("Root370Item83: integer below minimum"));
        }
        if x > 75 {
            return Err(DeError::custom("Root370Item83: integer above maximum"));
        }

        Ok(Root370Item83(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item8(
    pub Root370Item80,
    pub Root370Item81,
    pub Root370Item82,
    pub Root370Item83,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root370Item10(pub String);
impl std::ops::Deref for Root370Item10 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT370ITEM10: Lazy<Regex> = Lazy::new(|| Regex::new("^0ahUKEwi.*").unwrap());
impl<'de> Deserialize<'de> for Root370Item10 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT370ITEM10.is_match(&s) {
            return Err(DeError::custom("Root370Item10: string failed pattern"));
        }
        Ok(Root370Item10(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root370Item15000(pub String);
impl std::ops::Deref for Root370Item15000 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT370ITEM15000: Lazy<Regex> = Lazy::new(|| Regex::new("^0x8.*").unwrap());
impl<'de> Deserialize<'de> for Root370Item15000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT370ITEM15000.is_match(&s) {
            return Err(DeError::custom("Root370Item15000: string failed pattern"));
        }
        Ok(Root370Item15000(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item1500(pub Root370Item15000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item150(pub Root370Item1500);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item15(pub Root370Item150);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item17(pub String);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root370Item20 {
    Photo,
    StreetView,
}
impl<'de> Deserialize<'de> for Root370Item20 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Photo" => Ok(Root370Item20::Photo),
            "Street View" => Ok(Root370Item20::StreetView),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root370Item20 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root370Item20::Photo => ser.serialize_str("Photo"),
            Root370Item20::StreetView => ser.serialize_str("Street View"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item2110(pub i64);
impl std::ops::Deref for Root370Item2110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item2110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root370Item2110: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root370Item2110: integer above maximum"));
        }

        Ok(Root370Item2110(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item211(pub Root370Item2110, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item212ItemAlt0(pub i64);
impl std::ops::Deref for Root370Item212ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item212ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root370Item212ItemAlt0: integer below minimum",
            ));
        }
        if x > 10 {
            return Err(DeError::custom(
                "Root370Item212ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root370Item212ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item212ItemAlt1Item(pub i64);
impl std::ops::Deref for Root370Item212ItemAlt1Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item212ItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom(
                "Root370Item212ItemAlt1Item: integer below minimum",
            ));
        }
        if x > 13312 {
            return Err(DeError::custom(
                "Root370Item212ItemAlt1Item: integer above maximum",
            ));
        }

        Ok(Root370Item212ItemAlt1Item(x))
    }
}
#[derive(Debug)]
pub enum Root370Item212Item {
    V0(Root370Item212ItemAlt0),
    V1(Vec<Root370Item212ItemAlt1Item>),
}

impl<'de> Deserialize<'de> for Root370Item212Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root370Item212ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root370Item212Item::V0(x));
        }
        if let Ok(x) =
            <Vec<Root370Item212ItemAlt1Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root370Item212Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item215000(pub i64);
impl std::ops::Deref for Root370Item215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item215000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root370Item215000: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root370Item215000: integer above maximum"));
        }

        Ok(Root370Item215000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item21500(pub Root370Item215000);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root370Item21501ItemItem(pub f64);
impl std::ops::Deref for Root370Item21501ItemItem {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item21501ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom(
                "Root370Item21501ItemItem: non-finite number",
            ));
        }
        if x < -115.005603699999995 {
            return Err(DeError::custom(
                "Root370Item21501ItemItem: number below minimum",
            ));
        }
        if x > 2146.032000000000153 {
            return Err(DeError::custom(
                "Root370Item21501ItemItem: number above maximum",
            ));
        }

        Ok(Root370Item21501ItemItem(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item2150(
    pub Root370Item21500,
    pub Vec<Option<Vec<Option<Root370Item21501ItemItem>>>>,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item215(pub Root370Item2150);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item2160(pub i64);
impl std::ops::Deref for Root370Item2160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item2160 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root370Item2160: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root370Item2160: integer above maximum"));
        }

        Ok(Root370Item2160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item2163Item(pub i64);
impl std::ops::Deref for Root370Item2163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item2163Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root370Item2163Item: integer below minimum",
            ));
        }
        if x > 14 {
            return Err(DeError::custom(
                "Root370Item2163Item: integer above maximum",
            ));
        }

        Ok(Root370Item2163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item21653Item(pub i64);
impl std::ops::Deref for Root370Item21653Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item21653Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root370Item21653Item: integer below minimum",
            ));
        }
        if x > 8 {
            return Err(DeError::custom(
                "Root370Item21653Item: integer above maximum",
            ));
        }

        Ok(Root370Item21653Item(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item2165(
    pub Null,
    pub Null,
    pub String,
    pub Vec<Root370Item21653Item>,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item21680(pub i64);
impl std::ops::Deref for Root370Item21680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item21680 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2007 {
            return Err(DeError::custom("Root370Item21680: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root370Item21680: integer above maximum"));
        }

        Ok(Root370Item21680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item21681(pub i64);
impl std::ops::Deref for Root370Item21681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item21681 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root370Item21681: integer below minimum"));
        }
        if x > 12 {
            return Err(DeError::custom("Root370Item21681: integer above maximum"));
        }

        Ok(Root370Item21681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item21682(pub i64);
impl std::ops::Deref for Root370Item21682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item21682 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root370Item21682: integer below minimum"));
        }
        if x > 31 {
            return Err(DeError::custom("Root370Item21682: integer above maximum"));
        }

        Ok(Root370Item21682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item21683(pub i64);
impl std::ops::Deref for Root370Item21683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item21683 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root370Item21683: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root370Item21683: integer above maximum"));
        }

        Ok(Root370Item21683(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item2168(
    pub Root370Item21680,
    pub Root370Item21681,
    pub Root370Item21682,
    pub Root370Item21683,
);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item216(
    pub Root370Item2160,
    pub Null,
    pub Null,
    pub Option<Vec<Root370Item2163Item>>,
    pub Null,
    pub Root370Item2165,
    pub Null,
    pub Null,
    pub Root370Item2168,
);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root370Item21192 {
    V1,
}
impl<'de> Deserialize<'de> for Root370Item21192 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "1" => Ok(Root370Item21192::V1),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root370Item21192 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root370Item21192::V1 => ser.serialize_str("1"),
        }
    }
}

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item2119(pub String, pub String, pub Root370Item21192);

/// tuple len=20 (required first 20 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item21(
    pub Null,
    pub Root370Item211,
    pub Vec<Option<Root370Item212Item>>,
    pub Null,
    pub Null,
    pub Root370Item215,
    pub Root370Item216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root370Item2119,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root370Item22(pub i64);
impl std::ops::Deref for Root370Item22 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root370Item22 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root370Item22: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root370Item22: integer above maximum"));
        }

        Ok(Root370Item22(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item29(pub String, pub String);

/// tuple len=32 (required first 32 slots)
#[derive(Debug, Deserialize)]
pub struct Root370Item(
    pub String,
    pub Root370Item1,
    pub Root370Item2,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Root370Item6,
    pub Null,
    pub Root370Item8,
    pub String,
    pub Root370Item10,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root370Item15,
    pub Null,
    pub Option<Root370Item17>,
    pub Null,
    pub Null,
    pub Option<Root370Item20>,
    pub Root370Item21,
    pub Root370Item22,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root370Item29,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root371(pub i64);
impl std::ops::Deref for Root371 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root371 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root371: integer below minimum"));
        }
        if x > 5490 {
            return Err(DeError::custom("Root371: integer above maximum"));
        }

        Ok(Root371(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root375(pub String);
impl std::ops::Deref for Root375 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT375: Lazy<Regex> =
    Lazy::new(|| Regex::new("^EvgDKYQi49-NlUMIDwAAAAEAAAMAAAAAA.*").unwrap());
impl<'de> Deserialize<'de> for Root375 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT375.is_match(&s) {
            return Err(DeError::custom("Root375: string failed pattern"));
        }
        Ok(Root375(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root378000(pub i64);
impl std::ops::Deref for Root378000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root378000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root378000: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root378000: integer above maximum"));
        }

        Ok(Root378000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root378001(pub i64);
impl std::ops::Deref for Root378001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root378001 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root378001: integer below minimum"));
        }
        if x > 199 {
            return Err(DeError::custom("Root378001: integer above maximum"));
        }

        Ok(Root378001(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root37800(pub Root378000, pub Root378001);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root3780(pub Root37800);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3781(pub i64);
impl std::ops::Deref for Root3781 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3781 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3781: integer below minimum"));
        }
        if x > 60 {
            return Err(DeError::custom("Root3781: integer above maximum"));
        }

        Ok(Root3781(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3783(pub i64);
impl std::ops::Deref for Root3783 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3783 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3783: integer below minimum"));
        }
        if x > 199 {
            return Err(DeError::custom("Root3783: integer above maximum"));
        }

        Ok(Root3783(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root3784(pub i64);
impl std::ops::Deref for Root3784 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root3784 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root3784: integer below minimum"));
        }
        if x > 200 {
            return Err(DeError::custom("Root3784: integer above maximum"));
        }

        Ok(Root3784(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root378(
    pub Root3780,
    pub Root3781,
    pub Null,
    pub Root3783,
    pub Root3784,
);

/// tuple len=9 (required first 8 slots); accepts 8..=9 elements
#[derive(Debug)]
pub struct Root37(
    pub Option<Vec<Root370Item>>,
    pub Option<Root371>,
    pub Null,
    pub String,
    pub Null,
    pub Option<Root375>,
    pub Null,
    pub Null,
    pub Option<Root378>,
);

impl<'de> serde::Deserialize<'de> for Root37 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root37;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 8..=9")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root37, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: Option<Vec<Root370Item>> =
                    match seq.next_element::<Option<Vec<Root370Item>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(0, &"at least 8 elements"));
                        }
                    };
                let a1: Option<Root371> = match seq.next_element::<Option<Root371>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 8 elements"));
                    }
                };
                let a2: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(2, &"at least 8 elements"));
                    }
                };
                let a3: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 8 elements"));
                    }
                };
                let a4: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 8 elements"));
                    }
                };
                let a5: Option<Root375> = match seq.next_element::<Option<Root375>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(5, &"at least 8 elements"));
                    }
                };
                let a6: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(6, &"at least 8 elements"));
                    }
                };
                let a7: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(7, &"at least 8 elements"));
                    }
                };
                let a8: Option<Root378> = match seq.next_element::<Option<Root378>>()? {
                    Some(v) => v,
                    None => None,
                };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root37(a0, a1, a2, a3, a4, a5, a6, a7, a8))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root40(pub i64);
impl std::ops::Deref for Root40 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root40 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root40: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root40: integer above maximum"));
        }

        Ok(Root40(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root490(pub String);
impl std::ops::Deref for Root490 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root490 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root490: expected URI scheme"));
        }
        Ok(Root490(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root491(pub String);
impl std::ops::Deref for Root491 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT491: Lazy<Regex> = Lazy::new(|| Regex::new("^Claim this business.*").unwrap());
impl<'de> Deserialize<'de> for Root491 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT491.is_match(&s) {
            return Err(DeError::custom("Root491: string failed pattern"));
        }
        Ok(Root491(s))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root49(pub Root490, pub Root491, pub Null, pub String);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root57(
    pub Null,
    pub String,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root61(pub i64);
impl std::ops::Deref for Root61 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root61 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root61: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root61: integer above maximum"));
        }

        Ok(Root61(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root64ItemAlt0(pub i64);
impl std::ops::Deref for Root64ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root64ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root64ItemAlt0: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root64ItemAlt0: integer above maximum"));
        }

        Ok(Root64ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root64ItemAlt1(pub String);
impl std::ops::Deref for Root64ItemAlt1 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT64ITEMALT1: Lazy<Regex> = Lazy::new(|| Regex::new("^2-star hotel.*").unwrap());
impl<'de> Deserialize<'de> for Root64ItemAlt1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT64ITEMALT1.is_match(&s) {
            return Err(DeError::custom("Root64ItemAlt1: string failed pattern"));
        }
        Ok(Root64ItemAlt1(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root64ItemAlt2ItemItemAlt0(pub i64);
impl std::ops::Deref for Root64ItemAlt2ItemItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root64ItemAlt2ItemItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root64ItemAlt2ItemItemAlt0: integer below minimum",
            ));
        }
        if x > 22 {
            return Err(DeError::custom(
                "Root64ItemAlt2ItemItemAlt0: integer above maximum",
            ));
        }

        Ok(Root64ItemAlt2ItemItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root64ItemAlt2ItemItemAlt1(pub String);
impl std::ops::Deref for Root64ItemAlt2ItemItemAlt1 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT64ITEMALT2ITEMITEMALT1: Lazy<Regex> =
    Lazy::new(|| Regex::new("^Free Wi-Fi.*").unwrap());
impl<'de> Deserialize<'de> for Root64ItemAlt2ItemItemAlt1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT64ITEMALT2ITEMITEMALT1.is_match(&s) {
            return Err(DeError::custom(
                "Root64ItemAlt2ItemItemAlt1: string failed pattern",
            ));
        }
        Ok(Root64ItemAlt2ItemItemAlt1(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root64ItemAlt2ItemItemAlt2Item0(pub i64);
impl std::ops::Deref for Root64ItemAlt2ItemItemAlt2Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root64ItemAlt2ItemItemAlt2Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root64ItemAlt2ItemItemAlt2Item0: integer below minimum",
            ));
        }
        if x > 2 {
            return Err(DeError::custom(
                "Root64ItemAlt2ItemItemAlt2Item0: integer above maximum",
            ));
        }

        Ok(Root64ItemAlt2ItemItemAlt2Item0(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root64ItemAlt2ItemItemAlt2Item(pub Root64ItemAlt2ItemItemAlt2Item0);

#[derive(Debug)]
pub enum Root64ItemAlt2ItemItem {
    V0(Root64ItemAlt2ItemItemAlt0),
    V1(Root64ItemAlt2ItemItemAlt1),
    V2(Vec<Root64ItemAlt2ItemItemAlt2Item>),
}

impl<'de> Deserialize<'de> for Root64ItemAlt2ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root64ItemAlt2ItemItemAlt0 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root64ItemAlt2ItemItem::V0(x));
        }
        if let Ok(x) = <Root64ItemAlt2ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root64ItemAlt2ItemItem::V1(x));
        }
        if let Ok(x) =
            <Vec<Root64ItemAlt2ItemItemAlt2Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root64ItemAlt2ItemItem::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root64Item {
    V0(Root64ItemAlt0),
    V1(Root64ItemAlt1),
    V2(Vec<Vec<Option<Root64ItemAlt2ItemItem>>>),
}

impl<'de> Deserialize<'de> for Root64Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root64ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root64Item::V0(x));
        }
        if let Ok(x) = <Root64ItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root64Item::V1(x));
        }
        if let Ok(x) = <Vec<Vec<Option<Root64ItemAlt2ItemItem>>> as serde::Deserialize>::deserialize(
            val.clone(),
        ) {
            return Ok(Root64Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root67(pub i64);
impl std::ops::Deref for Root67 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root67 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root67: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root67: integer above maximum"));
        }

        Ok(Root67(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72001(pub i64);
impl std::ops::Deref for Root72001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72001 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root72001: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root72001: integer above maximum"));
        }

        Ok(Root72001(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72002(pub i64);
impl std::ops::Deref for Root72002 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72002 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72002: integer below minimum"));
        }
        if x > 27 {
            return Err(DeError::custom("Root72002: integer above maximum"));
        }

        Ok(Root72002(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root720060(pub String);
impl std::ops::Deref for Root720060 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT720060: Lazy<Regex> = Lazy::new(|| Regex::new("^https://.*").unwrap());
impl<'de> Deserialize<'de> for Root720060 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT720060.is_match(&s) {
            return Err(DeError::custom("Root720060: string failed pattern"));
        }
        Ok(Root720060(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200620(pub i64);
impl std::ops::Deref for Root7200620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200620 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7200620: integer below minimum"));
        }
        if x > 13312 {
            return Err(DeError::custom("Root7200620: integer above maximum"));
        }

        Ok(Root7200620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200621(pub i64);
impl std::ops::Deref for Root7200621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200621 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7200621: integer below minimum"));
        }
        if x > 12000 {
            return Err(DeError::custom("Root7200621: integer above maximum"));
        }

        Ok(Root7200621(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720062(pub Root7200620, pub Root7200621);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200630(pub i64);
impl std::ops::Deref for Root7200630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200630 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 86 {
            return Err(DeError::custom("Root7200630: integer below minimum"));
        }
        if x > 86 {
            return Err(DeError::custom("Root7200630: integer above maximum"));
        }

        Ok(Root7200630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200631(pub i64);
impl std::ops::Deref for Root7200631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200631 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 86 {
            return Err(DeError::custom("Root7200631: integer below minimum"));
        }
        if x > 86 {
            return Err(DeError::custom("Root7200631: integer above maximum"));
        }

        Ok(Root7200631(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720063(pub Root7200630, pub Root7200631);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72006(
    pub Root720060,
    pub String,
    pub Option<Root720062>,
    pub Root720063,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200800(pub i64);
impl std::ops::Deref for Root7200800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200800 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root7200800: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root7200800: integer above maximum"));
        }

        Ok(Root7200800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root7200801(pub f64);
impl std::ops::Deref for Root7200801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200801 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root7200801: non-finite number"));
        }
        if x < -115.005603699999995 {
            return Err(DeError::custom("Root7200801: number below minimum"));
        }
        if x > 0.0 {
            return Err(DeError::custom("Root7200801: number above maximum"));
        }

        Ok(Root7200801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root7200802(pub f64);
impl std::ops::Deref for Root7200802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200802 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root7200802: non-finite number"));
        }
        if x < 0.0 {
            return Err(DeError::custom("Root7200802: number below minimum"));
        }
        if x > 42.395631000000002 {
            return Err(DeError::custom("Root7200802: number above maximum"));
        }

        Ok(Root7200802(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root720080(pub Root7200800, pub Root7200801, pub Root7200802);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root7200810(pub f64);
impl std::ops::Deref for Root7200810 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200810 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root7200810: non-finite number"));
        }
        if x < 0.0 {
            return Err(DeError::custom("Root7200810: number below minimum"));
        }
        if x > 358.973880000000008 {
            return Err(DeError::custom("Root7200810: number above maximum"));
        }

        Ok(Root7200810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200811(pub i64);
impl std::ops::Deref for Root7200811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200811 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 90 {
            return Err(DeError::custom("Root7200811: integer below minimum"));
        }
        if x > 100 {
            return Err(DeError::custom("Root7200811: integer above maximum"));
        }

        Ok(Root7200811(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720081(pub Root7200810, pub Root7200811);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200820(pub i64);
impl std::ops::Deref for Root7200820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200820 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7200820: integer below minimum"));
        }
        if x > 13312 {
            return Err(DeError::custom("Root7200820: integer above maximum"));
        }

        Ok(Root7200820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200821(pub i64);
impl std::ops::Deref for Root7200821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200821 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7200821: integer below minimum"));
        }
        if x > 12000 {
            return Err(DeError::custom("Root7200821: integer above maximum"));
        }

        Ok(Root7200821(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720082(pub Root7200820, pub Root7200821);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720083(pub i64);
impl std::ops::Deref for Root720083 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720083 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 75 {
            return Err(DeError::custom("Root720083: integer below minimum"));
        }
        if x > 75 {
            return Err(DeError::custom("Root720083: integer above maximum"));
        }

        Ok(Root720083(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72008(
    pub Root720080,
    pub Root720081,
    pub Root720082,
    pub Root720083,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root720015000(pub String);
impl std::ops::Deref for Root720015000 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT720015000: Lazy<Regex> = Lazy::new(|| Regex::new("^0x8.*").unwrap());
impl<'de> Deserialize<'de> for Root720015000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT720015000.is_match(&s) {
            return Err(DeError::custom("Root720015000: string failed pattern"));
        }
        Ok(Root720015000(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root72001500(pub Root720015000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root7200150(pub Root72001500);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root720015(pub Root7200150);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root720017(pub String);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root720020 {
    Photo,
    StreetView,
    Video,
}
impl<'de> Deserialize<'de> for Root720020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Photo" => Ok(Root720020::Photo),
            "Street View" => Ok(Root720020::StreetView),
            "Video" => Ok(Root720020::Video),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root720020 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root720020::Photo => ser.serialize_str("Photo"),
            Root720020::StreetView => ser.serialize_str("Street View"),
            Root720020::Video => ser.serialize_str("Video"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72002110(pub i64);
impl std::ops::Deref for Root72002110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72002110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72002110: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root72002110: integer above maximum"));
        }

        Ok(Root72002110(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root7200211(pub Root72002110, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200212ItemAlt0(pub i64);
impl std::ops::Deref for Root7200212ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200212ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root7200212ItemAlt0: integer below minimum",
            ));
        }
        if x > 10 {
            return Err(DeError::custom(
                "Root7200212ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root7200212ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200212ItemAlt1Item(pub i64);
impl std::ops::Deref for Root7200212ItemAlt1Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200212ItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom(
                "Root7200212ItemAlt1Item: integer below minimum",
            ));
        }
        if x > 13312 {
            return Err(DeError::custom(
                "Root7200212ItemAlt1Item: integer above maximum",
            ));
        }

        Ok(Root7200212ItemAlt1Item(x))
    }
}
#[derive(Debug)]
pub enum Root7200212Item {
    V0(Root7200212ItemAlt0),
    V1(Vec<Root7200212ItemAlt1Item>),
}

impl<'de> Deserialize<'de> for Root7200212Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root7200212ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root7200212Item::V0(x));
        }
        if let Ok(x) =
            <Vec<Root7200212ItemAlt1Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root7200212Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7200215000(pub i64);
impl std::ops::Deref for Root7200215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7200215000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root7200215000: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root7200215000: integer above maximum"));
        }

        Ok(Root7200215000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root720021500(pub Root7200215000);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root720021501ItemItem(pub f64);
impl std::ops::Deref for Root720021501ItemItem {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720021501ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root720021501ItemItem: non-finite number"));
        }
        if x < -115.005603699999995 {
            return Err(DeError::custom(
                "Root720021501ItemItem: number below minimum",
            ));
        }
        if x > 2146.032000000000153 {
            return Err(DeError::custom(
                "Root720021501ItemItem: number above maximum",
            ));
        }

        Ok(Root720021501ItemItem(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root72002150(
    pub Root720021500,
    pub Vec<Option<Vec<Option<Root720021501ItemItem>>>>,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root7200215(pub Root72002150);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72002160(pub i64);
impl std::ops::Deref for Root72002160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72002160 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72002160: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root72002160: integer above maximum"));
        }

        Ok(Root72002160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72002163Item(pub i64);
impl std::ops::Deref for Root72002163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72002163Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72002163Item: integer below minimum"));
        }
        if x > 14 {
            return Err(DeError::custom("Root72002163Item: integer above maximum"));
        }

        Ok(Root72002163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720021653Item(pub i64);
impl std::ops::Deref for Root720021653Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720021653Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root720021653Item: integer below minimum"));
        }
        if x > 8 {
            return Err(DeError::custom("Root720021653Item: integer above maximum"));
        }

        Ok(Root720021653Item(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72002165(pub Null, pub Null, pub String, pub Vec<Root720021653Item>);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720021680(pub i64);
impl std::ops::Deref for Root720021680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720021680 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2007 {
            return Err(DeError::custom("Root720021680: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root720021680: integer above maximum"));
        }

        Ok(Root720021680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720021681(pub i64);
impl std::ops::Deref for Root720021681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720021681 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root720021681: integer below minimum"));
        }
        if x > 12 {
            return Err(DeError::custom("Root720021681: integer above maximum"));
        }

        Ok(Root720021681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720021682(pub i64);
impl std::ops::Deref for Root720021682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720021682 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root720021682: integer below minimum"));
        }
        if x > 31 {
            return Err(DeError::custom("Root720021682: integer above maximum"));
        }

        Ok(Root720021682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720021683(pub i64);
impl std::ops::Deref for Root720021683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720021683 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root720021683: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root720021683: integer above maximum"));
        }

        Ok(Root720021683(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72002168(
    pub Root720021680,
    pub Root720021681,
    pub Root720021682,
    pub Root720021683,
);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root7200216(
    pub Root72002160,
    pub Null,
    pub Null,
    pub Option<Vec<Root72002163Item>>,
    pub Null,
    pub Root72002165,
    pub Null,
    pub Null,
    pub Root72002168,
);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root720021192 {
    V1,
}
impl<'de> Deserialize<'de> for Root720021192 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "1" => Ok(Root720021192::V1),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root720021192 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root720021192::V1 => ser.serialize_str("1"),
        }
    }
}

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root72002119(pub String, pub String, pub Root720021192);

/// tuple len=20 (required first 20 slots)
#[derive(Debug, Deserialize)]
pub struct Root720021(
    pub Null,
    pub Root7200211,
    pub Vec<Option<Root7200212Item>>,
    pub Null,
    pub Null,
    pub Root7200215,
    pub Root7200216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root72002119,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720022(pub i64);
impl std::ops::Deref for Root720022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720022 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root720022: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root720022: integer above maximum"));
        }

        Ok(Root720022(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720026ItemAlt0(pub i64);
impl std::ops::Deref for Root720026ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720026ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12388 {
            return Err(DeError::custom("Root720026ItemAlt0: integer below minimum"));
        }
        if x > 59499 {
            return Err(DeError::custom("Root720026ItemAlt0: integer above maximum"));
        }

        Ok(Root720026ItemAlt0(x))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root720026ItemAlt1 {
    V7a63564fd79e308c,
    B0c7492059023d89,
}
impl<'de> Deserialize<'de> for Root720026ItemAlt1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "7a63564fd79e308c" => Ok(Root720026ItemAlt1::V7a63564fd79e308c),
            "b0c7492059023d89" => Ok(Root720026ItemAlt1::B0c7492059023d89),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root720026ItemAlt1 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root720026ItemAlt1::V7a63564fd79e308c => ser.serialize_str("7a63564fd79e308c"),
            Root720026ItemAlt1::B0c7492059023d89 => ser.serialize_str("b0c7492059023d89"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720026ItemAlt2Item0(pub i64);
impl std::ops::Deref for Root720026ItemAlt2Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720026ItemAlt2Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 18 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item0: integer below minimum",
            ));
        }
        if x > 37 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item0: integer above maximum",
            ));
        }

        Ok(Root720026ItemAlt2Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720026ItemAlt2Item1(pub i64);
impl std::ops::Deref for Root720026ItemAlt2Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720026ItemAlt2Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item1: integer below minimum",
            ));
        }
        if x > 1920 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item1: integer above maximum",
            ));
        }

        Ok(Root720026ItemAlt2Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720026ItemAlt2Item2(pub i64);
impl std::ops::Deref for Root720026ItemAlt2Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720026ItemAlt2Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 360 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item2: integer below minimum",
            ));
        }
        if x > 1080 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item2: integer above maximum",
            ));
        }

        Ok(Root720026ItemAlt2Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root720026ItemAlt2Item3(pub String);
impl std::ops::Deref for Root720026ItemAlt2Item3 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT720026ITEMALT2ITEM3: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://lh3\\.googleusercontent\\.com/g.*").unwrap());
impl<'de> Deserialize<'de> for Root720026ItemAlt2Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT720026ITEMALT2ITEM3.is_match(&s) {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item3: string failed pattern",
            ));
        }
        Ok(Root720026ItemAlt2Item3(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720026ItemAlt2Item4(pub i64);
impl std::ops::Deref for Root720026ItemAlt2Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720026ItemAlt2Item4 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item4: integer below minimum",
            ));
        }
        if x > 3 {
            return Err(DeError::custom(
                "Root720026ItemAlt2Item4: integer above maximum",
            ));
        }

        Ok(Root720026ItemAlt2Item4(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root720026ItemAlt2Item(
    pub Option<Root720026ItemAlt2Item0>,
    pub Root720026ItemAlt2Item1,
    pub Root720026ItemAlt2Item2,
    pub Root720026ItemAlt2Item3,
    pub Root720026ItemAlt2Item4,
);

#[derive(Debug)]
pub enum Root720026Item {
    V0(Root720026ItemAlt0),
    V1(Root720026ItemAlt1),
    V2(Vec<Root720026ItemAlt2Item>),
}

impl<'de> Deserialize<'de> for Root720026Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root720026ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root720026Item::V0(x));
        }
        if let Ok(x) = <Root720026ItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root720026Item::V1(x));
        }
        if let Ok(x) = <Vec<Root720026ItemAlt2Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root720026Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720029(pub String, pub String);

/// tuple len=32 (required first 32 slots)
#[derive(Debug, Deserialize)]
pub struct Root7200(
    pub String,
    pub Root72001,
    pub Root72002,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Root72006,
    pub Null,
    pub Root72008,
    pub String,
    pub String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root720015,
    pub Null,
    pub Option<Root720017>,
    pub Null,
    pub Null,
    pub Root720020,
    pub Root720021,
    pub Root720022,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Vec<Root720026Item>>,
    pub Null,
    pub Null,
    pub Root720029,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72011(pub i64);
impl std::ops::Deref for Root72011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72011 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root72011: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root72011: integer above maximum"));
        }

        Ok(Root72011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72012(pub i64);
impl std::ops::Deref for Root72012 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72012 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72012: integer below minimum"));
        }
        if x > 27 {
            return Err(DeError::custom("Root72012: integer above maximum"));
        }

        Ok(Root72012(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root720160(pub String);
impl std::ops::Deref for Root720160 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT720160: Lazy<Regex> = Lazy::new(|| Regex::new("^https://.*").unwrap());
impl<'de> Deserialize<'de> for Root720160 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT720160.is_match(&s) {
            return Err(DeError::custom("Root720160: string failed pattern"));
        }
        Ok(Root720160(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201620(pub i64);
impl std::ops::Deref for Root7201620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201620 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7201620: integer below minimum"));
        }
        if x > 13312 {
            return Err(DeError::custom("Root7201620: integer above maximum"));
        }

        Ok(Root7201620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201621(pub i64);
impl std::ops::Deref for Root7201621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201621 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7201621: integer below minimum"));
        }
        if x > 12000 {
            return Err(DeError::custom("Root7201621: integer above maximum"));
        }

        Ok(Root7201621(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720162(pub Root7201620, pub Root7201621);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201630(pub i64);
impl std::ops::Deref for Root7201630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201630 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 408 {
            return Err(DeError::custom("Root7201630: integer below minimum"));
        }
        if x > 408 {
            return Err(DeError::custom("Root7201630: integer above maximum"));
        }

        Ok(Root7201630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201631(pub i64);
impl std::ops::Deref for Root7201631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201631 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 240 {
            return Err(DeError::custom("Root7201631: integer below minimum"));
        }
        if x > 240 {
            return Err(DeError::custom("Root7201631: integer above maximum"));
        }

        Ok(Root7201631(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720163(pub Root7201630, pub Root7201631);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72016(
    pub Root720160,
    pub String,
    pub Option<Root720162>,
    pub Root720163,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201800(pub i64);
impl std::ops::Deref for Root7201800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201800 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root7201800: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root7201800: integer above maximum"));
        }

        Ok(Root7201800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root7201801(pub f64);
impl std::ops::Deref for Root7201801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201801 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root7201801: non-finite number"));
        }
        if x < -115.005603699999995 {
            return Err(DeError::custom("Root7201801: number below minimum"));
        }
        if x > 0.0 {
            return Err(DeError::custom("Root7201801: number above maximum"));
        }

        Ok(Root7201801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root7201802(pub f64);
impl std::ops::Deref for Root7201802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201802 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root7201802: non-finite number"));
        }
        if x < 0.0 {
            return Err(DeError::custom("Root7201802: number below minimum"));
        }
        if x > 42.395631000000002 {
            return Err(DeError::custom("Root7201802: number above maximum"));
        }

        Ok(Root7201802(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root720180(pub Root7201800, pub Root7201801, pub Root7201802);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root7201810(pub f64);
impl std::ops::Deref for Root7201810 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201810 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root7201810: non-finite number"));
        }
        if x < 0.0 {
            return Err(DeError::custom("Root7201810: number below minimum"));
        }
        if x > 358.973880000000008 {
            return Err(DeError::custom("Root7201810: number above maximum"));
        }

        Ok(Root7201810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201811(pub i64);
impl std::ops::Deref for Root7201811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201811 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 90 {
            return Err(DeError::custom("Root7201811: integer below minimum"));
        }
        if x > 100 {
            return Err(DeError::custom("Root7201811: integer above maximum"));
        }

        Ok(Root7201811(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720181(pub Root7201810, pub Root7201811);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201820(pub i64);
impl std::ops::Deref for Root7201820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201820 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7201820: integer below minimum"));
        }
        if x > 13312 {
            return Err(DeError::custom("Root7201820: integer above maximum"));
        }

        Ok(Root7201820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201821(pub i64);
impl std::ops::Deref for Root7201821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201821 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom("Root7201821: integer below minimum"));
        }
        if x > 12000 {
            return Err(DeError::custom("Root7201821: integer above maximum"));
        }

        Ok(Root7201821(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720182(pub Root7201820, pub Root7201821);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720183(pub i64);
impl std::ops::Deref for Root720183 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720183 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 75 {
            return Err(DeError::custom("Root720183: integer below minimum"));
        }
        if x > 75 {
            return Err(DeError::custom("Root720183: integer above maximum"));
        }

        Ok(Root720183(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72018(
    pub Root720180,
    pub Root720181,
    pub Root720182,
    pub Root720183,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root720115000(pub String);
impl std::ops::Deref for Root720115000 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT720115000: Lazy<Regex> = Lazy::new(|| Regex::new("^0x8.*").unwrap());
impl<'de> Deserialize<'de> for Root720115000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT720115000.is_match(&s) {
            return Err(DeError::custom("Root720115000: string failed pattern"));
        }
        Ok(Root720115000(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root72011500(pub Root720115000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root7201150(pub Root72011500);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root720115(pub Root7201150);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root720117(pub String);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root720120 {
    Photo,
    StreetView,
    Video,
}
impl<'de> Deserialize<'de> for Root720120 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Photo" => Ok(Root720120::Photo),
            "Street View" => Ok(Root720120::StreetView),
            "Video" => Ok(Root720120::Video),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root720120 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root720120::Photo => ser.serialize_str("Photo"),
            Root720120::StreetView => ser.serialize_str("Street View"),
            Root720120::Video => ser.serialize_str("Video"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72012110(pub i64);
impl std::ops::Deref for Root72012110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72012110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72012110: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root72012110: integer above maximum"));
        }

        Ok(Root72012110(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root7201211(pub Root72012110, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201212ItemAlt0(pub i64);
impl std::ops::Deref for Root7201212ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201212ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root7201212ItemAlt0: integer below minimum",
            ));
        }
        if x > 10 {
            return Err(DeError::custom(
                "Root7201212ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root7201212ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201212ItemAlt1Item(pub i64);
impl std::ops::Deref for Root7201212ItemAlt1Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201212ItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 250 {
            return Err(DeError::custom(
                "Root7201212ItemAlt1Item: integer below minimum",
            ));
        }
        if x > 13312 {
            return Err(DeError::custom(
                "Root7201212ItemAlt1Item: integer above maximum",
            ));
        }

        Ok(Root7201212ItemAlt1Item(x))
    }
}
#[derive(Debug)]
pub enum Root7201212Item {
    V0(Root7201212ItemAlt0),
    V1(Vec<Root7201212ItemAlt1Item>),
}

impl<'de> Deserialize<'de> for Root7201212Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root7201212ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root7201212Item::V0(x));
        }
        if let Ok(x) =
            <Vec<Root7201212ItemAlt1Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root7201212Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7201215000(pub i64);
impl std::ops::Deref for Root7201215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7201215000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root7201215000: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root7201215000: integer above maximum"));
        }

        Ok(Root7201215000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root720121500(pub Root7201215000);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root720121501ItemItem(pub f64);
impl std::ops::Deref for Root720121501ItemItem {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720121501ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root720121501ItemItem: non-finite number"));
        }
        if x < -115.005603699999995 {
            return Err(DeError::custom(
                "Root720121501ItemItem: number below minimum",
            ));
        }
        if x > 2146.032000000000153 {
            return Err(DeError::custom(
                "Root720121501ItemItem: number above maximum",
            ));
        }

        Ok(Root720121501ItemItem(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root72012150(
    pub Root720121500,
    pub Vec<Option<Vec<Option<Root720121501ItemItem>>>>,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root7201215(pub Root72012150);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72012160(pub i64);
impl std::ops::Deref for Root72012160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72012160 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72012160: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root72012160: integer above maximum"));
        }

        Ok(Root72012160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root72012163Item(pub i64);
impl std::ops::Deref for Root72012163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root72012163Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root72012163Item: integer below minimum"));
        }
        if x > 14 {
            return Err(DeError::custom("Root72012163Item: integer above maximum"));
        }

        Ok(Root72012163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720121653Item(pub i64);
impl std::ops::Deref for Root720121653Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720121653Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root720121653Item: integer below minimum"));
        }
        if x > 8 {
            return Err(DeError::custom("Root720121653Item: integer above maximum"));
        }

        Ok(Root720121653Item(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72012165(pub Null, pub Null, pub String, pub Vec<Root720121653Item>);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720121680(pub i64);
impl std::ops::Deref for Root720121680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720121680 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2007 {
            return Err(DeError::custom("Root720121680: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root720121680: integer above maximum"));
        }

        Ok(Root720121680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720121681(pub i64);
impl std::ops::Deref for Root720121681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720121681 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root720121681: integer below minimum"));
        }
        if x > 12 {
            return Err(DeError::custom("Root720121681: integer above maximum"));
        }

        Ok(Root720121681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720121682(pub i64);
impl std::ops::Deref for Root720121682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720121682 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root720121682: integer below minimum"));
        }
        if x > 31 {
            return Err(DeError::custom("Root720121682: integer above maximum"));
        }

        Ok(Root720121682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720121683(pub i64);
impl std::ops::Deref for Root720121683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720121683 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root720121683: integer below minimum"));
        }
        if x > 23 {
            return Err(DeError::custom("Root720121683: integer above maximum"));
        }

        Ok(Root720121683(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root72012168(
    pub Root720121680,
    pub Root720121681,
    pub Root720121682,
    pub Root720121683,
);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root7201216(
    pub Root72012160,
    pub Null,
    pub Null,
    pub Option<Vec<Root72012163Item>>,
    pub Null,
    pub Root72012165,
    pub Null,
    pub Null,
    pub Root72012168,
);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root720121192 {
    V1,
}
impl<'de> Deserialize<'de> for Root720121192 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "1" => Ok(Root720121192::V1),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root720121192 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root720121192::V1 => ser.serialize_str("1"),
        }
    }
}

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root72012119(pub String, pub String, pub Root720121192);

/// tuple len=20 (required first 20 slots)
#[derive(Debug, Deserialize)]
pub struct Root720121(
    pub Null,
    pub Root7201211,
    pub Vec<Option<Root7201212Item>>,
    pub Null,
    pub Null,
    pub Root7201215,
    pub Root7201216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root72012119,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720122(pub i64);
impl std::ops::Deref for Root720122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720122 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root720122: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root720122: integer above maximum"));
        }

        Ok(Root720122(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720126ItemAlt0(pub i64);
impl std::ops::Deref for Root720126ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720126ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12388 {
            return Err(DeError::custom("Root720126ItemAlt0: integer below minimum"));
        }
        if x > 59499 {
            return Err(DeError::custom("Root720126ItemAlt0: integer above maximum"));
        }

        Ok(Root720126ItemAlt0(x))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root720126ItemAlt1 {
    V7a63564fd79e308c,
    B0c7492059023d89,
}
impl<'de> Deserialize<'de> for Root720126ItemAlt1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "7a63564fd79e308c" => Ok(Root720126ItemAlt1::V7a63564fd79e308c),
            "b0c7492059023d89" => Ok(Root720126ItemAlt1::B0c7492059023d89),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root720126ItemAlt1 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root720126ItemAlt1::V7a63564fd79e308c => ser.serialize_str("7a63564fd79e308c"),
            Root720126ItemAlt1::B0c7492059023d89 => ser.serialize_str("b0c7492059023d89"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720126ItemAlt2Item0(pub i64);
impl std::ops::Deref for Root720126ItemAlt2Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720126ItemAlt2Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 18 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item0: integer below minimum",
            ));
        }
        if x > 37 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item0: integer above maximum",
            ));
        }

        Ok(Root720126ItemAlt2Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720126ItemAlt2Item1(pub i64);
impl std::ops::Deref for Root720126ItemAlt2Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720126ItemAlt2Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item1: integer below minimum",
            ));
        }
        if x > 1920 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item1: integer above maximum",
            ));
        }

        Ok(Root720126ItemAlt2Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720126ItemAlt2Item2(pub i64);
impl std::ops::Deref for Root720126ItemAlt2Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720126ItemAlt2Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 360 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item2: integer below minimum",
            ));
        }
        if x > 1080 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item2: integer above maximum",
            ));
        }

        Ok(Root720126ItemAlt2Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root720126ItemAlt2Item3(pub String);
impl std::ops::Deref for Root720126ItemAlt2Item3 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT720126ITEMALT2ITEM3: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://lh3\\.googleusercontent\\.com/g.*").unwrap());
impl<'de> Deserialize<'de> for Root720126ItemAlt2Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT720126ITEMALT2ITEM3.is_match(&s) {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item3: string failed pattern",
            ));
        }
        Ok(Root720126ItemAlt2Item3(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root720126ItemAlt2Item4(pub i64);
impl std::ops::Deref for Root720126ItemAlt2Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root720126ItemAlt2Item4 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item4: integer below minimum",
            ));
        }
        if x > 3 {
            return Err(DeError::custom(
                "Root720126ItemAlt2Item4: integer above maximum",
            ));
        }

        Ok(Root720126ItemAlt2Item4(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root720126ItemAlt2Item(
    pub Option<Root720126ItemAlt2Item0>,
    pub Root720126ItemAlt2Item1,
    pub Root720126ItemAlt2Item2,
    pub Root720126ItemAlt2Item3,
    pub Root720126ItemAlt2Item4,
);

#[derive(Debug)]
pub enum Root720126Item {
    V0(Root720126ItemAlt0),
    V1(Root720126ItemAlt1),
    V2(Vec<Root720126ItemAlt2Item>),
}

impl<'de> Deserialize<'de> for Root720126Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root720126ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root720126Item::V0(x));
        }
        if let Ok(x) = <Root720126ItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root720126Item::V1(x));
        }
        if let Ok(x) = <Vec<Root720126ItemAlt2Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root720126Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720129(pub String, pub String);

/// tuple len=32 (required first 32 slots)
#[derive(Debug, Deserialize)]
pub struct Root7201(
    pub String,
    pub Root72011,
    pub Root72012,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Root72016,
    pub Null,
    pub Root72018,
    pub String,
    pub String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root720115,
    pub Null,
    pub Option<Root720117>,
    pub Null,
    pub Null,
    pub Root720120,
    pub Root720121,
    pub Root720122,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Vec<Root720126Item>>,
    pub Null,
    pub Null,
    pub Root720129,
    pub Null,
    pub String,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root720(pub Root7200, pub Root7201);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root72(pub Root720);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75000(pub i64);
impl std::ops::Deref for Root75000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root75000: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root75000: integer above maximum"));
        }

        Ok(Root75000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75002ItemItemAlt0(pub i64);
impl std::ops::Deref for Root75002ItemItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75002ItemItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root75002ItemItemAlt0: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root75002ItemItemAlt0: integer above maximum",
            ));
        }

        Ok(Root75002ItemItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75002ItemItemAlt1ItemAlt0(pub i64);
impl std::ops::Deref for Root75002ItemItemAlt1ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75002ItemItemAlt1ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 20000004 {
            return Err(DeError::custom(
                "Root75002ItemItemAlt1ItemAlt0: integer below minimum",
            ));
        }
        if x > 20000004 {
            return Err(DeError::custom(
                "Root75002ItemItemAlt1ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root75002ItemItemAlt1ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0(pub i64);
impl std::ops::Deref for Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 80 {
            return Err(DeError::custom(
                "Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0: integer below minimum",
            ));
        }
        if x > 80 {
            return Err(DeError::custom(
                "Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0(x))
    }
}
#[derive(Debug)]
pub enum Root75002ItemItemAlt1ItemAlt2ItemAlt1Item {
    V0(Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0),
    V1(String),
}

impl<'de> Deserialize<'de> for Root75002ItemItemAlt1ItemAlt2ItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root75002ItemItemAlt1ItemAlt2ItemAlt1ItemAlt0 as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root75002ItemItemAlt1ItemAlt2ItemAlt1Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root75002ItemItemAlt1ItemAlt2ItemAlt1Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root75002ItemItemAlt1ItemAlt2Item {
    V0(String),
    V1(Vec<Option<Root75002ItemItemAlt1ItemAlt2ItemAlt1Item>>),
}

impl<'de> Deserialize<'de> for Root75002ItemItemAlt1ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root75002ItemItemAlt1ItemAlt2Item::V0(x));
        }
        if let Ok(x) = <Vec<Option<Root75002ItemItemAlt1ItemAlt2ItemAlt1Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root75002ItemItemAlt1ItemAlt2Item::V1(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root75002ItemItemAlt1Item {
    V0(Root75002ItemItemAlt1ItemAlt0),
    V1(String),
    V2(Vec<Root75002ItemItemAlt1ItemAlt2Item>),
}

impl<'de> Deserialize<'de> for Root75002ItemItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root75002ItemItemAlt1ItemAlt0 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root75002ItemItemAlt1Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root75002ItemItemAlt1Item::V1(x));
        }
        if let Ok(x) =
            <Vec<Root75002ItemItemAlt1ItemAlt2Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root75002ItemItemAlt1Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root75002ItemItem {
    V0(Root75002ItemItemAlt0),
    V1(Vec<Option<Root75002ItemItemAlt1Item>>),
}

impl<'de> Deserialize<'de> for Root75002ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root75002ItemItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root75002ItemItem::V0(x));
        }
        if let Ok(x) =
            <Vec<Option<Root75002ItemItemAlt1Item>> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root75002ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75004(pub i64);
impl std::ops::Deref for Root75004 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75004 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 21633 {
            return Err(DeError::custom("Root75004: integer below minimum"));
        }
        if x > 21634 {
            return Err(DeError::custom("Root75004: integer above maximum"));
        }

        Ok(Root75004(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root750050(pub String);
impl std::ops::Deref for Root750050 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT750050: Lazy<Regex> = Lazy::new(|| Regex::new("^Book online.*").unwrap());
impl<'de> Deserialize<'de> for Root750050 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT750050.is_match(&s) {
            return Err(DeError::custom("Root750050: string failed pattern"));
        }
        Ok(Root750050(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root75005120(pub String);
impl std::ops::Deref for Root75005120 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT75005120: Lazy<Regex> = Lazy::new(|| Regex::new("^https://.*").unwrap());
impl<'de> Deserialize<'de> for Root75005120 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT75005120.is_match(&s) {
            return Err(DeError::custom("Root75005120: string failed pattern"));
        }
        Ok(Root75005120(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root750051210(pub String);
impl std::ops::Deref for Root750051210 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT750051210: Lazy<Regex> = Lazy::new(|| Regex::new("^https://.*").unwrap());
impl<'de> Deserialize<'de> for Root750051210 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT750051210.is_match(&s) {
            return Err(DeError::custom("Root750051210: string failed pattern"));
        }
        Ok(Root750051210(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root750051214(pub String);
impl std::ops::Deref for Root750051214 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT750051214: Lazy<Regex> = Lazy::new(|| Regex::new("^,AOvVaw.*").unwrap());
impl<'de> Deserialize<'de> for Root750051214 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT750051214.is_match(&s) {
            return Err(DeError::custom("Root750051214: string failed pattern"));
        }
        Ok(Root750051214(s))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root75005121(
    pub Root750051210,
    pub Null,
    pub Null,
    pub Null,
    pub Root750051214,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root7500512(pub Root75005120, pub Root75005121);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root750051(pub Null, pub Null, pub Root7500512);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root750052(pub i64);
impl std::ops::Deref for Root750052 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root750052 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root750052: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root750052: integer above maximum"));
        }

        Ok(Root750052(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root750053(pub i64);
impl std::ops::Deref for Root750053 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root750053 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 64 {
            return Err(DeError::custom("Root750053: integer below minimum"));
        }
        if x > 64 {
            return Err(DeError::custom("Root750053: integer above maximum"));
        }

        Ok(Root750053(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root750054(pub i64);
impl std::ops::Deref for Root750054 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root750054 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 155425 {
            return Err(DeError::custom("Root750054: integer below minimum"));
        }
        if x > 155425 {
            return Err(DeError::custom("Root750054: integer above maximum"));
        }

        Ok(Root750054(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root750057(pub String);
impl std::ops::Deref for Root750057 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT750057: Lazy<Regex> =
    Lazy::new(|| Regex::new("^Schedule appointment with .*").unwrap());
impl<'de> Deserialize<'de> for Root750057 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT750057.is_match(&s) {
            return Err(DeError::custom("Root750057: string failed pattern"));
        }
        Ok(Root750057(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root750059(pub String);
impl std::ops::Deref for Root750059 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT750059: Lazy<Regex> =
    Lazy::new(|| Regex::new("^0ahUKEwiI98jJ6cKPAxVJD0QIHUurIJQQ0KoKC.*").unwrap());
impl<'de> Deserialize<'de> for Root750059 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT750059.is_match(&s) {
            return Err(DeError::custom("Root750059: string failed pattern"));
        }
        Ok(Root750059(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root7500510(pub String);
impl std::ops::Deref for Root7500510 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT7500510: Lazy<Regex> = Lazy::new(|| Regex::new("^Book.*").unwrap());
impl<'de> Deserialize<'de> for Root7500510 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT7500510.is_match(&s) {
            return Err(DeError::custom("Root7500510: string failed pattern"));
        }
        Ok(Root7500510(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75005122(pub i64);
impl std::ops::Deref for Root75005122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75005122 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root75005122: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root75005122: integer above maximum"));
        }

        Ok(Root75005122(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7500521(pub i64);
impl std::ops::Deref for Root7500521 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7500521 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root7500521: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root7500521: integer above maximum"));
        }

        Ok(Root7500521(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75005230(pub i64);
impl std::ops::Deref for Root75005230 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75005230 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root75005230: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root75005230: integer above maximum"));
        }

        Ok(Root75005230(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root7500523(pub Root75005230);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root75005240 {
    HousecallPro,
    LeadConnector,
}
impl<'de> Deserialize<'de> for Root75005240 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Housecall Pro" => Ok(Root75005240::HousecallPro),
            "LeadConnector" => Ok(Root75005240::LeadConnector),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root75005240 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root75005240::HousecallPro => ser.serialize_str("Housecall Pro"),
            Root75005240::LeadConnector => ser.serialize_str("LeadConnector"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root750052420(pub String);
impl std::ops::Deref for Root750052420 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT750052420: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://lh3\\.googleusercontent\\.com/.*").unwrap());
impl<'de> Deserialize<'de> for Root750052420 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT750052420.is_match(&s) {
            return Err(DeError::custom("Root750052420: string failed pattern"));
        }
        Ok(Root750052420(s))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root750052421 {
    HousecallPro,
    LeadConnector,
}
impl<'de> Deserialize<'de> for Root750052421 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Housecall Pro" => Ok(Root750052421::HousecallPro),
            "LeadConnector" => Ok(Root750052421::LeadConnector),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root750052421 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root750052421::HousecallPro => ser.serialize_str("Housecall Pro"),
            Root750052421::LeadConnector => ser.serialize_str("LeadConnector"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7500524220(pub i64);
impl std::ops::Deref for Root7500524220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7500524220 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 80 {
            return Err(DeError::custom("Root7500524220: integer below minimum"));
        }
        if x > 80 {
            return Err(DeError::custom("Root7500524220: integer above maximum"));
        }

        Ok(Root7500524220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root7500524221(pub i64);
impl std::ops::Deref for Root7500524221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root7500524221 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 80 {
            return Err(DeError::custom("Root7500524221: integer below minimum"));
        }
        if x > 80 {
            return Err(DeError::custom("Root7500524221: integer above maximum"));
        }

        Ok(Root7500524221(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root750052422(pub Root7500524220, pub Root7500524221);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root75005242(pub Root750052420, pub Root750052421, pub Root750052422);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root75005243(pub i64);
impl std::ops::Deref for Root75005243 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root75005243 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 20002114 {
            return Err(DeError::custom("Root75005243: integer below minimum"));
        }
        if x > 20002200 {
            return Err(DeError::custom("Root75005243: integer above maximum"));
        }

        Ok(Root75005243(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root7500524(
    pub Root75005240,
    pub Null,
    pub Root75005242,
    pub Root75005243,
);

/// tuple len=25 (required first 25 slots)
#[derive(Debug, Deserialize)]
pub struct Root75005(
    pub Root750050,
    pub Root750051,
    pub Root750052,
    pub Root750053,
    pub Root750054,
    pub Null,
    pub Null,
    pub Root750057,
    pub Null,
    pub Root750059,
    pub Root7500510,
    pub Null,
    pub Root75005122,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root7500521,
    pub Null,
    pub Root7500523,
    pub Root7500524,
);

/// tuple len=6 (required first 5 slots); accepts 5..=6 elements
#[derive(Debug)]
pub struct Root7500(
    pub Root75000,
    pub Null,
    pub Option<Vec<Vec<Root75002ItemItem>>>,
    pub Null,
    pub Root75004,
    pub Option<Root75005>,
);

impl<'de> serde::Deserialize<'de> for Root7500 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root7500;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 5..=6")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root7500, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: Root75000 = match seq.next_element::<Root75000>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(0, &"at least 5 elements"));
                    }
                };
                let a1: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 5 elements"));
                    }
                };
                let a2: Option<Vec<Vec<Root75002ItemItem>>> =
                    match seq.next_element::<Option<Vec<Vec<Root75002ItemItem>>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(2, &"at least 5 elements"));
                        }
                    };
                let a3: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 5 elements"));
                    }
                };
                let a4: Root75004 = match seq.next_element::<Root75004>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 5 elements"));
                    }
                };
                let a5: Option<Root75005> = match seq.next_element::<Option<Root75005>>()? {
                    Some(v) => v,
                    None => None,
                };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root7500(a0, a1, a2, a3, a4, a5))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root750(pub Root7500);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root75(pub Root750);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root76Item1 {
    FastFood,
    LiveMusic,
    Pizza,
    Seafood,
}
impl<'de> Deserialize<'de> for Root76Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Fast Food" => Ok(Root76Item1::FastFood),
            "Live Music" => Ok(Root76Item1::LiveMusic),
            "Pizza" => Ok(Root76Item1::Pizza),
            "Seafood" => Ok(Root76Item1::Seafood),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root76Item1 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root76Item1::FastFood => ser.serialize_str("Fast Food"),
            Root76Item1::LiveMusic => ser.serialize_str("Live Music"),
            Root76Item1::Pizza => ser.serialize_str("Pizza"),
            Root76Item1::Seafood => ser.serialize_str("Seafood"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root76Item2(pub i64);
impl std::ops::Deref for Root76Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root76Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root76Item2: integer below minimum"));
        }
        if x > 11 {
            return Err(DeError::custom("Root76Item2: integer above maximum"));
        }

        Ok(Root76Item2(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root76Item(pub String, pub Option<Root76Item1>, pub Root76Item2);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root82(
    pub Option<String>,
    pub Option<String>,
    pub Option<String>,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root860Item0(pub String);
impl std::ops::Deref for Root860Item0 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT860ITEM0: Lazy<Regex> = Lazy::new(|| Regex::new("^\\$3\\..*").unwrap());
impl<'de> Deserialize<'de> for Root860Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT860ITEM0.is_match(&s) {
            return Err(DeError::custom("Root860Item0: string failed pattern"));
        }
        Ok(Root860Item0(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root860Item1(pub i64);
impl std::ops::Deref for Root860Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root860Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root860Item1: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root860Item1: integer above maximum"));
        }

        Ok(Root860Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root860Item2(pub i64);
impl std::ops::Deref for Root860Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root860Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1757054003 {
            return Err(DeError::custom("Root860Item2: integer below minimum"));
        }
        if x > 1757058051 {
            return Err(DeError::custom("Root860Item2: integer above maximum"));
        }

        Ok(Root860Item2(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root860Item3(pub String);
impl std::ops::Deref for Root860Item3 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT860ITEM3: Lazy<Regex> = Lazy::new(|| Regex::new("^gallon.*").unwrap());
impl<'de> Deserialize<'de> for Root860Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT860ITEM3.is_match(&s) {
            return Err(DeError::custom("Root860Item3: string failed pattern"));
        }
        Ok(Root860Item3(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root860Item4(pub i64);
impl std::ops::Deref for Root860Item4 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root860Item4 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root860Item4: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root860Item4: integer above maximum"));
        }

        Ok(Root860Item4(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root860Item5(pub String);
impl std::ops::Deref for Root860Item5 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT860ITEM5: Lazy<Regex> = Lazy::new(|| Regex::new("^USD.*").unwrap());
impl<'de> Deserialize<'de> for Root860Item5 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT860ITEM5.is_match(&s) {
            return Err(DeError::custom("Root860Item5: string failed pattern"));
        }
        Ok(Root860Item5(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root860Item6(pub f64);
impl std::ops::Deref for Root860Item6 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root860Item6 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root860Item6: non-finite number"));
        }
        if x < 3.18 {
            return Err(DeError::custom("Root860Item6: number below minimum"));
        }
        if x > 3.76 {
            return Err(DeError::custom("Root860Item6: number above maximum"));
        }

        Ok(Root860Item6(x))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root860Item7 {
    Diesel,
    Midgrade,
    Premium,
    Regular,
}
impl<'de> Deserialize<'de> for Root860Item7 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Diesel" => Ok(Root860Item7::Diesel),
            "Midgrade" => Ok(Root860Item7::Midgrade),
            "Premium" => Ok(Root860Item7::Premium),
            "Regular" => Ok(Root860Item7::Regular),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root860Item7 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root860Item7::Diesel => ser.serialize_str("Diesel"),
            Root860Item7::Midgrade => ser.serialize_str("Midgrade"),
            Root860Item7::Premium => ser.serialize_str("Premium"),
            Root860Item7::Regular => ser.serialize_str("Regular"),
        }
    }
}

/// tuple len=8 (required first 8 slots)
#[derive(Debug, Deserialize)]
pub struct Root860Item(
    pub Root860Item0,
    pub Root860Item1,
    pub Root860Item2,
    pub Root860Item3,
    pub Root860Item4,
    pub Root860Item5,
    pub Root860Item6,
    pub Root860Item7,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root861(pub i64);
impl std::ops::Deref for Root861 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root861 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root861: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root861: integer above maximum"));
        }

        Ok(Root861(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root86(pub Vec<Root860Item>, pub Root861);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root881(pub String);
impl std::ops::Deref for Root881 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT881: Lazy<Regex> = Lazy::new(|| Regex::new("^SearchResult\\.TYPE_.*").unwrap());
impl<'de> Deserialize<'de> for Root881 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT881.is_match(&s) {
            return Err(DeError::custom("Root881: string failed pattern"));
        }
        Ok(Root881(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root8820(pub String);
impl std::ops::Deref for Root8820 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT8820: Lazy<Regex> = Lazy::new(|| Regex::new("^SearchResult\\.TYPE_.*").unwrap());
impl<'de> Deserialize<'de> for Root8820 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT8820.is_match(&s) {
            return Err(DeError::custom("Root8820: string failed pattern"));
        }
        Ok(Root8820(s))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root8821 {
    US,
}
impl<'de> Deserialize<'de> for Root8821 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "US" => Ok(Root8821::US),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root8821 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root8821::US => ser.serialize_str("US"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8822(pub i64);
impl std::ops::Deref for Root8822 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8822 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 32 {
            return Err(DeError::custom("Root8822: integer below minimum"));
        }
        if x > 74 {
            return Err(DeError::custom("Root8822: integer above maximum"));
        }

        Ok(Root8822(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8823(pub i64);
impl std::ops::Deref for Root8823 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8823 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 84 {
            return Err(DeError::custom("Root8823: integer below minimum"));
        }
        if x > 84 {
            return Err(DeError::custom("Root8823: integer above maximum"));
        }

        Ok(Root8823(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8824(pub i64);
impl std::ops::Deref for Root8824 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8824 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 85 {
            return Err(DeError::custom("Root8824: integer below minimum"));
        }
        if x > 85 {
            return Err(DeError::custom("Root8824: integer above maximum"));
        }

        Ok(Root8824(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8825(pub i64);
impl std::ops::Deref for Root8825 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8825 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 151 {
            return Err(DeError::custom("Root8825: integer below minimum"));
        }
        if x > 151 {
            return Err(DeError::custom("Root8825: integer above maximum"));
        }

        Ok(Root8825(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root882(
    pub Root8820,
    pub Root8821,
    pub Root8822,
    pub Root8823,
    pub Root8824,
    pub Root8825,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8842(pub i64);
impl std::ops::Deref for Root8842 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8842 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 188 {
            return Err(DeError::custom("Root8842: integer below minimum"));
        }
        if x > 669 {
            return Err(DeError::custom("Root8842: integer above maximum"));
        }

        Ok(Root8842(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8843(pub i64);
impl std::ops::Deref for Root8843 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8843 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 187 {
            return Err(DeError::custom("Root8843: integer below minimum"));
        }
        if x > 668 {
            return Err(DeError::custom("Root8843: integer above maximum"));
        }

        Ok(Root8843(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8844(pub i64);
impl std::ops::Deref for Root8844 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8844 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1166 {
            return Err(DeError::custom("Root8844: integer below minimum"));
        }
        if x > 1238 {
            return Err(DeError::custom("Root8844: integer above maximum"));
        }

        Ok(Root8844(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root8845(pub i64);
impl std::ops::Deref for Root8845 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root8845 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 186 {
            return Err(DeError::custom("Root8845: integer below minimum"));
        }
        if x > 667 {
            return Err(DeError::custom("Root8845: integer above maximum"));
        }

        Ok(Root8845(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root884(
    pub Null,
    pub Null,
    pub Root8842,
    pub Root8843,
    pub Root8844,
    pub Root8845,
);

/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root88(
    pub Option<String>,
    pub Option<Root881>,
    pub Option<Root882>,
    pub String,
    pub Root884,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root99ItemItem1Item2ItemAlt0(pub String);
impl std::ops::Deref for Root99ItemItem1Item2ItemAlt0 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT99ITEMITEM1ITEM2ITEMALT0: Lazy<Regex> = Lazy::new(|| {
    Regex::new("^Canyon-view nature site beside a reservoir with fishing plus campsites, golf & mountain biking\\..*").unwrap()
});
impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT99ITEMITEM1ITEM2ITEMALT0.is_match(&s) {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt0: string failed pattern",
            ));
        }
        Ok(Root99ItemItem1Item2ItemAlt0(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt0(pub f64);
impl std::ops::Deref for Root99ItemItem1Item2ItemAlt1ItemAlt0 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt0: non-finite number",
            ));
        }
        if x < 4.5 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt0: number below minimum",
            ));
        }
        if x > 162.0 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt0: number above maximum",
            ));
        }

        Ok(Root99ItemItem1Item2ItemAlt1ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0(pub f64);
impl std::ops::Deref for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0: non-finite number",
            ));
        }
        if x < -111.196567099999996 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0: number below minimum",
            ));
        }
        if x > 39.212710000000001 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0: number above maximum",
            ));
        }

        Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt1(pub String);
impl std::ops::Deref for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt1 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT99ITEMITEM1ITEM2ITEMALT1ITEMALT2ITEMALT1: Lazy<Regex> =
    Lazy::new(|| Regex::new("^1 hr 39.*").unwrap());
impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT99ITEMITEM1ITEM2ITEMALT1ITEMALT2ITEMALT1.is_match(&s) {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt1: string failed pattern",
            ));
        }
        Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt1(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt221(pub String);
impl std::ops::Deref for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt221 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT99ITEMITEM1ITEM2ITEMALT1ITEMALT2ITEMALT221: Lazy<Regex> =
    Lazy::new(|| Regex::new("^http.*").unwrap());
impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt221 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT99ITEMITEM1ITEM2ITEMALT1ITEMALT2ITEMALT221.is_match(&s) {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt221: string failed pattern",
            ));
        }
        Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt221(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2220(pub i64);
impl std::ops::Deref for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2220 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 160 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2220: integer below minimum",
            ));
        }
        if x > 282 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2220: integer above maximum",
            ));
        }

        Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2221(pub i64);
impl std::ops::Deref for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2221 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 120 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2221: integer below minimum",
            ));
        }
        if x > 179 {
            return Err(DeError::custom(
                "Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2221: integer above maximum",
            ));
        }

        Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2221(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt222(
    pub Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2220,
    pub Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2221,
);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt22(
    pub Null,
    pub Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt221,
    pub Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt222,
);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2(
    pub Null,
    pub Null,
    pub Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt22,
);

#[derive(Debug)]
pub enum Root99ItemItem1Item2ItemAlt1ItemAlt2Item {
    V0(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0),
    V1(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt1),
    V2(Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2),
}

impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2Item::V0(x));
        }
        if let Ok(x) =
            <Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt1 as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2Item::V1(x));
        }
        if let Ok(x) =
            <Root99ItemItem1Item2ItemAlt1ItemAlt2ItemAlt2 as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root99ItemItem1Item2ItemAlt1ItemAlt2Item::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root99ItemItem1Item2ItemAlt1Item {
    V0(Root99ItemItem1Item2ItemAlt1ItemAlt0),
    V1(String),
    V2(Vec<Option<Root99ItemItem1Item2ItemAlt1ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root99ItemItem1Item2ItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root99ItemItem1Item2ItemAlt1ItemAlt0 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root99ItemItem1Item2ItemAlt1Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root99ItemItem1Item2ItemAlt1Item::V1(x));
        }
        if let Ok(x) = <Vec<Option<Root99ItemItem1Item2ItemAlt1ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root99ItemItem1Item2ItemAlt1Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root99ItemItem1Item2Item {
    V0(Root99ItemItem1Item2ItemAlt0),
    V1(Vec<Option<Root99ItemItem1Item2ItemAlt1Item>>),
}

impl<'de> Deserialize<'de> for Root99ItemItem1Item2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root99ItemItem1Item2ItemAlt0 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root99ItemItem1Item2Item::V0(x));
        }
        if let Ok(x) =
            <Vec<Option<Root99ItemItem1Item2ItemAlt1Item>> as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root99ItemItem1Item2Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem1Item(
    pub Null,
    pub Null,
    pub Vec<Option<Root99ItemItem1Item2Item>>,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem3(pub i64);
impl std::ops::Deref for Root99ItemItem3 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root99ItemItem3: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root99ItemItem3: integer above maximum"));
        }

        Ok(Root99ItemItem3(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root99ItemItem400(pub f64);
impl std::ops::Deref for Root99ItemItem400 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem400 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root99ItemItem400: non-finite number"));
        }
        if x < 99008.50644334127719 {
            return Err(DeError::custom("Root99ItemItem400: number below minimum"));
        }
        if x > 397318.780622586025856 {
            return Err(DeError::custom("Root99ItemItem400: number above maximum"));
        }

        Ok(Root99ItemItem400(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root99ItemItem401(pub f64);
impl std::ops::Deref for Root99ItemItem401 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem401 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root99ItemItem401: non-finite number"));
        }
        if x < -111.106986849999998 {
            return Err(DeError::custom("Root99ItemItem401: number below minimum"));
        }
        if x > -110.443300550000004 {
            return Err(DeError::custom("Root99ItemItem401: number above maximum"));
        }

        Ok(Root99ItemItem401(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root99ItemItem402(pub f64);
impl std::ops::Deref for Root99ItemItem402 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem402 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root99ItemItem402: non-finite number"));
        }
        if x < 38.922764599999994 {
            return Err(DeError::custom("Root99ItemItem402: number below minimum"));
        }
        if x > 39.151619599999997 {
            return Err(DeError::custom("Root99ItemItem402: number above maximum"));
        }

        Ok(Root99ItemItem402(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem40(
    pub Root99ItemItem400,
    pub Root99ItemItem401,
    pub Root99ItemItem402,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem410(pub i64);
impl std::ops::Deref for Root99ItemItem410 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem410 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root99ItemItem410: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root99ItemItem410: integer above maximum"));
        }

        Ok(Root99ItemItem410(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem411(pub i64);
impl std::ops::Deref for Root99ItemItem411 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem411 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root99ItemItem411: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root99ItemItem411: integer above maximum"));
        }

        Ok(Root99ItemItem411(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem412(pub i64);
impl std::ops::Deref for Root99ItemItem412 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem412 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root99ItemItem412: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root99ItemItem412: integer above maximum"));
        }

        Ok(Root99ItemItem412(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem41(
    pub Root99ItemItem410,
    pub Root99ItemItem411,
    pub Root99ItemItem412,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem420(pub i64);
impl std::ops::Deref for Root99ItemItem420 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem420 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1024 {
            return Err(DeError::custom("Root99ItemItem420: integer below minimum"));
        }
        if x > 1024 {
            return Err(DeError::custom("Root99ItemItem420: integer above maximum"));
        }

        Ok(Root99ItemItem420(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root99ItemItem421(pub i64);
impl std::ops::Deref for Root99ItemItem421 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem421 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 768 {
            return Err(DeError::custom("Root99ItemItem421: integer below minimum"));
        }
        if x > 768 {
            return Err(DeError::custom("Root99ItemItem421: integer above maximum"));
        }

        Ok(Root99ItemItem421(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem42(pub Root99ItemItem420, pub Root99ItemItem421);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root99ItemItem43(pub f64);
impl std::ops::Deref for Root99ItemItem43 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root99ItemItem43 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root99ItemItem43: non-finite number"));
        }
        if x < 13.1 {
            return Err(DeError::custom("Root99ItemItem43: number below minimum"));
        }
        if x > 13.1 {
            return Err(DeError::custom("Root99ItemItem43: number above maximum"));
        }

        Ok(Root99ItemItem43(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem4(
    pub Root99ItemItem40,
    pub Root99ItemItem41,
    pub Root99ItemItem42,
    pub Root99ItemItem43,
);

/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root99ItemItem(
    pub Null,
    pub Vec<Root99ItemItem1Item>,
    pub Null,
    pub Root99ItemItem3,
    pub Root99ItemItem4,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt0(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt0: integer below minimum",
            ));
        }
        if x > 0 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt0: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 85 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt0(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt2ItemAlt1ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt0: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 125 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 2 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt20Item(
    pub String,
    pub Null,
    pub String,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt21(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt21 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt21 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt21: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt21: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt21(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt220(pub i64);
impl std::ops::Deref for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt220 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt220: integer below minimum",
            ));
        }
        if x > 2 {
            return Err(DeError::custom(
                "Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt220: integer above maximum",
            ));
        }

        Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt220(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt22(
    pub Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt220,
);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2(
    pub Vec<Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt20Item>,
    pub Option<Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt21>,
    pub Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt22,
);

#[derive(Debug)]
pub enum Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item {
    V0(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0),
    V1(String),
    V2(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2),
}

impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item::V0(x)); }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item::V1(x));
        }
        if let Ok(x) = <Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2ItemAlt2 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2Item {
    V0(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0),
    V1(String),
    V2(Vec<Option<Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2Item::V0(x)); }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2Item::V1(x));
        }
        if let Ok(x) = <Vec<Option<Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root100ItemItemItemAlt2ItemAlt1ItemAlt2Item {
    V0(Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0),
    V1(String),
    V2(Vec<Option<Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1ItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2Item::V1(x));
        }
        if let Ok(x) = <Vec<Option<Root100ItemItemItemAlt2ItemAlt1ItemAlt2ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root100ItemItemItemAlt2ItemAlt1ItemAlt2Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root100ItemItemItemAlt2ItemAlt1Item {
    V0(Root100ItemItemItemAlt2ItemAlt1ItemAlt0),
    V1(String),
    V2(Vec<Option<Root100ItemItemItemAlt2ItemAlt1ItemAlt2Item>>),
}

impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2ItemAlt1Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root100ItemItemItemAlt2ItemAlt1ItemAlt0 as serde::Deserialize>::deserialize(
            val.clone(),
        ) {
            return Ok(Root100ItemItemItemAlt2ItemAlt1Item::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root100ItemItemItemAlt2ItemAlt1Item::V1(x));
        }
        if let Ok(x) = <Vec<Option<Root100ItemItemItemAlt2ItemAlt1ItemAlt2Item>> as serde::Deserialize>::deserialize(val.clone()) { return Ok(Root100ItemItemItemAlt2ItemAlt1Item::V2(x)); }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root100ItemItemItemAlt2Item {
    V0(Root100ItemItemItemAlt2ItemAlt0),
    V1(Vec<Option<Root100ItemItemItemAlt2ItemAlt1Item>>),
}

impl<'de> Deserialize<'de> for Root100ItemItemItemAlt2Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) =
            <Root100ItemItemItemAlt2ItemAlt0 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root100ItemItemItemAlt2Item::V0(x));
        }
        if let Ok(x) =
            <Vec<Option<Root100ItemItemItemAlt2ItemAlt1Item>> as serde::Deserialize>::deserialize(
                val.clone(),
            )
        {
            return Ok(Root100ItemItemItemAlt2Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[derive(Debug)]
pub enum Root100ItemItemItem {
    V0(Root100ItemItemItemAlt0),
    V1(String),
    V2(Vec<Root100ItemItemItemAlt2Item>),
}

impl<'de> Deserialize<'de> for Root100ItemItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <Root100ItemItemItemAlt0 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root100ItemItemItem::V0(x));
        }
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root100ItemItemItem::V1(x));
        }
        if let Ok(x) =
            <Vec<Root100ItemItemItemAlt2Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root100ItemItemItem::V2(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root10500000(pub i64);
impl std::ops::Deref for Root10500000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root10500000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root10500000: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root10500000: integer above maximum"));
        }

        Ok(Root10500000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1050000(pub Root10500000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105000(pub Root1050000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root10500(pub Root105000);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item1(pub i64);
impl std::ops::Deref for Root105010Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root105010Item1: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root105010Item1: integer above maximum"));
        }

        Ok(Root105010Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item2(pub i64);
impl std::ops::Deref for Root105010Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12 {
            return Err(DeError::custom("Root105010Item2: integer below minimum"));
        }
        if x > 12 {
            return Err(DeError::custom("Root105010Item2: integer above maximum"));
        }

        Ok(Root105010Item2(x))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root105010Item3 {
    V,
}
impl<'de> Deserialize<'de> for Root105010Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "" => Ok(Root105010Item3::V),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root105010Item3 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root105010Item3::V => ser.serialize_str(""),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105010Item60(pub String);
impl std::ops::Deref for Root105010Item60 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105010ITEM60: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://lh3\\.googleusercontent\\.com/.*").unwrap());
impl<'de> Deserialize<'de> for Root105010Item60 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105010ITEM60.is_match(&s) {
            return Err(DeError::custom("Root105010Item60: string failed pattern"));
        }
        Ok(Root105010Item60(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item620(pub i64);
impl std::ops::Deref for Root105010Item620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item620 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom("Root105010Item620: integer below minimum"));
        }
        if x > 4284 {
            return Err(DeError::custom("Root105010Item620: integer above maximum"));
        }

        Ok(Root105010Item620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item621(pub i64);
impl std::ops::Deref for Root105010Item621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item621 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 650 {
            return Err(DeError::custom("Root105010Item621: integer below minimum"));
        }
        if x > 5712 {
            return Err(DeError::custom("Root105010Item621: integer above maximum"));
        }

        Ok(Root105010Item621(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item62(pub Root105010Item620, pub Root105010Item621);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item630(pub i64);
impl std::ops::Deref for Root105010Item630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item630 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 203 {
            return Err(DeError::custom("Root105010Item630: integer below minimum"));
        }
        if x > 203 {
            return Err(DeError::custom("Root105010Item630: integer above maximum"));
        }

        Ok(Root105010Item630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item631(pub i64);
impl std::ops::Deref for Root105010Item631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item631 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 100 {
            return Err(DeError::custom("Root105010Item631: integer below minimum"));
        }
        if x > 100 {
            return Err(DeError::custom("Root105010Item631: integer above maximum"));
        }

        Ok(Root105010Item631(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item63(pub Root105010Item630, pub Root105010Item631);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item6(
    pub Root105010Item60,
    pub String,
    pub Root105010Item62,
    pub Root105010Item63,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item800(pub i64);
impl std::ops::Deref for Root105010Item800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item800 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root105010Item800: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root105010Item800: integer above maximum"));
        }

        Ok(Root105010Item800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105010Item801(pub f64);
impl std::ops::Deref for Root105010Item801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item801 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105010Item801: non-finite number"));
        }
        if x < -113.128302199999993 {
            return Err(DeError::custom("Root105010Item801: number below minimum"));
        }
        if x > -111.824759400000005 {
            return Err(DeError::custom("Root105010Item801: number above maximum"));
        }

        Ok(Root105010Item801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105010Item802(pub f64);
impl std::ops::Deref for Root105010Item802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item802 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105010Item802: non-finite number"));
        }
        if x < 37.100494999999995 {
            return Err(DeError::custom("Root105010Item802: number below minimum"));
        }
        if x > 40.433213100000003 {
            return Err(DeError::custom("Root105010Item802: number above maximum"));
        }

        Ok(Root105010Item802(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item80(
    pub Root105010Item800,
    pub Root105010Item801,
    pub Root105010Item802,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item810(pub i64);
impl std::ops::Deref for Root105010Item810 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item810 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root105010Item810: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root105010Item810: integer above maximum"));
        }

        Ok(Root105010Item810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item811(pub i64);
impl std::ops::Deref for Root105010Item811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item811 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 90 {
            return Err(DeError::custom("Root105010Item811: integer below minimum"));
        }
        if x > 90 {
            return Err(DeError::custom("Root105010Item811: integer above maximum"));
        }

        Ok(Root105010Item811(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item81(pub Root105010Item810, pub Root105010Item811);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item820(pub i64);
impl std::ops::Deref for Root105010Item820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item820 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom("Root105010Item820: integer below minimum"));
        }
        if x > 4284 {
            return Err(DeError::custom("Root105010Item820: integer above maximum"));
        }

        Ok(Root105010Item820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item821(pub i64);
impl std::ops::Deref for Root105010Item821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item821 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 650 {
            return Err(DeError::custom("Root105010Item821: integer below minimum"));
        }
        if x > 5712 {
            return Err(DeError::custom("Root105010Item821: integer above maximum"));
        }

        Ok(Root105010Item821(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item82(pub Root105010Item820, pub Root105010Item821);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item83(pub i64);
impl std::ops::Deref for Root105010Item83 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item83 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 75 {
            return Err(DeError::custom("Root105010Item83: integer below minimum"));
        }
        if x > 75 {
            return Err(DeError::custom("Root105010Item83: integer above maximum"));
        }

        Ok(Root105010Item83(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item8(
    pub Root105010Item80,
    pub Root105010Item81,
    pub Root105010Item82,
    pub Root105010Item83,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105010Item10(pub String);
impl std::ops::Deref for Root105010Item10 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105010ITEM10: Lazy<Regex> = Lazy::new(|| Regex::new("^0ahUKEw.*").unwrap());
impl<'de> Deserialize<'de> for Root105010Item10 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105010ITEM10.is_match(&s) {
            return Err(DeError::custom("Root105010Item10: string failed pattern"));
        }
        Ok(Root105010Item10(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105010Item20(pub String);
impl std::ops::Deref for Root105010Item20 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105010ITEM20: Lazy<Regex> = Lazy::new(|| Regex::new("^Photo.*").unwrap());
impl<'de> Deserialize<'de> for Root105010Item20 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105010ITEM20.is_match(&s) {
            return Err(DeError::custom("Root105010Item20: string failed pattern"));
        }
        Ok(Root105010Item20(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item2110(pub i64);
impl std::ops::Deref for Root105010Item2110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root105010Item2110: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root105010Item2110: integer above maximum"));
        }

        Ok(Root105010Item2110(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item211(pub Root105010Item2110, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item2120(pub i64);
impl std::ops::Deref for Root105010Item2120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2120 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root105010Item2120: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root105010Item2120: integer above maximum"));
        }

        Ok(Root105010Item2120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item2121(pub i64);
impl std::ops::Deref for Root105010Item2121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2121 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root105010Item2121: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root105010Item2121: integer above maximum"));
        }

        Ok(Root105010Item2121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item21220(pub i64);
impl std::ops::Deref for Root105010Item21220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item21220 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 650 {
            return Err(DeError::custom(
                "Root105010Item21220: integer below minimum",
            ));
        }
        if x > 5712 {
            return Err(DeError::custom(
                "Root105010Item21220: integer above maximum",
            ));
        }

        Ok(Root105010Item21220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item21221(pub i64);
impl std::ops::Deref for Root105010Item21221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item21221 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom(
                "Root105010Item21221: integer below minimum",
            ));
        }
        if x > 4284 {
            return Err(DeError::custom(
                "Root105010Item21221: integer above maximum",
            ));
        }

        Ok(Root105010Item21221(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item2122(pub Root105010Item21220, pub Root105010Item21221);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item212(
    pub Root105010Item2120,
    pub Root105010Item2121,
    pub Root105010Item2122,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105010Item2140000(pub String);
impl std::ops::Deref for Root105010Item2140000 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105010ITEM2140000: Lazy<Regex> =
    Lazy::new(|| Regex::new("^Images may be subject to copyright\\..*").unwrap());
impl<'de> Deserialize<'de> for Root105010Item2140000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105010ITEM2140000.is_match(&s) {
            return Err(DeError::custom(
                "Root105010Item2140000: string failed pattern",
            ));
        }
        Ok(Root105010Item2140000(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item214000(pub Root105010Item2140000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item21400(pub Root105010Item214000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item2140(pub Root105010Item21400);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item214(pub Root105010Item2140);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item215000(pub i64);
impl std::ops::Deref for Root105010Item215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item215000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom(
                "Root105010Item215000: integer below minimum",
            ));
        }
        if x > 2 {
            return Err(DeError::custom(
                "Root105010Item215000: integer above maximum",
            ));
        }

        Ok(Root105010Item215000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item21500(pub Root105010Item215000);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105010Item2150102(pub f64);
impl std::ops::Deref for Root105010Item2150102 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2150102 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105010Item2150102: non-finite number"));
        }
        if x < 37.100494999999995 {
            return Err(DeError::custom(
                "Root105010Item2150102: number below minimum",
            ));
        }
        if x > 40.433213100000003 {
            return Err(DeError::custom(
                "Root105010Item2150102: number above maximum",
            ));
        }

        Ok(Root105010Item2150102(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105010Item2150103(pub f64);
impl std::ops::Deref for Root105010Item2150103 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2150103 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105010Item2150103: non-finite number"));
        }
        if x < -113.128302199999993 {
            return Err(DeError::custom(
                "Root105010Item2150103: number below minimum",
            ));
        }
        if x > -111.824759400000005 {
            return Err(DeError::custom(
                "Root105010Item2150103: number above maximum",
            ));
        }

        Ok(Root105010Item2150103(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item215010(
    pub Null,
    pub Null,
    pub Root105010Item2150102,
    pub Root105010Item2150103,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item21501(pub Root105010Item215010);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item2150(pub Root105010Item21500, pub Root105010Item21501);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item215(pub Root105010Item2150);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item2160(pub i64);
impl std::ops::Deref for Root105010Item2160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2160 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root105010Item2160: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root105010Item2160: integer above maximum"));
        }

        Ok(Root105010Item2160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item2163Item(pub i64);
impl std::ops::Deref for Root105010Item2163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item2163Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom(
                "Root105010Item2163Item: integer below minimum",
            ));
        }
        if x > 8 {
            return Err(DeError::custom(
                "Root105010Item2163Item: integer above maximum",
            ));
        }

        Ok(Root105010Item2163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item216530(pub i64);
impl std::ops::Deref for Root105010Item216530 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item216530 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root105010Item216530: integer below minimum",
            ));
        }
        if x > 6 {
            return Err(DeError::custom(
                "Root105010Item216530: integer above maximum",
            ));
        }

        Ok(Root105010Item216530(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item216531(pub i64);
impl std::ops::Deref for Root105010Item216531 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item216531 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom(
                "Root105010Item216531: integer below minimum",
            ));
        }
        if x > 7 {
            return Err(DeError::custom(
                "Root105010Item216531: integer above maximum",
            ));
        }

        Ok(Root105010Item216531(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item216532(pub i64);
impl std::ops::Deref for Root105010Item216532 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item216532 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom(
                "Root105010Item216532: integer below minimum",
            ));
        }
        if x > 4 {
            return Err(DeError::custom(
                "Root105010Item216532: integer above maximum",
            ));
        }

        Ok(Root105010Item216532(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item216533(pub i64);
impl std::ops::Deref for Root105010Item216533 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item216533 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root105010Item216533: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root105010Item216533: integer above maximum",
            ));
        }

        Ok(Root105010Item216533(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item216534(pub i64);
impl std::ops::Deref for Root105010Item216534 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item216534 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom(
                "Root105010Item216534: integer below minimum",
            ));
        }
        if x > 3 {
            return Err(DeError::custom(
                "Root105010Item216534: integer above maximum",
            ));
        }

        Ok(Root105010Item216534(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item21653(
    pub Root105010Item216530,
    pub Root105010Item216531,
    pub Root105010Item216532,
    pub Root105010Item216533,
    pub Root105010Item216534,
);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item2165(pub Null, pub Null, pub String, pub Root105010Item21653);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item21680(pub i64);
impl std::ops::Deref for Root105010Item21680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item21680 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2017 {
            return Err(DeError::custom(
                "Root105010Item21680: integer below minimum",
            ));
        }
        if x > 2025 {
            return Err(DeError::custom(
                "Root105010Item21680: integer above maximum",
            ));
        }

        Ok(Root105010Item21680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item21681(pub i64);
impl std::ops::Deref for Root105010Item21681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item21681 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom(
                "Root105010Item21681: integer below minimum",
            ));
        }
        if x > 11 {
            return Err(DeError::custom(
                "Root105010Item21681: integer above maximum",
            ));
        }

        Ok(Root105010Item21681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item21682(pub i64);
impl std::ops::Deref for Root105010Item21682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item21682 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom(
                "Root105010Item21682: integer below minimum",
            ));
        }
        if x > 29 {
            return Err(DeError::custom(
                "Root105010Item21682: integer above maximum",
            ));
        }

        Ok(Root105010Item21682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item21683(pub i64);
impl std::ops::Deref for Root105010Item21683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item21683 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root105010Item21683: integer below minimum",
            ));
        }
        if x > 23 {
            return Err(DeError::custom(
                "Root105010Item21683: integer above maximum",
            ));
        }

        Ok(Root105010Item21683(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item2168(
    pub Root105010Item21680,
    pub Root105010Item21681,
    pub Root105010Item21682,
    pub Root105010Item21683,
);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item216(
    pub Root105010Item2160,
    pub Null,
    pub Null,
    pub Option<Vec<Root105010Item2163Item>>,
    pub Null,
    pub Root105010Item2165,
    pub Null,
    pub Null,
    pub Root105010Item2168,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105010Item21190(pub String);
impl std::ops::Deref for Root105010Item21190 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105010ITEM21190: Lazy<Regex> = Lazy::new(|| Regex::new("^UGCS_REFERENCE.*").unwrap());
impl<'de> Deserialize<'de> for Root105010Item21190 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105010ITEM21190.is_match(&s) {
            return Err(DeError::custom(
                "Root105010Item21190: string failed pattern",
            ));
        }
        Ok(Root105010Item21190(s))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root105010Item21192 {
    V1,
}
impl<'de> Deserialize<'de> for Root105010Item21192 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "1" => Ok(Root105010Item21192::V1),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root105010Item21192 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root105010Item21192::V1 => ser.serialize_str("1"),
        }
    }
}

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item2119(pub Root105010Item21190, pub String, pub Root105010Item21192);

/// tuple len=20 (required first 20 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item21(
    pub Null,
    pub Root105010Item211,
    pub Root105010Item212,
    pub Null,
    pub Root105010Item214,
    pub Root105010Item215,
    pub Root105010Item216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105010Item2119,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105010Item22(pub i64);
impl std::ops::Deref for Root105010Item22 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105010Item22 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root105010Item22: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root105010Item22: integer above maximum"));
        }

        Ok(Root105010Item22(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item29(pub String, pub String);

/// tuple len=32 (required first 32 slots)
#[derive(Debug, Deserialize)]
pub struct Root105010Item(
    pub String,
    pub Root105010Item1,
    pub Root105010Item2,
    pub Root105010Item3,
    pub Null,
    pub Null,
    pub Root105010Item6,
    pub Null,
    pub Root105010Item8,
    pub String,
    pub Root105010Item10,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105010Item20,
    pub Root105010Item21,
    pub Root105010Item22,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105010Item29,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105011(pub i64);
impl std::ops::Deref for Root105011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105011 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root105011: integer below minimum"));
        }
        if x > 1481 {
            return Err(DeError::custom("Root105011: integer above maximum"));
        }

        Ok(Root105011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105015(pub String);
impl std::ops::Deref for Root105015 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105015: Lazy<Regex> =
    Lazy::new(|| Regex::new("^EvgDKYQi49-NlUMIDwAAAAEAAAMAAAAAAAAAAAAAAAAA.*").unwrap());
impl<'de> Deserialize<'de> for Root105015 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105015.is_match(&s) {
            return Err(DeError::custom("Root105015: string failed pattern"));
        }
        Ok(Root105015(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105018000(pub i64);
impl std::ops::Deref for Root105018000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105018000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root105018000: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root105018000: integer above maximum"));
        }

        Ok(Root105018000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105018001(pub i64);
impl std::ops::Deref for Root105018001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105018001 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root105018001: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root105018001: integer above maximum"));
        }

        Ok(Root105018001(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root10501800(pub Root105018000, pub Root105018001);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1050180(pub Root10501800);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1050181(pub i64);
impl std::ops::Deref for Root1050181 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1050181 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1050181: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root1050181: integer above maximum"));
        }

        Ok(Root1050181(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1050183(pub i64);
impl std::ops::Deref for Root1050183 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1050183 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1050183: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1050183: integer above maximum"));
        }

        Ok(Root1050183(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1050184(pub i64);
impl std::ops::Deref for Root1050184 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1050184 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1050184: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root1050184: integer above maximum"));
        }

        Ok(Root1050184(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root105018(
    pub Root1050180,
    pub Root1050181,
    pub Null,
    pub Root1050183,
    pub Root1050184,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1050110(pub i64);
impl std::ops::Deref for Root1050110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1050110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root1050110: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1050110: integer above maximum"));
        }

        Ok(Root1050110(x))
    }
}
/// tuple len=11 (required first 10 slots); accepts 10..=11 elements
#[derive(Debug)]
pub struct Root10501(
    pub Option<Vec<Root105010Item>>,
    pub Option<Root105011>,
    pub Null,
    pub String,
    pub Null,
    pub Option<Root105015>,
    pub Null,
    pub Null,
    pub Option<Root105018>,
    pub Null,
    pub Option<Root1050110>,
);

impl<'de> serde::Deserialize<'de> for Root10501 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root10501;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 10..=11")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root10501, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: Option<Vec<Root105010Item>> = match seq
                    .next_element::<Option<Vec<Root105010Item>>>()?
                {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(0, &"at least 10 elements"));
                    }
                };
                let a1: Option<Root105011> = match seq.next_element::<Option<Root105011>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 10 elements"));
                    }
                };
                let a2: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(2, &"at least 10 elements"));
                    }
                };
                let a3: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 10 elements"));
                    }
                };
                let a4: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 10 elements"));
                    }
                };
                let a5: Option<Root105015> = match seq.next_element::<Option<Root105015>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(5, &"at least 10 elements"));
                    }
                };
                let a6: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(6, &"at least 10 elements"));
                    }
                };
                let a7: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(7, &"at least 10 elements"));
                    }
                };
                let a8: Option<Root105018> = match seq.next_element::<Option<Root105018>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(8, &"at least 10 elements"));
                    }
                };
                let a9: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(9, &"at least 10 elements"));
                    }
                };
                let a10: Option<Root1050110> = match seq.next_element::<Option<Root1050110>>()? {
                    Some(v) => v,
                    None => None,
                };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root10501(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root1050(pub Root10500, pub Root10501);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root10510000(pub i64);
impl std::ops::Deref for Root10510000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root10510000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root10510000: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root10510000: integer above maximum"));
        }

        Ok(Root10510000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1051000(pub Root10510000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105100(pub Root1051000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root10510(pub Root105100);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item1(pub i64);
impl std::ops::Deref for Root105110Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root105110Item1: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root105110Item1: integer above maximum"));
        }

        Ok(Root105110Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item2(pub i64);
impl std::ops::Deref for Root105110Item2 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12 {
            return Err(DeError::custom("Root105110Item2: integer below minimum"));
        }
        if x > 12 {
            return Err(DeError::custom("Root105110Item2: integer above maximum"));
        }

        Ok(Root105110Item2(x))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root105110Item3 {
    V,
}
impl<'de> Deserialize<'de> for Root105110Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "" => Ok(Root105110Item3::V),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root105110Item3 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root105110Item3::V => ser.serialize_str(""),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105110Item60(pub String);
impl std::ops::Deref for Root105110Item60 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105110ITEM60: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://lh3\\.googleusercontent\\.com/.*").unwrap());
impl<'de> Deserialize<'de> for Root105110Item60 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105110ITEM60.is_match(&s) {
            return Err(DeError::custom("Root105110Item60: string failed pattern"));
        }
        Ok(Root105110Item60(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item620(pub i64);
impl std::ops::Deref for Root105110Item620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item620 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom("Root105110Item620: integer below minimum"));
        }
        if x > 4284 {
            return Err(DeError::custom("Root105110Item620: integer above maximum"));
        }

        Ok(Root105110Item620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item621(pub i64);
impl std::ops::Deref for Root105110Item621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item621 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 650 {
            return Err(DeError::custom("Root105110Item621: integer below minimum"));
        }
        if x > 5712 {
            return Err(DeError::custom("Root105110Item621: integer above maximum"));
        }

        Ok(Root105110Item621(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item62(pub Root105110Item620, pub Root105110Item621);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item630(pub i64);
impl std::ops::Deref for Root105110Item630 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item630 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 203 {
            return Err(DeError::custom("Root105110Item630: integer below minimum"));
        }
        if x > 203 {
            return Err(DeError::custom("Root105110Item630: integer above maximum"));
        }

        Ok(Root105110Item630(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item631(pub i64);
impl std::ops::Deref for Root105110Item631 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item631 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 100 {
            return Err(DeError::custom("Root105110Item631: integer below minimum"));
        }
        if x > 100 {
            return Err(DeError::custom("Root105110Item631: integer above maximum"));
        }

        Ok(Root105110Item631(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item63(pub Root105110Item630, pub Root105110Item631);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item6(
    pub Root105110Item60,
    pub String,
    pub Root105110Item62,
    pub Root105110Item63,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item800(pub i64);
impl std::ops::Deref for Root105110Item800 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item800 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root105110Item800: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root105110Item800: integer above maximum"));
        }

        Ok(Root105110Item800(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105110Item801(pub f64);
impl std::ops::Deref for Root105110Item801 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item801 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105110Item801: non-finite number"));
        }
        if x < -113.128302199999993 {
            return Err(DeError::custom("Root105110Item801: number below minimum"));
        }
        if x > -111.824759400000005 {
            return Err(DeError::custom("Root105110Item801: number above maximum"));
        }

        Ok(Root105110Item801(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105110Item802(pub f64);
impl std::ops::Deref for Root105110Item802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item802 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105110Item802: non-finite number"));
        }
        if x < 37.100494999999995 {
            return Err(DeError::custom("Root105110Item802: number below minimum"));
        }
        if x > 40.433213100000003 {
            return Err(DeError::custom("Root105110Item802: number above maximum"));
        }

        Ok(Root105110Item802(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item80(
    pub Root105110Item800,
    pub Root105110Item801,
    pub Root105110Item802,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item810(pub i64);
impl std::ops::Deref for Root105110Item810 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item810 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root105110Item810: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root105110Item810: integer above maximum"));
        }

        Ok(Root105110Item810(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item811(pub i64);
impl std::ops::Deref for Root105110Item811 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item811 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 90 {
            return Err(DeError::custom("Root105110Item811: integer below minimum"));
        }
        if x > 90 {
            return Err(DeError::custom("Root105110Item811: integer above maximum"));
        }

        Ok(Root105110Item811(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item81(pub Root105110Item810, pub Root105110Item811);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item820(pub i64);
impl std::ops::Deref for Root105110Item820 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item820 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom("Root105110Item820: integer below minimum"));
        }
        if x > 4284 {
            return Err(DeError::custom("Root105110Item820: integer above maximum"));
        }

        Ok(Root105110Item820(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item821(pub i64);
impl std::ops::Deref for Root105110Item821 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item821 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 650 {
            return Err(DeError::custom("Root105110Item821: integer below minimum"));
        }
        if x > 5712 {
            return Err(DeError::custom("Root105110Item821: integer above maximum"));
        }

        Ok(Root105110Item821(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item82(pub Root105110Item820, pub Root105110Item821);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item83(pub i64);
impl std::ops::Deref for Root105110Item83 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item83 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 75 {
            return Err(DeError::custom("Root105110Item83: integer below minimum"));
        }
        if x > 75 {
            return Err(DeError::custom("Root105110Item83: integer above maximum"));
        }

        Ok(Root105110Item83(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item8(
    pub Root105110Item80,
    pub Root105110Item81,
    pub Root105110Item82,
    pub Root105110Item83,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105110Item10(pub String);
impl std::ops::Deref for Root105110Item10 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105110ITEM10: Lazy<Regex> = Lazy::new(|| Regex::new("^0ahUKEw.*").unwrap());
impl<'de> Deserialize<'de> for Root105110Item10 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105110ITEM10.is_match(&s) {
            return Err(DeError::custom("Root105110Item10: string failed pattern"));
        }
        Ok(Root105110Item10(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105110Item20(pub String);
impl std::ops::Deref for Root105110Item20 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105110ITEM20: Lazy<Regex> = Lazy::new(|| Regex::new("^Photo.*").unwrap());
impl<'de> Deserialize<'de> for Root105110Item20 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105110ITEM20.is_match(&s) {
            return Err(DeError::custom("Root105110Item20: string failed pattern"));
        }
        Ok(Root105110Item20(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item2110(pub i64);
impl std::ops::Deref for Root105110Item2110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root105110Item2110: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root105110Item2110: integer above maximum"));
        }

        Ok(Root105110Item2110(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item211(pub Root105110Item2110, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item2120(pub i64);
impl std::ops::Deref for Root105110Item2120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2120 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root105110Item2120: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root105110Item2120: integer above maximum"));
        }

        Ok(Root105110Item2120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item2121(pub i64);
impl std::ops::Deref for Root105110Item2121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2121 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root105110Item2121: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root105110Item2121: integer above maximum"));
        }

        Ok(Root105110Item2121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item21220(pub i64);
impl std::ops::Deref for Root105110Item21220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item21220 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 650 {
            return Err(DeError::custom(
                "Root105110Item21220: integer below minimum",
            ));
        }
        if x > 5712 {
            return Err(DeError::custom(
                "Root105110Item21220: integer above maximum",
            ));
        }

        Ok(Root105110Item21220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item21221(pub i64);
impl std::ops::Deref for Root105110Item21221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item21221 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 640 {
            return Err(DeError::custom(
                "Root105110Item21221: integer below minimum",
            ));
        }
        if x > 4284 {
            return Err(DeError::custom(
                "Root105110Item21221: integer above maximum",
            ));
        }

        Ok(Root105110Item21221(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item2122(pub Root105110Item21220, pub Root105110Item21221);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item212(
    pub Root105110Item2120,
    pub Root105110Item2121,
    pub Root105110Item2122,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105110Item2140000(pub String);
impl std::ops::Deref for Root105110Item2140000 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105110ITEM2140000: Lazy<Regex> =
    Lazy::new(|| Regex::new("^Images may be subject to copyright\\..*").unwrap());
impl<'de> Deserialize<'de> for Root105110Item2140000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105110ITEM2140000.is_match(&s) {
            return Err(DeError::custom(
                "Root105110Item2140000: string failed pattern",
            ));
        }
        Ok(Root105110Item2140000(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item214000(pub Root105110Item2140000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item21400(pub Root105110Item214000);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item2140(pub Root105110Item21400);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item214(pub Root105110Item2140);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item215000(pub i64);
impl std::ops::Deref for Root105110Item215000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item215000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom(
                "Root105110Item215000: integer below minimum",
            ));
        }
        if x > 2 {
            return Err(DeError::custom(
                "Root105110Item215000: integer above maximum",
            ));
        }

        Ok(Root105110Item215000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item21500(pub Root105110Item215000);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105110Item2150102(pub f64);
impl std::ops::Deref for Root105110Item2150102 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2150102 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105110Item2150102: non-finite number"));
        }
        if x < 37.100494999999995 {
            return Err(DeError::custom(
                "Root105110Item2150102: number below minimum",
            ));
        }
        if x > 40.433213100000003 {
            return Err(DeError::custom(
                "Root105110Item2150102: number above maximum",
            ));
        }

        Ok(Root105110Item2150102(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root105110Item2150103(pub f64);
impl std::ops::Deref for Root105110Item2150103 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2150103 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root105110Item2150103: non-finite number"));
        }
        if x < -113.128302199999993 {
            return Err(DeError::custom(
                "Root105110Item2150103: number below minimum",
            ));
        }
        if x > -111.824759400000005 {
            return Err(DeError::custom(
                "Root105110Item2150103: number above maximum",
            ));
        }

        Ok(Root105110Item2150103(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item215010(
    pub Null,
    pub Null,
    pub Root105110Item2150102,
    pub Root105110Item2150103,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item21501(pub Root105110Item215010);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item2150(pub Root105110Item21500, pub Root105110Item21501);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item215(pub Root105110Item2150);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item2160(pub i64);
impl std::ops::Deref for Root105110Item2160 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2160 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root105110Item2160: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root105110Item2160: integer above maximum"));
        }

        Ok(Root105110Item2160(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item2163Item(pub i64);
impl std::ops::Deref for Root105110Item2163Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item2163Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom(
                "Root105110Item2163Item: integer below minimum",
            ));
        }
        if x > 8 {
            return Err(DeError::custom(
                "Root105110Item2163Item: integer above maximum",
            ));
        }

        Ok(Root105110Item2163Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item216530(pub i64);
impl std::ops::Deref for Root105110Item216530 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item216530 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root105110Item216530: integer below minimum",
            ));
        }
        if x > 6 {
            return Err(DeError::custom(
                "Root105110Item216530: integer above maximum",
            ));
        }

        Ok(Root105110Item216530(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item216531(pub i64);
impl std::ops::Deref for Root105110Item216531 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item216531 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom(
                "Root105110Item216531: integer below minimum",
            ));
        }
        if x > 7 {
            return Err(DeError::custom(
                "Root105110Item216531: integer above maximum",
            ));
        }

        Ok(Root105110Item216531(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item216532(pub i64);
impl std::ops::Deref for Root105110Item216532 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item216532 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom(
                "Root105110Item216532: integer below minimum",
            ));
        }
        if x > 4 {
            return Err(DeError::custom(
                "Root105110Item216532: integer above maximum",
            ));
        }

        Ok(Root105110Item216532(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item216533(pub i64);
impl std::ops::Deref for Root105110Item216533 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item216533 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root105110Item216533: integer below minimum",
            ));
        }
        if x > 1 {
            return Err(DeError::custom(
                "Root105110Item216533: integer above maximum",
            ));
        }

        Ok(Root105110Item216533(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item216534(pub i64);
impl std::ops::Deref for Root105110Item216534 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item216534 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom(
                "Root105110Item216534: integer below minimum",
            ));
        }
        if x > 3 {
            return Err(DeError::custom(
                "Root105110Item216534: integer above maximum",
            ));
        }

        Ok(Root105110Item216534(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item21653(
    pub Root105110Item216530,
    pub Root105110Item216531,
    pub Root105110Item216532,
    pub Root105110Item216533,
    pub Root105110Item216534,
);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item2165(pub Null, pub Null, pub String, pub Root105110Item21653);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item21680(pub i64);
impl std::ops::Deref for Root105110Item21680 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item21680 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2017 {
            return Err(DeError::custom(
                "Root105110Item21680: integer below minimum",
            ));
        }
        if x > 2025 {
            return Err(DeError::custom(
                "Root105110Item21680: integer above maximum",
            ));
        }

        Ok(Root105110Item21680(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item21681(pub i64);
impl std::ops::Deref for Root105110Item21681 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item21681 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom(
                "Root105110Item21681: integer below minimum",
            ));
        }
        if x > 11 {
            return Err(DeError::custom(
                "Root105110Item21681: integer above maximum",
            ));
        }

        Ok(Root105110Item21681(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item21682(pub i64);
impl std::ops::Deref for Root105110Item21682 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item21682 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom(
                "Root105110Item21682: integer below minimum",
            ));
        }
        if x > 29 {
            return Err(DeError::custom(
                "Root105110Item21682: integer above maximum",
            ));
        }

        Ok(Root105110Item21682(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item21683(pub i64);
impl std::ops::Deref for Root105110Item21683 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item21683 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom(
                "Root105110Item21683: integer below minimum",
            ));
        }
        if x > 23 {
            return Err(DeError::custom(
                "Root105110Item21683: integer above maximum",
            ));
        }

        Ok(Root105110Item21683(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item2168(
    pub Root105110Item21680,
    pub Root105110Item21681,
    pub Root105110Item21682,
    pub Root105110Item21683,
);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item216(
    pub Root105110Item2160,
    pub Null,
    pub Null,
    pub Option<Vec<Root105110Item2163Item>>,
    pub Null,
    pub Root105110Item2165,
    pub Null,
    pub Null,
    pub Root105110Item2168,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105110Item21190(pub String);
impl std::ops::Deref for Root105110Item21190 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105110ITEM21190: Lazy<Regex> = Lazy::new(|| Regex::new("^UGCS_REFERENCE.*").unwrap());
impl<'de> Deserialize<'de> for Root105110Item21190 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105110ITEM21190.is_match(&s) {
            return Err(DeError::custom(
                "Root105110Item21190: string failed pattern",
            ));
        }
        Ok(Root105110Item21190(s))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root105110Item21192 {
    V1,
}
impl<'de> Deserialize<'de> for Root105110Item21192 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "1" => Ok(Root105110Item21192::V1),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root105110Item21192 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root105110Item21192::V1 => ser.serialize_str("1"),
        }
    }
}

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item2119(pub Root105110Item21190, pub String, pub Root105110Item21192);

/// tuple len=20 (required first 20 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item21(
    pub Null,
    pub Root105110Item211,
    pub Root105110Item212,
    pub Null,
    pub Root105110Item214,
    pub Root105110Item215,
    pub Root105110Item216,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105110Item2119,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105110Item22(pub i64);
impl std::ops::Deref for Root105110Item22 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105110Item22 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root105110Item22: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root105110Item22: integer above maximum"));
        }

        Ok(Root105110Item22(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item29(pub String, pub String);

/// tuple len=32 (required first 32 slots)
#[derive(Debug, Deserialize)]
pub struct Root105110Item(
    pub String,
    pub Root105110Item1,
    pub Root105110Item2,
    pub Root105110Item3,
    pub Null,
    pub Null,
    pub Root105110Item6,
    pub Null,
    pub Root105110Item8,
    pub String,
    pub Root105110Item10,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105110Item20,
    pub Root105110Item21,
    pub Root105110Item22,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105110Item29,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105111(pub i64);
impl std::ops::Deref for Root105111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105111 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root105111: integer below minimum"));
        }
        if x > 1481 {
            return Err(DeError::custom("Root105111: integer above maximum"));
        }

        Ok(Root105111(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root105115(pub String);
impl std::ops::Deref for Root105115 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT105115: Lazy<Regex> =
    Lazy::new(|| Regex::new("^EvgDKYQi49-NlUMIDwAAAAEAAAMAAAAAAAAAAAAAAAAA.*").unwrap());
impl<'de> Deserialize<'de> for Root105115 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT105115.is_match(&s) {
            return Err(DeError::custom("Root105115: string failed pattern"));
        }
        Ok(Root105115(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105118000(pub i64);
impl std::ops::Deref for Root105118000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105118000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root105118000: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root105118000: integer above maximum"));
        }

        Ok(Root105118000(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root105118001(pub i64);
impl std::ops::Deref for Root105118001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root105118001 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root105118001: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root105118001: integer above maximum"));
        }

        Ok(Root105118001(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root10511800(pub Root105118000, pub Root105118001);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1051180(pub Root10511800);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1051181(pub i64);
impl std::ops::Deref for Root1051181 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1051181 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1051181: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root1051181: integer above maximum"));
        }

        Ok(Root1051181(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1051183(pub i64);
impl std::ops::Deref for Root1051183 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1051183 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1051183: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1051183: integer above maximum"));
        }

        Ok(Root1051183(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1051184(pub i64);
impl std::ops::Deref for Root1051184 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1051184 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1051184: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root1051184: integer above maximum"));
        }

        Ok(Root1051184(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root105118(
    pub Root1051180,
    pub Root1051181,
    pub Null,
    pub Root1051183,
    pub Root1051184,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1051110(pub i64);
impl std::ops::Deref for Root1051110 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1051110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root1051110: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1051110: integer above maximum"));
        }

        Ok(Root1051110(x))
    }
}
/// tuple len=11 (required first 10 slots); accepts 10..=11 elements
#[derive(Debug)]
pub struct Root10511(
    pub Option<Vec<Root105110Item>>,
    pub Option<Root105111>,
    pub Null,
    pub String,
    pub Null,
    pub Option<Root105115>,
    pub Null,
    pub Null,
    pub Option<Root105118>,
    pub Null,
    pub Option<Root1051110>,
);

impl<'de> serde::Deserialize<'de> for Root10511 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root10511;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 10..=11")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root10511, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: Option<Vec<Root105110Item>> = match seq
                    .next_element::<Option<Vec<Root105110Item>>>()?
                {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(0, &"at least 10 elements"));
                    }
                };
                let a1: Option<Root105111> = match seq.next_element::<Option<Root105111>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 10 elements"));
                    }
                };
                let a2: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(2, &"at least 10 elements"));
                    }
                };
                let a3: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 10 elements"));
                    }
                };
                let a4: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 10 elements"));
                    }
                };
                let a5: Option<Root105115> = match seq.next_element::<Option<Root105115>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(5, &"at least 10 elements"));
                    }
                };
                let a6: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(6, &"at least 10 elements"));
                    }
                };
                let a7: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(7, &"at least 10 elements"));
                    }
                };
                let a8: Option<Root105118> = match seq.next_element::<Option<Root105118>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(8, &"at least 10 elements"));
                    }
                };
                let a9: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(9, &"at least 10 elements"));
                    }
                };
                let a10: Option<Root1051110> = match seq.next_element::<Option<Root1051110>>()? {
                    Some(v) => v,
                    None => None,
                };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root10511(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root1051(pub Root10510, pub Root10511);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root105(pub Root1050, pub Root1051);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root110 {
    En,
    Es,
}
impl<'de> Deserialize<'de> for Root110 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "en" => Ok(Root110::En),
            "es" => Ok(Root110::Es),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root110 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root110::En => ser.serialize_str("en"),
            Root110::Es => ser.serialize_str("es"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root112(pub String);
impl std::ops::Deref for Root112 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT112: Lazy<Regex> = Lazy::new(|| Regex::new("^English.*").unwrap());
impl<'de> Deserialize<'de> for Root112 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT112.is_match(&s) {
            return Err(DeError::custom("Root112: string failed pattern"));
        }
        Ok(Root112(s))
    }
}
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root113 {
    En,
}
impl<'de> Deserialize<'de> for Root113 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "en" => Ok(Root113::En),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root113 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root113::En => ser.serialize_str("en"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3000(pub String);
impl std::ops::Deref for Root118Item3000 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3000: Lazy<Regex> = Lazy::new(|| Regex::new("^Friday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3000.is_match(&s) {
            return Err(DeError::custom("Root118Item3000: string failed pattern"));
        }
        Ok(Root118Item3000(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3001(pub i64);
impl std::ops::Deref for Root118Item3001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3001 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root118Item3001: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root118Item3001: integer above maximum"));
        }

        Ok(Root118Item3001(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30020(pub i64);
impl std::ops::Deref for Root118Item30020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item30020: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item30020: integer above maximum"));
        }

        Ok(Root118Item30020(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30021(pub i64);
impl std::ops::Deref for Root118Item30021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30021 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30021: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30021: integer above maximum"));
        }

        Ok(Root118Item30021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30022(pub i64);
impl std::ops::Deref for Root118Item30022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30022 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root118Item30022: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root118Item30022: integer above maximum"));
        }

        Ok(Root118Item30022(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3002(
    pub Root118Item30020,
    pub Root118Item30021,
    pub Root118Item30022,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3003ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root118Item3003ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3003ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3003ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3003ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3003ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3003ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root118Item3003ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3003ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 11 {
            return Err(DeError::custom(
                "Root118Item3003ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3003ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3003ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3003ItemItemAlt1(
    pub Vec<Root118Item3003ItemItemAlt10Item>,
    pub Vec<Root118Item3003ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root118Item3003ItemItem {
    V0(String),
    V1(Root118Item3003ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root118Item3003ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root118Item3003ItemItem::V0(x));
        }
        if let Ok(x) = <Root118Item3003ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root118Item3003ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3004(pub i64);
impl std::ops::Deref for Root118Item3004 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3004 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3004: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3004: integer above maximum"));
        }

        Ok(Root118Item3004(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3005(pub i64);
impl std::ops::Deref for Root118Item3005 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3005 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3005: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root118Item3005: integer above maximum"));
        }

        Ok(Root118Item3005(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item300(
    pub Root118Item3000,
    pub Root118Item3001,
    pub Root118Item3002,
    pub Vec<Vec<Root118Item3003ItemItem>>,
    pub Root118Item3004,
    pub Root118Item3005,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3010(pub String);
impl std::ops::Deref for Root118Item3010 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3010: Lazy<Regex> = Lazy::new(|| Regex::new("^Saturday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3010 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3010.is_match(&s) {
            return Err(DeError::custom("Root118Item3010: string failed pattern"));
        }
        Ok(Root118Item3010(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3011(pub i64);
impl std::ops::Deref for Root118Item3011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3011 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom("Root118Item3011: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root118Item3011: integer above maximum"));
        }

        Ok(Root118Item3011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30120(pub i64);
impl std::ops::Deref for Root118Item30120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30120 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item30120: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item30120: integer above maximum"));
        }

        Ok(Root118Item30120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30121(pub i64);
impl std::ops::Deref for Root118Item30121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30121 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30121: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30121: integer above maximum"));
        }

        Ok(Root118Item30121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30122(pub i64);
impl std::ops::Deref for Root118Item30122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30122 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom("Root118Item30122: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root118Item30122: integer above maximum"));
        }

        Ok(Root118Item30122(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3012(
    pub Root118Item30120,
    pub Root118Item30121,
    pub Root118Item30122,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3013ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root118Item3013ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3013ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3013ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3013ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3013ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3013ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root118Item3013ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3013ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 13 {
            return Err(DeError::custom(
                "Root118Item3013ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3013ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3013ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3013ItemItemAlt1(
    pub Vec<Root118Item3013ItemItemAlt10Item>,
    pub Vec<Root118Item3013ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root118Item3013ItemItem {
    V0(String),
    V1(Root118Item3013ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root118Item3013ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root118Item3013ItemItem::V0(x));
        }
        if let Ok(x) = <Root118Item3013ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root118Item3013ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3014(pub i64);
impl std::ops::Deref for Root118Item3014 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3014 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3014: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3014: integer above maximum"));
        }

        Ok(Root118Item3014(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3015(pub i64);
impl std::ops::Deref for Root118Item3015 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3015 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3015: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root118Item3015: integer above maximum"));
        }

        Ok(Root118Item3015(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item301(
    pub Root118Item3010,
    pub Root118Item3011,
    pub Root118Item3012,
    pub Vec<Vec<Root118Item3013ItemItem>>,
    pub Root118Item3014,
    pub Root118Item3015,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3020(pub String);
impl std::ops::Deref for Root118Item3020 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3020: Lazy<Regex> = Lazy::new(|| Regex::new("^Sunday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3020.is_match(&s) {
            return Err(DeError::custom("Root118Item3020: string failed pattern"));
        }
        Ok(Root118Item3020(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3021(pub i64);
impl std::ops::Deref for Root118Item3021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3021 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom("Root118Item3021: integer below minimum"));
        }
        if x > 7 {
            return Err(DeError::custom("Root118Item3021: integer above maximum"));
        }

        Ok(Root118Item3021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30220(pub i64);
impl std::ops::Deref for Root118Item30220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30220 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item30220: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item30220: integer above maximum"));
        }

        Ok(Root118Item30220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30221(pub i64);
impl std::ops::Deref for Root118Item30221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30221 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30221: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30221: integer above maximum"));
        }

        Ok(Root118Item30221(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30222(pub i64);
impl std::ops::Deref for Root118Item30222 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30222 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom("Root118Item30222: integer below minimum"));
        }
        if x > 7 {
            return Err(DeError::custom("Root118Item30222: integer above maximum"));
        }

        Ok(Root118Item30222(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3022(
    pub Root118Item30220,
    pub Root118Item30221,
    pub Root118Item30222,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3023ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root118Item3023ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3023ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3023ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3023ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3023ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3023ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root118Item3023ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3023ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 13 {
            return Err(DeError::custom(
                "Root118Item3023ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3023ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3023ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3023ItemItemAlt1(
    pub Vec<Root118Item3023ItemItemAlt10Item>,
    pub Vec<Root118Item3023ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root118Item3023ItemItem {
    V0(String),
    V1(Root118Item3023ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root118Item3023ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root118Item3023ItemItem::V0(x));
        }
        if let Ok(x) = <Root118Item3023ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root118Item3023ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3024(pub i64);
impl std::ops::Deref for Root118Item3024 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3024 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3024: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3024: integer above maximum"));
        }

        Ok(Root118Item3024(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3025(pub i64);
impl std::ops::Deref for Root118Item3025 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3025 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3025: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root118Item3025: integer above maximum"));
        }

        Ok(Root118Item3025(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item302(
    pub Root118Item3020,
    pub Root118Item3021,
    pub Root118Item3022,
    pub Vec<Vec<Root118Item3023ItemItem>>,
    pub Root118Item3024,
    pub Root118Item3025,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3030(pub String);
impl std::ops::Deref for Root118Item3030 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3030: Lazy<Regex> = Lazy::new(|| Regex::new("^Monday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3030 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3030.is_match(&s) {
            return Err(DeError::custom("Root118Item3030: string failed pattern"));
        }
        Ok(Root118Item3030(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3031(pub i64);
impl std::ops::Deref for Root118Item3031 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3031 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3031: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root118Item3031: integer above maximum"));
        }

        Ok(Root118Item3031(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30320(pub i64);
impl std::ops::Deref for Root118Item30320 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30320 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item30320: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item30320: integer above maximum"));
        }

        Ok(Root118Item30320(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30321(pub i64);
impl std::ops::Deref for Root118Item30321 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30321 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30321: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30321: integer above maximum"));
        }

        Ok(Root118Item30321(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30322(pub i64);
impl std::ops::Deref for Root118Item30322 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30322 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 8 {
            return Err(DeError::custom("Root118Item30322: integer below minimum"));
        }
        if x > 8 {
            return Err(DeError::custom("Root118Item30322: integer above maximum"));
        }

        Ok(Root118Item30322(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3032(
    pub Root118Item30320,
    pub Root118Item30321,
    pub Root118Item30322,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3033Item10Item(pub i64);
impl std::ops::Deref for Root118Item3033Item10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3033Item10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3033Item10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3033Item10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3033Item10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3033Item11Item(pub i64);
impl std::ops::Deref for Root118Item3033Item11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3033Item11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 13 {
            return Err(DeError::custom(
                "Root118Item3033Item11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3033Item11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3033Item11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3033Item1(
    pub Vec<Root118Item3033Item10Item>,
    pub Vec<Root118Item3033Item11Item>,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3033Item(pub String, pub Root118Item3033Item1);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3034(pub i64);
impl std::ops::Deref for Root118Item3034 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3034 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3034: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3034: integer above maximum"));
        }

        Ok(Root118Item3034(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3035(pub i64);
impl std::ops::Deref for Root118Item3035 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3035 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3035: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root118Item3035: integer above maximum"));
        }

        Ok(Root118Item3035(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item303(
    pub Root118Item3030,
    pub Root118Item3031,
    pub Root118Item3032,
    pub Vec<Root118Item3033Item>,
    pub Root118Item3034,
    pub Root118Item3035,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3040(pub String);
impl std::ops::Deref for Root118Item3040 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3040: Lazy<Regex> = Lazy::new(|| Regex::new("^Tuesday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3040 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3040.is_match(&s) {
            return Err(DeError::custom("Root118Item3040: string failed pattern"));
        }
        Ok(Root118Item3040(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3041(pub i64);
impl std::ops::Deref for Root118Item3041 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3041 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root118Item3041: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root118Item3041: integer above maximum"));
        }

        Ok(Root118Item3041(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30420(pub i64);
impl std::ops::Deref for Root118Item30420 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30420 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item30420: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item30420: integer above maximum"));
        }

        Ok(Root118Item30420(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30421(pub i64);
impl std::ops::Deref for Root118Item30421 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30421 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30421: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30421: integer above maximum"));
        }

        Ok(Root118Item30421(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30422(pub i64);
impl std::ops::Deref for Root118Item30422 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30422 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30422: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30422: integer above maximum"));
        }

        Ok(Root118Item30422(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3042(
    pub Root118Item30420,
    pub Root118Item30421,
    pub Root118Item30422,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3043Item10Item(pub i64);
impl std::ops::Deref for Root118Item3043Item10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3043Item10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3043Item10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3043Item10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3043Item10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3043Item11Item(pub i64);
impl std::ops::Deref for Root118Item3043Item11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3043Item11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 13 {
            return Err(DeError::custom(
                "Root118Item3043Item11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3043Item11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3043Item11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3043Item1(
    pub Vec<Root118Item3043Item10Item>,
    pub Vec<Root118Item3043Item11Item>,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3043Item(pub String, pub Root118Item3043Item1);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3044(pub i64);
impl std::ops::Deref for Root118Item3044 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3044 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3044: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3044: integer above maximum"));
        }

        Ok(Root118Item3044(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3045(pub i64);
impl std::ops::Deref for Root118Item3045 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3045 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3045: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root118Item3045: integer above maximum"));
        }

        Ok(Root118Item3045(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item304(
    pub Root118Item3040,
    pub Root118Item3041,
    pub Root118Item3042,
    pub Vec<Root118Item3043Item>,
    pub Root118Item3044,
    pub Root118Item3045,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3050(pub String);
impl std::ops::Deref for Root118Item3050 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3050: Lazy<Regex> = Lazy::new(|| Regex::new("^Wednesday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3050 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3050.is_match(&s) {
            return Err(DeError::custom("Root118Item3050: string failed pattern"));
        }
        Ok(Root118Item3050(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3051(pub i64);
impl std::ops::Deref for Root118Item3051 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3051 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root118Item3051: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root118Item3051: integer above maximum"));
        }

        Ok(Root118Item3051(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30520(pub i64);
impl std::ops::Deref for Root118Item30520 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30520 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item30520: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item30520: integer above maximum"));
        }

        Ok(Root118Item30520(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30521(pub i64);
impl std::ops::Deref for Root118Item30521 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30521 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30521: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30521: integer above maximum"));
        }

        Ok(Root118Item30521(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30522(pub i64);
impl std::ops::Deref for Root118Item30522 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30522 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root118Item30522: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root118Item30522: integer above maximum"));
        }

        Ok(Root118Item30522(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3052(
    pub Root118Item30520,
    pub Root118Item30521,
    pub Root118Item30522,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3053Item10Item(pub i64);
impl std::ops::Deref for Root118Item3053Item10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3053Item10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3053Item10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3053Item10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3053Item10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3053Item11Item(pub i64);
impl std::ops::Deref for Root118Item3053Item11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3053Item11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 13 {
            return Err(DeError::custom(
                "Root118Item3053Item11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3053Item11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3053Item11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3053Item1(
    pub Vec<Root118Item3053Item10Item>,
    pub Vec<Root118Item3053Item11Item>,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3053Item(pub String, pub Root118Item3053Item1);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3054(pub i64);
impl std::ops::Deref for Root118Item3054 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3054 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3054: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3054: integer above maximum"));
        }

        Ok(Root118Item3054(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3055(pub i64);
impl std::ops::Deref for Root118Item3055 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3055 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3055: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root118Item3055: integer above maximum"));
        }

        Ok(Root118Item3055(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item305(
    pub Root118Item3050,
    pub Root118Item3051,
    pub Root118Item3052,
    pub Vec<Root118Item3053Item>,
    pub Root118Item3054,
    pub Root118Item3055,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3060(pub String);
impl std::ops::Deref for Root118Item3060 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3060: Lazy<Regex> = Lazy::new(|| Regex::new("^Thursday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3060 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3060.is_match(&s) {
            return Err(DeError::custom("Root118Item3060: string failed pattern"));
        }
        Ok(Root118Item3060(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3061(pub i64);
impl std::ops::Deref for Root118Item3061 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3061 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root118Item3061: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root118Item3061: integer above maximum"));
        }

        Ok(Root118Item3061(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30620(pub i64);
impl std::ops::Deref for Root118Item30620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30620 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item30620: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item30620: integer above maximum"));
        }

        Ok(Root118Item30620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30621(pub i64);
impl std::ops::Deref for Root118Item30621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30621 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item30621: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item30621: integer above maximum"));
        }

        Ok(Root118Item30621(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item30622(pub i64);
impl std::ops::Deref for Root118Item30622 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item30622 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 11 {
            return Err(DeError::custom("Root118Item30622: integer below minimum"));
        }
        if x > 11 {
            return Err(DeError::custom("Root118Item30622: integer above maximum"));
        }

        Ok(Root118Item30622(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3062(
    pub Root118Item30620,
    pub Root118Item30621,
    pub Root118Item30622,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3063Item10Item(pub i64);
impl std::ops::Deref for Root118Item3063Item10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3063Item10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3063Item10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3063Item10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3063Item10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3063Item11Item(pub i64);
impl std::ops::Deref for Root118Item3063Item11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3063Item11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 13 {
            return Err(DeError::custom(
                "Root118Item3063Item11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3063Item11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3063Item11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3063Item1(
    pub Vec<Root118Item3063Item10Item>,
    pub Vec<Root118Item3063Item11Item>,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3063Item(pub String, pub Root118Item3063Item1);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3064(pub i64);
impl std::ops::Deref for Root118Item3064 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3064 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3064: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3064: integer above maximum"));
        }

        Ok(Root118Item3064(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3065(pub i64);
impl std::ops::Deref for Root118Item3065 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3065 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3065: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root118Item3065: integer above maximum"));
        }

        Ok(Root118Item3065(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item306(
    pub Root118Item3060,
    pub Root118Item3061,
    pub Root118Item3062,
    pub Vec<Root118Item3063Item>,
    pub Root118Item3064,
    pub Root118Item3065,
);

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item30(
    pub Root118Item300,
    pub Root118Item301,
    pub Root118Item302,
    pub Root118Item303,
    pub Root118Item304,
    pub Root118Item305,
    pub Root118Item306,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root118Item3100(pub String);
impl std::ops::Deref for Root118Item3100 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT118ITEM3100: Lazy<Regex> = Lazy::new(|| Regex::new("^Friday.*").unwrap());
impl<'de> Deserialize<'de> for Root118Item3100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT118ITEM3100.is_match(&s) {
            return Err(DeError::custom("Root118Item3100: string failed pattern"));
        }
        Ok(Root118Item3100(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3101(pub i64);
impl std::ops::Deref for Root118Item3101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root118Item3101: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root118Item3101: integer above maximum"));
        }

        Ok(Root118Item3101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31020(pub i64);
impl std::ops::Deref for Root118Item31020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root118Item31020: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root118Item31020: integer above maximum"));
        }

        Ok(Root118Item31020(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31021(pub i64);
impl std::ops::Deref for Root118Item31021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31021 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root118Item31021: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root118Item31021: integer above maximum"));
        }

        Ok(Root118Item31021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31022(pub i64);
impl std::ops::Deref for Root118Item31022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31022 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root118Item31022: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root118Item31022: integer above maximum"));
        }

        Ok(Root118Item31022(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3102(
    pub Root118Item31020,
    pub Root118Item31021,
    pub Root118Item31022,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3103ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root118Item3103ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3103ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root118Item3103ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3103ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root118Item3103ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3103ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root118Item3103ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3103ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 11 {
            return Err(DeError::custom(
                "Root118Item3103ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root118Item3103ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root118Item3103ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3103ItemItemAlt1(
    pub Vec<Root118Item3103ItemItemAlt10Item>,
    pub Vec<Root118Item3103ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root118Item3103ItemItem {
    V0(String),
    V1(Root118Item3103ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root118Item3103ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root118Item3103ItemItem::V0(x));
        }
        if let Ok(x) = <Root118Item3103ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root118Item3103ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3104(pub i64);
impl std::ops::Deref for Root118Item3104 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3104 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item3104: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item3104: integer above maximum"));
        }

        Ok(Root118Item3104(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item3105(pub i64);
impl std::ops::Deref for Root118Item3105 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item3105 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item3105: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root118Item3105: integer above maximum"));
        }

        Ok(Root118Item3105(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item310(
    pub Root118Item3100,
    pub Root118Item3101,
    pub Root118Item3102,
    pub Vec<Vec<Root118Item3103ItemItem>>,
    pub Root118Item3104,
    pub Root118Item3105,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item311(pub i64);
impl std::ops::Deref for Root118Item311 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item311 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item311: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root118Item311: integer above maximum"));
        }

        Ok(Root118Item311(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item312(pub i64);
impl std::ops::Deref for Root118Item312 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item312 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item312: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root118Item312: integer above maximum"));
        }

        Ok(Root118Item312(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item314100(pub i64);
impl std::ops::Deref for Root118Item314100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item314100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item314100: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item314100: integer above maximum"));
        }

        Ok(Root118Item314100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item314101(pub i64);
impl std::ops::Deref for Root118Item314101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item314101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root118Item314101: integer below minimum"));
        }
        if x > 13 {
            return Err(DeError::custom("Root118Item314101: integer above maximum"));
        }

        Ok(Root118Item314101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31410210(pub i64);
impl std::ops::Deref for Root118Item31410210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31410210 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4279862841 {
            return Err(DeError::custom(
                "Root118Item31410210: integer below minimum",
            ));
        }
        if x > 4292621870 {
            return Err(DeError::custom(
                "Root118Item31410210: integer above maximum",
            ));
        }

        Ok(Root118Item31410210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31410211(pub i64);
impl std::ops::Deref for Root118Item31410211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31410211 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4285388172 {
            return Err(DeError::custom(
                "Root118Item31410211: integer below minimum",
            ));
        }
        if x > 4294949673 {
            return Err(DeError::custom(
                "Root118Item31410211: integer above maximum",
            ));
        }

        Ok(Root118Item31410211(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3141021(pub Root118Item31410210, pub Root118Item31410211);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item314102(pub Null, pub Root118Item3141021);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item31410(
    pub Root118Item314100,
    pub Root118Item314101,
    pub Root118Item314102,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3141(pub Root118Item31410);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item314(pub String, pub Root118Item3141);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item315100(pub i64);
impl std::ops::Deref for Root118Item315100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item315100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item315100: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item315100: integer above maximum"));
        }

        Ok(Root118Item315100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item315101(pub i64);
impl std::ops::Deref for Root118Item315101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item315101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root118Item315101: integer below minimum"));
        }
        if x > 13 {
            return Err(DeError::custom("Root118Item315101: integer above maximum"));
        }

        Ok(Root118Item315101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31510210(pub i64);
impl std::ops::Deref for Root118Item31510210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31510210 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4279862841 {
            return Err(DeError::custom(
                "Root118Item31510210: integer below minimum",
            ));
        }
        if x > 4292621870 {
            return Err(DeError::custom(
                "Root118Item31510210: integer above maximum",
            ));
        }

        Ok(Root118Item31510210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31510211(pub i64);
impl std::ops::Deref for Root118Item31510211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31510211 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4285388172 {
            return Err(DeError::custom(
                "Root118Item31510211: integer below minimum",
            ));
        }
        if x > 4294949673 {
            return Err(DeError::custom(
                "Root118Item31510211: integer above maximum",
            ));
        }

        Ok(Root118Item31510211(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3151021(pub Root118Item31510210, pub Root118Item31510211);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item315102(pub Null, pub Root118Item3151021);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item31510(
    pub Root118Item315100,
    pub Root118Item315101,
    pub Root118Item315102,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3151(pub Root118Item31510);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item315(pub String, pub Root118Item3151);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root118Item3180 {
    Closed,
    Open,
}
impl<'de> Deserialize<'de> for Root118Item3180 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Closed" => Ok(Root118Item3180::Closed),
            "Open" => Ok(Root118Item3180::Open),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root118Item3180 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root118Item3180::Closed => ser.serialize_str("Closed"),
            Root118Item3180::Open => ser.serialize_str("Open"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item318100(pub i64);
impl std::ops::Deref for Root118Item318100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item318100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root118Item318100: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root118Item318100: integer above maximum"));
        }

        Ok(Root118Item318100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item318101(pub i64);
impl std::ops::Deref for Root118Item318101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item318101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root118Item318101: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root118Item318101: integer above maximum"));
        }

        Ok(Root118Item318101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31810210(pub i64);
impl std::ops::Deref for Root118Item31810210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31810210 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4279862841 {
            return Err(DeError::custom(
                "Root118Item31810210: integer below minimum",
            ));
        }
        if x > 4292621870 {
            return Err(DeError::custom(
                "Root118Item31810210: integer above maximum",
            ));
        }

        Ok(Root118Item31810210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item31810211(pub i64);
impl std::ops::Deref for Root118Item31810211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item31810211 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4285388172 {
            return Err(DeError::custom(
                "Root118Item31810211: integer below minimum",
            ));
        }
        if x > 4294097077 {
            return Err(DeError::custom(
                "Root118Item31810211: integer above maximum",
            ));
        }

        Ok(Root118Item31810211(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3181021(pub Root118Item31810210, pub Root118Item31810211);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item318102(pub Null, pub Root118Item3181021);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item31810(
    pub Root118Item318100,
    pub Root118Item318101,
    pub Root118Item318102,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3181(pub Root118Item31810);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item318(pub Root118Item3180, pub Root118Item3181);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item31(
    pub Root118Item310,
    pub Option<Root118Item311>,
    pub Root118Item312,
    pub Null,
    pub Root118Item314,
    pub Root118Item315,
    pub Null,
    pub Null,
    pub Root118Item318,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item32(pub i64);
impl std::ops::Deref for Root118Item32 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item32 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root118Item32: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root118Item32: integer above maximum"));
        }

        Ok(Root118Item32(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root118Item36(pub i64);
impl std::ops::Deref for Root118Item36 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root118Item36 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root118Item36: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root118Item36: integer above maximum"));
        }

        Ok(Root118Item36(x))
    }
}
/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item3(
    pub Root118Item30,
    pub Root118Item31,
    pub Root118Item32,
    pub Null,
    pub Null,
    pub Null,
    pub Root118Item36,
);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root118Item(pub String, pub Null, pub Null, pub Root118Item3);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1190(pub i64);
impl std::ops::Deref for Root1190 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1190 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root1190: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1190: integer above maximum"));
        }

        Ok(Root1190(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root11912(pub f64);
impl std::ops::Deref for Root11912 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root11912 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root11912: non-finite number"));
        }
        if x < 37.660883699999999 {
            return Err(DeError::custom("Root11912: number below minimum"));
        }
        if x > 37.660883699999999 {
            return Err(DeError::custom("Root11912: number above maximum"));
        }

        Ok(Root11912(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root11913(pub f64);
impl std::ops::Deref for Root11913 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root11913 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root11913: non-finite number"));
        }
        if x < -113.068060299999999 {
            return Err(DeError::custom("Root11913: number below minimum"));
        }
        if x > -113.068060299999999 {
            return Err(DeError::custom("Root11913: number above maximum"));
        }

        Ok(Root11913(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root1191(pub Null, pub Null, pub Root11912, pub Root11913);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root119(pub Root1190, pub Root1191);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root125001Item0(pub String);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root125001Item1(pub Vec<Vec<Vec<String>>>);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root125001Item(pub Root125001Item0, pub Root125001Item1);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root125004(pub i64);
impl std::ops::Deref for Root125004 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root125004 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root125004: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root125004: integer above maximum"));
        }

        Ok(Root125004(x))
    }
}
/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root12500(
    pub Null,
    pub Vec<Root125001Item>,
    pub Null,
    pub Null,
    pub Root125004,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1250(pub Root12500);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root125(pub Root1250);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root130(pub i64);
impl std::ops::Deref for Root130 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root130 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root130: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root130: integer above maximum"));
        }

        Ok(Root130(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root13400Item1(pub String);
impl std::ops::Deref for Root13400Item1 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT13400ITEM1: Lazy<Regex> = Lazy::new(|| Regex::new("^0x87.*").unwrap());
impl<'de> Deserialize<'de> for Root13400Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT13400ITEM1.is_match(&s) {
            return Err(DeError::custom("Root13400Item1: string failed pattern"));
        }
        Ok(Root13400Item1(s))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root13400Item(
    pub String,
    pub Root13400Item1,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root13401(pub i64);
impl std::ops::Deref for Root13401 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root13401 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root13401: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root13401: integer above maximum"));
        }

        Ok(Root13401(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root13402(pub i64);
impl std::ops::Deref for Root13402 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root13402 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root13402: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root13402: integer above maximum"));
        }

        Ok(Root13402(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root1340(pub Vec<Root13400Item>, pub Root13401, pub Root13402);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root134(pub Root1340);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root136(pub i64);
impl std::ops::Deref for Root136 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root136 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root136: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root136: integer above maximum"));
        }

        Ok(Root136(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1421010ItemAlt1Item0(pub i64);
impl std::ops::Deref for Root1421010ItemAlt1Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1421010ItemAlt1Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom(
                "Root1421010ItemAlt1Item0: integer below minimum",
            ));
        }
        if x > 67 {
            return Err(DeError::custom(
                "Root1421010ItemAlt1Item0: integer above maximum",
            ));
        }

        Ok(Root1421010ItemAlt1Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1421010ItemAlt1Item1(pub i64);
impl std::ops::Deref for Root1421010ItemAlt1Item1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1421010ItemAlt1Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root1421010ItemAlt1Item1: integer below minimum",
            ));
        }
        if x > 72 {
            return Err(DeError::custom(
                "Root1421010ItemAlt1Item1: integer above maximum",
            ));
        }

        Ok(Root1421010ItemAlt1Item1(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1421010ItemAlt1Item200(pub i64);
impl std::ops::Deref for Root1421010ItemAlt1Item200 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1421010ItemAlt1Item200 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root1421010ItemAlt1Item200: integer below minimum",
            ));
        }
        if x > 5 {
            return Err(DeError::custom(
                "Root1421010ItemAlt1Item200: integer above maximum",
            ));
        }

        Ok(Root1421010ItemAlt1Item200(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1421010ItemAlt1Item20(pub Root1421010ItemAlt1Item200);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1421010ItemAlt1Item2(pub Root1421010ItemAlt1Item20);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root1421010ItemAlt1Item(
    pub Root1421010ItemAlt1Item0,
    pub Root1421010ItemAlt1Item1,
    pub Root1421010ItemAlt1Item2,
);

#[derive(Debug)]
pub enum Root1421010Item {
    V0(String),
    V1(Vec<Root1421010ItemAlt1Item>),
}

impl<'de> Deserialize<'de> for Root1421010Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root1421010Item::V0(x));
        }
        if let Ok(x) =
            <Vec<Root1421010ItemAlt1Item> as serde::Deserialize>::deserialize(val.clone())
        {
            return Ok(Root1421010Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1421012(pub String);
impl std::ops::Deref for Root1421012 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1421012: Lazy<Regex> = Lazy::new(|| Regex::new("^https://.*").unwrap());
impl<'de> Deserialize<'de> for Root1421012 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1421012.is_match(&s) {
            return Err(DeError::custom("Root1421012: string failed pattern"));
        }
        Ok(Root1421012(s))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root142101(pub Vec<Root1421010Item>, pub Null, pub Root1421012);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root142103(pub i64);
impl std::ops::Deref for Root142103 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root142103 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 71446 {
            return Err(DeError::custom("Root142103: integer below minimum"));
        }
        if x > 210379 {
            return Err(DeError::custom("Root142103: integer above maximum"));
        }

        Ok(Root142103(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1421060Item0(pub String);

/// tuple len=5 (required first 5 slots)
#[derive(Debug, Deserialize)]
pub struct Root1421060Item(
    pub Root1421060Item0,
    pub Null,
    pub Null,
    pub Null,
    pub String,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root142106(pub Vec<Root1421060Item>);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root142109(pub i64);
impl std::ops::Deref for Root142109 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root142109 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root142109: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root142109: integer above maximum"));
        }

        Ok(Root142109(x))
    }
}
/// tuple len=13 (required first 13 slots)
#[derive(Debug, Deserialize)]
pub struct Root14210(
    pub Null,
    pub Option<Root142101>,
    pub Null,
    pub Root142103,
    pub Null,
    pub Null,
    pub Option<Root142106>,
    pub Null,
    pub Null,
    pub Option<Root142109>,
    pub Option<String>,
    pub Null,
    pub String,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1421(pub Root14210);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root142(pub Null, pub Root1421);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1460(pub i64);
impl std::ops::Deref for Root1460 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1460 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1460: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root1460: integer above maximum"));
        }

        Ok(Root1460(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root146(pub Root1460);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root157(pub String);
impl std::ops::Deref for Root157 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root157 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root157: expected URI scheme"));
        }
        Ok(Root157(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1600(pub i64);
impl std::ops::Deref for Root1600 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1600 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root1600: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1600: integer above maximum"));
        }

        Ok(Root1600(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root160(pub Root1600);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root161ItemItem0(pub f64);
impl std::ops::Deref for Root161ItemItem0 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root161ItemItem0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root161ItemItem0: non-finite number"));
        }
        if x < 0.0 {
            return Err(DeError::custom("Root161ItemItem0: number below minimum"));
        }
        if x > 3.818518566302188 {
            return Err(DeError::custom("Root161ItemItem0: number above maximum"));
        }

        Ok(Root161ItemItem0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root161ItemItem1(pub i64);
impl std::ops::Deref for Root161ItemItem1 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root161ItemItem1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root161ItemItem1: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root161ItemItem1: integer above maximum"));
        }

        Ok(Root161ItemItem1(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root161ItemItem(pub Root161ItemItem0, pub Root161ItemItem1);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root16400(pub i64);
impl std::ops::Deref for Root16400 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root16400 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root16400: integer below minimum"));
        }
        if x > 29 {
            return Err(DeError::custom("Root16400: integer above maximum"));
        }

        Ok(Root16400(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root1640(pub Root16400, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1641(pub String);
impl std::ops::Deref for Root1641 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1641: Lazy<Regex> = Lazy::new(|| Regex::new("^See .*").unwrap());
impl<'de> Deserialize<'de> for Root1641 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1641.is_match(&s) {
            return Err(DeError::custom("Root1641: string failed pattern"));
        }
        Ok(Root1641(s))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root164(pub Root1640, pub Root1641);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1650(pub i64);
impl std::ops::Deref for Root1650 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1650 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root1650: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1650: integer above maximum"));
        }

        Ok(Root1650(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root165(pub Root1650);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root170(pub i64);
impl std::ops::Deref for Root170 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root170 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root170: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root170: integer above maximum"));
        }

        Ok(Root170(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1740(pub String);
impl std::ops::Deref for Root1740 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1740 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root1740: expected URI scheme"));
        }
        Ok(Root1740(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root174(pub Root1740);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1780101(pub i64);
impl std::ops::Deref for Root1780101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1780101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root1780101: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1780101: integer above maximum"));
        }

        Ok(Root1780101(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root178010(pub String, pub Root1780101);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1780111(pub i64);
impl std::ops::Deref for Root1780111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1780111 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root1780111: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root1780111: integer above maximum"));
        }

        Ok(Root1780111(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root178011(pub String, pub Root1780111);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root17801(pub Root178010, pub Root178011);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root178050(pub String);
impl std::ops::Deref for Root178050 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root178050 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root178050: expected URI scheme"));
        }
        Ok(Root178050(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root178053(pub String);
impl std::ops::Deref for Root178053 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT178053: Lazy<Regex> = Lazy::new(|| Regex::new("^0ahUKEw.*").unwrap());
impl<'de> Deserialize<'de> for Root178053 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT178053.is_match(&s) {
            return Err(DeError::custom("Root178053: string failed pattern"));
        }
        Ok(Root178053(s))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root17805(pub Root178050, pub Null, pub Null, pub Root178053);

/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root1780(
    pub String,
    pub Root17801,
    pub Null,
    pub String,
    pub Null,
    pub Root17805,
);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root178(pub Root1780);

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root181(
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub String,
    pub String,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root183000(pub i64);
impl std::ops::Deref for Root183000 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root183000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom("Root183000: integer below minimum"));
        }
        if x > 7 {
            return Err(DeError::custom("Root183000: integer above maximum"));
        }

        Ok(Root183000(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root183001Item(pub String);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root18300(pub Root183000, pub Vec<Root183001Item>);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root183010(pub i64);
impl std::ops::Deref for Root183010 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root183010 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root183010: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root183010: integer above maximum"));
        }

        Ok(Root183010(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1830110(pub String);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root183011(pub Root1830110);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root18301(pub Root183010, pub Root183011);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root183020(pub i64);
impl std::ops::Deref for Root183020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root183020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root183020: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root183020: integer above maximum"));
        }

        Ok(Root183020(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1830210(pub String);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root183021(pub Root1830210);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root18302(pub Root183020, pub Root183021);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root183030(pub i64);
impl std::ops::Deref for Root183030 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root183030 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root183030: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root183030: integer above maximum"));
        }

        Ok(Root183030(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1830310(pub String);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root183031(pub Root1830310);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root18303(pub Root183030, pub Root183031);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root1830(pub Root18300, pub Root18301, pub Root18302, pub Root18303);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root18316 {
    US,
}
impl<'de> Deserialize<'de> for Root18316 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "US" => Ok(Root18316::US),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root18316 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root18316::US => ser.serialize_str("US"),
        }
    }
}

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root1831(
    pub Option<String>,
    pub Option<String>,
    pub Option<String>,
    pub Option<String>,
    pub Option<String>,
    pub String,
    pub Root18316,
);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root183(pub Root1830, pub Root1831);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1961Item0(pub String);
impl std::ops::Deref for Root1961Item0 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1961ITEM0: Lazy<Regex> = Lazy::new(|| Regex::new("^0ahUKEw.*").unwrap());
impl<'de> Deserialize<'de> for Root1961Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1961ITEM0.is_match(&s) {
            return Err(DeError::custom("Root1961Item0: string failed pattern"));
        }
        Ok(Root1961Item0(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1961Item1(pub String);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1961Item3(pub String);
impl std::ops::Deref for Root1961Item3 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1961ITEM3: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://gstatic\\.com/local/placeinfo/.*").unwrap());
impl<'de> Deserialize<'de> for Root1961Item3 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1961ITEM3.is_match(&s) {
            return Err(DeError::custom("Root1961Item3: string failed pattern"));
        }
        Ok(Root1961Item3(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1961Item4(pub String);
impl std::ops::Deref for Root1961Item4 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1961ITEM4: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://gstatic\\.com/local/placeinfo/.*").unwrap());
impl<'de> Deserialize<'de> for Root1961Item4 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1961ITEM4.is_match(&s) {
            return Err(DeError::custom("Root1961Item4: string failed pattern"));
        }
        Ok(Root1961Item4(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1961Item10ItemItem(pub String);
impl std::ops::Deref for Root1961Item10ItemItem {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1961ITEM10ITEMITEM: Lazy<Regex> =
    Lazy::new(|| Regex::new("^Check-out time: 11:00\u{202f}AM.*").unwrap());
impl<'de> Deserialize<'de> for Root1961Item10ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1961ITEM10ITEMITEM.is_match(&s) {
            return Err(DeError::custom(
                "Root1961Item10ItemItem: string failed pattern",
            ));
        }
        Ok(Root1961Item10ItemItem(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1961Item11(pub i64);
impl std::ops::Deref for Root1961Item11 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1961Item11 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root1961Item11: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1961Item11: integer above maximum"));
        }

        Ok(Root1961Item11(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1961Item12(pub String);
impl std::ops::Deref for Root1961Item12 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1961ITEM12: Lazy<Regex> = Lazy::new(|| Regex::new("^\u{e8b5}.*").unwrap());
impl<'de> Deserialize<'de> for Root1961Item12 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1961ITEM12.is_match(&s) {
            return Err(DeError::custom("Root1961Item12: string failed pattern"));
        }
        Ok(Root1961Item12(s))
    }
}
/// tuple len=13 (required first 10 slots); accepts 10..=13 elements
#[derive(Debug)]
pub struct Root1961Item(
    pub Root1961Item0,
    pub Root1961Item1,
    pub Null,
    pub Root1961Item3,
    pub Root1961Item4,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Vec<Vec<Root1961Item10ItemItem>>>,
    pub Option<Root1961Item11>,
    pub Option<Root1961Item12>,
);

impl<'de> serde::Deserialize<'de> for Root1961Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root1961Item;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 10..=13")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root1961Item, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: Root1961Item0 = match seq.next_element::<Root1961Item0>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(0, &"at least 10 elements"));
                    }
                };
                let a1: Root1961Item1 = match seq.next_element::<Root1961Item1>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 10 elements"));
                    }
                };
                let a2: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(2, &"at least 10 elements"));
                    }
                };
                let a3: Root1961Item3 = match seq.next_element::<Root1961Item3>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 10 elements"));
                    }
                };
                let a4: Root1961Item4 = match seq.next_element::<Root1961Item4>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 10 elements"));
                    }
                };
                let a5: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(5, &"at least 10 elements"));
                    }
                };
                let a6: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(6, &"at least 10 elements"));
                    }
                };
                let a7: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(7, &"at least 10 elements"));
                    }
                };
                let a8: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(8, &"at least 10 elements"));
                    }
                };
                let a9: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(9, &"at least 10 elements"));
                    }
                };
                let a10: Option<Vec<Vec<Root1961Item10ItemItem>>> =
                    match seq.next_element::<Option<Vec<Vec<Root1961Item10ItemItem>>>>()? {
                        Some(v) => v,
                        None => None,
                    };
                let a11: Option<Root1961Item11> =
                    match seq.next_element::<Option<Root1961Item11>>()? {
                        Some(v) => v,
                        None => None,
                    };
                let a12: Option<Root1961Item12> =
                    match seq.next_element::<Option<Root1961Item12>>()? {
                        Some(v) => v,
                        None => None,
                    };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root1961Item(
                    a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1963Item0(pub i64);
impl std::ops::Deref for Root1963Item0 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1963Item0 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root1963Item0: integer below minimum"));
        }
        if x > 30 {
            return Err(DeError::custom("Root1963Item0: integer above maximum"));
        }

        Ok(Root1963Item0(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1963Item10(pub String);
impl std::ops::Deref for Root1963Item10 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1963ITEM10: Lazy<Regex> = Lazy::new(|| Regex::new("^0ahUKEw.*").unwrap());
impl<'de> Deserialize<'de> for Root1963Item10 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1963ITEM10.is_match(&s) {
            return Err(DeError::custom("Root1963Item10: string failed pattern"));
        }
        Ok(Root1963Item10(s))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root1963Item11(pub String);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1963Item13(pub String);
impl std::ops::Deref for Root1963Item13 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1963ITEM13: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://gstatic\\.com/local/placeinfo/.*").unwrap());
impl<'de> Deserialize<'de> for Root1963Item13 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1963ITEM13.is_match(&s) {
            return Err(DeError::custom("Root1963Item13: string failed pattern"));
        }
        Ok(Root1963Item13(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1963Item14(pub String);
impl std::ops::Deref for Root1963Item14 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1963ITEM14: Lazy<Regex> =
    Lazy::new(|| Regex::new("^https://gstatic\\.com/local/placeinfo/.*").unwrap());
impl<'de> Deserialize<'de> for Root1963Item14 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1963ITEM14.is_match(&s) {
            return Err(DeError::custom("Root1963Item14: string failed pattern"));
        }
        Ok(Root1963Item14(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1963Item110ItemItem(pub String);
impl std::ops::Deref for Root1963Item110ItemItem {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1963ITEM110ITEMITEM: Lazy<Regex> =
    Lazy::new(|| Regex::new("^Check-out time: 11:00\u{202f}AM.*").unwrap());
impl<'de> Deserialize<'de> for Root1963Item110ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1963ITEM110ITEMITEM.is_match(&s) {
            return Err(DeError::custom(
                "Root1963Item110ItemItem: string failed pattern",
            ));
        }
        Ok(Root1963Item110ItemItem(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root1963Item111(pub i64);
impl std::ops::Deref for Root1963Item111 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root1963Item111 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root1963Item111: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root1963Item111: integer above maximum"));
        }

        Ok(Root1963Item111(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root1963Item112(pub String);
impl std::ops::Deref for Root1963Item112 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT1963ITEM112: Lazy<Regex> = Lazy::new(|| Regex::new("^\u{e8b5}.*").unwrap());
impl<'de> Deserialize<'de> for Root1963Item112 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT1963ITEM112.is_match(&s) {
            return Err(DeError::custom("Root1963Item112: string failed pattern"));
        }
        Ok(Root1963Item112(s))
    }
}
/// tuple len=13 (required first 10 slots); accepts 10..=13 elements
#[derive(Debug)]
pub struct Root1963Item1(
    pub Root1963Item10,
    pub Root1963Item11,
    pub Null,
    pub Root1963Item13,
    pub Root1963Item14,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Vec<Vec<Root1963Item110ItemItem>>>,
    pub Option<Root1963Item111>,
    pub Option<Root1963Item112>,
);

impl<'de> serde::Deserialize<'de> for Root1963Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root1963Item1;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 10..=13")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root1963Item1, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: Root1963Item10 = match seq.next_element::<Root1963Item10>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(0, &"at least 10 elements"));
                    }
                };
                let a1: Root1963Item11 = match seq.next_element::<Root1963Item11>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 10 elements"));
                    }
                };
                let a2: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(2, &"at least 10 elements"));
                    }
                };
                let a3: Root1963Item13 = match seq.next_element::<Root1963Item13>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 10 elements"));
                    }
                };
                let a4: Root1963Item14 = match seq.next_element::<Root1963Item14>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 10 elements"));
                    }
                };
                let a5: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(5, &"at least 10 elements"));
                    }
                };
                let a6: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(6, &"at least 10 elements"));
                    }
                };
                let a7: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(7, &"at least 10 elements"));
                    }
                };
                let a8: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(8, &"at least 10 elements"));
                    }
                };
                let a9: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(9, &"at least 10 elements"));
                    }
                };
                let a10: Option<Vec<Vec<Root1963Item110ItemItem>>> =
                    match seq.next_element::<Option<Vec<Vec<Root1963Item110ItemItem>>>>()? {
                        Some(v) => v,
                        None => None,
                    };
                let a11: Option<Root1963Item111> =
                    match seq.next_element::<Option<Root1963Item111>>()? {
                        Some(v) => v,
                        None => None,
                    };
                let a12: Option<Root1963Item112> =
                    match seq.next_element::<Option<Root1963Item112>>()? {
                        Some(v) => v,
                        None => None,
                    };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root1963Item1(
                    a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root1963Item(pub Root1963Item0, pub Root1963Item1);

/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root196(
    pub Null,
    pub Vec<Root1961Item>,
    pub Null,
    pub Vec<Root1963Item>,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203000(pub String);
impl std::ops::Deref for Root203000 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203000: Lazy<Regex> = Lazy::new(|| Regex::new("^Friday.*").unwrap());
impl<'de> Deserialize<'de> for Root203000 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203000.is_match(&s) {
            return Err(DeError::custom("Root203000: string failed pattern"));
        }
        Ok(Root203000(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203001(pub i64);
impl std::ops::Deref for Root203001 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203001 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root203001: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root203001: integer above maximum"));
        }

        Ok(Root203001(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030020(pub i64);
impl std::ops::Deref for Root2030020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2030020: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2030020: integer above maximum"));
        }

        Ok(Root2030020(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030021(pub i64);
impl std::ops::Deref for Root2030021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030021 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030021: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030021: integer above maximum"));
        }

        Ok(Root2030021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030022(pub i64);
impl std::ops::Deref for Root2030022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030022 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root2030022: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root2030022: integer above maximum"));
        }

        Ok(Root2030022(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203002(pub Root2030020, pub Root2030021, pub Root2030022);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203003ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root203003ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203003ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203003ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203003ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root203003ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203003ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root203003ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203003ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 11 {
            return Err(DeError::custom(
                "Root203003ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 59 {
            return Err(DeError::custom(
                "Root203003ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root203003ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203003ItemItemAlt1(
    pub Vec<Root203003ItemItemAlt10Item>,
    pub Vec<Root203003ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root203003ItemItem {
    V0(String),
    V1(Root203003ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root203003ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203003ItemItem::V0(x));
        }
        if let Ok(x) = <Root203003ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203003ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203004(pub i64);
impl std::ops::Deref for Root203004 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203004 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203004: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root203004: integer above maximum"));
        }

        Ok(Root203004(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203005(pub i64);
impl std::ops::Deref for Root203005 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203005 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203005: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203005: integer above maximum"));
        }

        Ok(Root203005(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20300(
    pub Root203000,
    pub Root203001,
    pub Root203002,
    pub Vec<Vec<Root203003ItemItem>>,
    pub Root203004,
    pub Root203005,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203010(pub String);
impl std::ops::Deref for Root203010 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203010: Lazy<Regex> = Lazy::new(|| Regex::new("^Saturday.*").unwrap());
impl<'de> Deserialize<'de> for Root203010 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203010.is_match(&s) {
            return Err(DeError::custom("Root203010: string failed pattern"));
        }
        Ok(Root203010(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203011(pub i64);
impl std::ops::Deref for Root203011 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203011 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom("Root203011: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root203011: integer above maximum"));
        }

        Ok(Root203011(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030120(pub i64);
impl std::ops::Deref for Root2030120 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030120 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2030120: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2030120: integer above maximum"));
        }

        Ok(Root2030120(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030121(pub i64);
impl std::ops::Deref for Root2030121 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030121 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030121: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030121: integer above maximum"));
        }

        Ok(Root2030121(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030122(pub i64);
impl std::ops::Deref for Root2030122 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030122 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom("Root2030122: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root2030122: integer above maximum"));
        }

        Ok(Root2030122(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203012(pub Root2030120, pub Root2030121, pub Root2030122);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203013ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root203013ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203013ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203013ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203013ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root203013ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203013ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root203013ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203013ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 11 {
            return Err(DeError::custom(
                "Root203013ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203013ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root203013ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203013ItemItemAlt1(
    pub Vec<Root203013ItemItemAlt10Item>,
    pub Vec<Root203013ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root203013ItemItem {
    V0(String),
    V1(Root203013ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root203013ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203013ItemItem::V0(x));
        }
        if let Ok(x) = <Root203013ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203013ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203014(pub i64);
impl std::ops::Deref for Root203014 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203014 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203014: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root203014: integer above maximum"));
        }

        Ok(Root203014(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203015(pub i64);
impl std::ops::Deref for Root203015 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203015 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203015: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203015: integer above maximum"));
        }

        Ok(Root203015(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20301(
    pub Root203010,
    pub Root203011,
    pub Root203012,
    pub Vec<Vec<Root203013ItemItem>>,
    pub Root203014,
    pub Root203015,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203020(pub String);
impl std::ops::Deref for Root203020 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203020: Lazy<Regex> = Lazy::new(|| Regex::new("^Sunday.*").unwrap());
impl<'de> Deserialize<'de> for Root203020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203020.is_match(&s) {
            return Err(DeError::custom("Root203020: string failed pattern"));
        }
        Ok(Root203020(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203021(pub i64);
impl std::ops::Deref for Root203021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203021 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom("Root203021: integer below minimum"));
        }
        if x > 7 {
            return Err(DeError::custom("Root203021: integer above maximum"));
        }

        Ok(Root203021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030220(pub i64);
impl std::ops::Deref for Root2030220 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030220 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2030220: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2030220: integer above maximum"));
        }

        Ok(Root2030220(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030221(pub i64);
impl std::ops::Deref for Root2030221 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030221 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030221: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030221: integer above maximum"));
        }

        Ok(Root2030221(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030222(pub i64);
impl std::ops::Deref for Root2030222 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030222 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 7 {
            return Err(DeError::custom("Root2030222: integer below minimum"));
        }
        if x > 7 {
            return Err(DeError::custom("Root2030222: integer above maximum"));
        }

        Ok(Root2030222(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203022(pub Root2030220, pub Root2030221, pub Root2030222);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030230ItemAlt10Item(pub i64);
impl std::ops::Deref for Root2030230ItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030230ItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 6 {
            return Err(DeError::custom(
                "Root2030230ItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root2030230ItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root2030230ItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030230ItemAlt11Item(pub i64);
impl std::ops::Deref for Root2030230ItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030230ItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12 {
            return Err(DeError::custom(
                "Root2030230ItemAlt11Item: integer below minimum",
            ));
        }
        if x > 59 {
            return Err(DeError::custom(
                "Root2030230ItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root2030230ItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root2030230ItemAlt1(
    pub Vec<Root2030230ItemAlt10Item>,
    pub Vec<Root2030230ItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root2030230Item {
    V0(String),
    V1(Root2030230ItemAlt1),
}

impl<'de> Deserialize<'de> for Root2030230Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root2030230Item::V0(x));
        }
        if let Ok(x) = <Root2030230ItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root2030230Item::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root203023(pub Vec<Root2030230Item>);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203024(pub i64);
impl std::ops::Deref for Root203024 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203024 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203024: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root203024: integer above maximum"));
        }

        Ok(Root203024(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203025(pub i64);
impl std::ops::Deref for Root203025 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203025 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203025: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203025: integer above maximum"));
        }

        Ok(Root203025(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20302(
    pub Root203020,
    pub Root203021,
    pub Root203022,
    pub Root203023,
    pub Root203024,
    pub Root203025,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203030(pub String);
impl std::ops::Deref for Root203030 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203030: Lazy<Regex> = Lazy::new(|| Regex::new("^Monday.*").unwrap());
impl<'de> Deserialize<'de> for Root203030 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203030.is_match(&s) {
            return Err(DeError::custom("Root203030: string failed pattern"));
        }
        Ok(Root203030(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203031(pub i64);
impl std::ops::Deref for Root203031 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203031 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203031: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root203031: integer above maximum"));
        }

        Ok(Root203031(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030320(pub i64);
impl std::ops::Deref for Root2030320 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030320 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2030320: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2030320: integer above maximum"));
        }

        Ok(Root2030320(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030321(pub i64);
impl std::ops::Deref for Root2030321 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030321 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030321: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030321: integer above maximum"));
        }

        Ok(Root2030321(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030322(pub i64);
impl std::ops::Deref for Root2030322 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030322 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 8 {
            return Err(DeError::custom("Root2030322: integer below minimum"));
        }
        if x > 8 {
            return Err(DeError::custom("Root2030322: integer above maximum"));
        }

        Ok(Root2030322(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203032(pub Root2030320, pub Root2030321, pub Root2030322);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203033ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root203033ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203033ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203033ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203033ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root203033ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203033ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root203033ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203033ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203033ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 59 {
            return Err(DeError::custom(
                "Root203033ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root203033ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203033ItemItemAlt1(
    pub Vec<Root203033ItemItemAlt10Item>,
    pub Vec<Root203033ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root203033ItemItem {
    V0(String),
    V1(Root203033ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root203033ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203033ItemItem::V0(x));
        }
        if let Ok(x) = <Root203033ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203033ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203034(pub i64);
impl std::ops::Deref for Root203034 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203034 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203034: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root203034: integer above maximum"));
        }

        Ok(Root203034(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203035(pub i64);
impl std::ops::Deref for Root203035 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203035 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203035: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203035: integer above maximum"));
        }

        Ok(Root203035(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20303(
    pub Root203030,
    pub Root203031,
    pub Root203032,
    pub Vec<Vec<Root203033ItemItem>>,
    pub Root203034,
    pub Root203035,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203040(pub String);
impl std::ops::Deref for Root203040 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203040: Lazy<Regex> = Lazy::new(|| Regex::new("^Tuesday.*").unwrap());
impl<'de> Deserialize<'de> for Root203040 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203040.is_match(&s) {
            return Err(DeError::custom("Root203040: string failed pattern"));
        }
        Ok(Root203040(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203041(pub i64);
impl std::ops::Deref for Root203041 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203041 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root203041: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203041: integer above maximum"));
        }

        Ok(Root203041(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030420(pub i64);
impl std::ops::Deref for Root2030420 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030420 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2030420: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2030420: integer above maximum"));
        }

        Ok(Root2030420(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030421(pub i64);
impl std::ops::Deref for Root2030421 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030421 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030421: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030421: integer above maximum"));
        }

        Ok(Root2030421(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030422(pub i64);
impl std::ops::Deref for Root2030422 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030422 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030422: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030422: integer above maximum"));
        }

        Ok(Root2030422(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203042(pub Root2030420, pub Root2030421, pub Root2030422);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203043ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root203043ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203043ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203043ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203043ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root203043ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203043ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root203043ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203043ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12 {
            return Err(DeError::custom(
                "Root203043ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 59 {
            return Err(DeError::custom(
                "Root203043ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root203043ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203043ItemItemAlt1(
    pub Vec<Root203043ItemItemAlt10Item>,
    pub Vec<Root203043ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root203043ItemItem {
    V0(String),
    V1(Root203043ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root203043ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203043ItemItem::V0(x));
        }
        if let Ok(x) = <Root203043ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203043ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203044(pub i64);
impl std::ops::Deref for Root203044 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203044 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203044: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root203044: integer above maximum"));
        }

        Ok(Root203044(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203045(pub i64);
impl std::ops::Deref for Root203045 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203045 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203045: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203045: integer above maximum"));
        }

        Ok(Root203045(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20304(
    pub Root203040,
    pub Root203041,
    pub Root203042,
    pub Vec<Vec<Root203043ItemItem>>,
    pub Root203044,
    pub Root203045,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203050(pub String);
impl std::ops::Deref for Root203050 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203050: Lazy<Regex> = Lazy::new(|| Regex::new("^Wednesday.*").unwrap());
impl<'de> Deserialize<'de> for Root203050 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203050.is_match(&s) {
            return Err(DeError::custom("Root203050: string failed pattern"));
        }
        Ok(Root203050(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203051(pub i64);
impl std::ops::Deref for Root203051 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203051 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 3 {
            return Err(DeError::custom("Root203051: integer below minimum"));
        }
        if x > 3 {
            return Err(DeError::custom("Root203051: integer above maximum"));
        }

        Ok(Root203051(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030520(pub i64);
impl std::ops::Deref for Root2030520 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030520 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2030520: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2030520: integer above maximum"));
        }

        Ok(Root2030520(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030521(pub i64);
impl std::ops::Deref for Root2030521 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030521 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030521: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030521: integer above maximum"));
        }

        Ok(Root2030521(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030522(pub i64);
impl std::ops::Deref for Root2030522 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030522 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 10 {
            return Err(DeError::custom("Root2030522: integer below minimum"));
        }
        if x > 10 {
            return Err(DeError::custom("Root2030522: integer above maximum"));
        }

        Ok(Root2030522(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203052(pub Root2030520, pub Root2030521, pub Root2030522);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203053ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root203053ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203053ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203053ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203053ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root203053ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203053ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root203053ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203053ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12 {
            return Err(DeError::custom(
                "Root203053ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 59 {
            return Err(DeError::custom(
                "Root203053ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root203053ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203053ItemItemAlt1(
    pub Vec<Root203053ItemItemAlt10Item>,
    pub Vec<Root203053ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root203053ItemItem {
    V0(String),
    V1(Root203053ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root203053ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203053ItemItem::V0(x));
        }
        if let Ok(x) = <Root203053ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203053ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203054(pub i64);
impl std::ops::Deref for Root203054 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203054 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203054: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root203054: integer above maximum"));
        }

        Ok(Root203054(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203055(pub i64);
impl std::ops::Deref for Root203055 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203055 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203055: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203055: integer above maximum"));
        }

        Ok(Root203055(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20305(
    pub Root203050,
    pub Root203051,
    pub Root203052,
    pub Vec<Vec<Root203053ItemItem>>,
    pub Root203054,
    pub Root203055,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203060(pub String);
impl std::ops::Deref for Root203060 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203060: Lazy<Regex> = Lazy::new(|| Regex::new("^Thursday.*").unwrap());
impl<'de> Deserialize<'de> for Root203060 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203060.is_match(&s) {
            return Err(DeError::custom("Root203060: string failed pattern"));
        }
        Ok(Root203060(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203061(pub i64);
impl std::ops::Deref for Root203061 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203061 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root203061: integer below minimum"));
        }
        if x > 4 {
            return Err(DeError::custom("Root203061: integer above maximum"));
        }

        Ok(Root203061(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030620(pub i64);
impl std::ops::Deref for Root2030620 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030620 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2030620: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2030620: integer above maximum"));
        }

        Ok(Root2030620(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030621(pub i64);
impl std::ops::Deref for Root2030621 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030621 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2030621: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2030621: integer above maximum"));
        }

        Ok(Root2030621(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2030622(pub i64);
impl std::ops::Deref for Root2030622 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2030622 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 11 {
            return Err(DeError::custom("Root2030622: integer below minimum"));
        }
        if x > 11 {
            return Err(DeError::custom("Root2030622: integer above maximum"));
        }

        Ok(Root2030622(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203062(pub Root2030620, pub Root2030621, pub Root2030622);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203063ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root203063ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203063ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203063ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203063ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root203063ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203063ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root203063ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203063ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 12 {
            return Err(DeError::custom(
                "Root203063ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 59 {
            return Err(DeError::custom(
                "Root203063ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root203063ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203063ItemItemAlt1(
    pub Vec<Root203063ItemItemAlt10Item>,
    pub Vec<Root203063ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root203063ItemItem {
    V0(String),
    V1(Root203063ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root203063ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203063ItemItem::V0(x));
        }
        if let Ok(x) = <Root203063ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203063ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203064(pub i64);
impl std::ops::Deref for Root203064 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203064 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203064: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root203064: integer above maximum"));
        }

        Ok(Root203064(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203065(pub i64);
impl std::ops::Deref for Root203065 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203065 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203065: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203065: integer above maximum"));
        }

        Ok(Root203065(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20306(
    pub Root203060,
    pub Root203061,
    pub Root203062,
    pub Vec<Vec<Root203063ItemItem>>,
    pub Root203064,
    pub Root203065,
);

/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root2030(
    pub Root20300,
    pub Root20301,
    pub Root20302,
    pub Root20303,
    pub Root20304,
    pub Root20305,
    pub Root20306,
);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root203100(pub String);
impl std::ops::Deref for Root203100 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT203100: Lazy<Regex> = Lazy::new(|| Regex::new("^Friday.*").unwrap());
impl<'de> Deserialize<'de> for Root203100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT203100.is_match(&s) {
            return Err(DeError::custom("Root203100: string failed pattern"));
        }
        Ok(Root203100(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203101(pub i64);
impl std::ops::Deref for Root203101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root203101: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root203101: integer above maximum"));
        }

        Ok(Root203101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031020(pub i64);
impl std::ops::Deref for Root2031020 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031020 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2025 {
            return Err(DeError::custom("Root2031020: integer below minimum"));
        }
        if x > 2025 {
            return Err(DeError::custom("Root2031020: integer above maximum"));
        }

        Ok(Root2031020(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031021(pub i64);
impl std::ops::Deref for Root2031021 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031021 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 9 {
            return Err(DeError::custom("Root2031021: integer below minimum"));
        }
        if x > 9 {
            return Err(DeError::custom("Root2031021: integer above maximum"));
        }

        Ok(Root2031021(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031022(pub i64);
impl std::ops::Deref for Root2031022 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031022 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root2031022: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root2031022: integer above maximum"));
        }

        Ok(Root2031022(x))
    }
}
/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root203102(pub Root2031020, pub Root2031021, pub Root2031022);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203103ItemItemAlt10Item(pub i64);
impl std::ops::Deref for Root203103ItemItemAlt10Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203103ItemItemAlt10Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom(
                "Root203103ItemItemAlt10Item: integer below minimum",
            ));
        }
        if x > 30 {
            return Err(DeError::custom(
                "Root203103ItemItemAlt10Item: integer above maximum",
            ));
        }

        Ok(Root203103ItemItemAlt10Item(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203103ItemItemAlt11Item(pub i64);
impl std::ops::Deref for Root203103ItemItemAlt11Item {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203103ItemItemAlt11Item {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 11 {
            return Err(DeError::custom(
                "Root203103ItemItemAlt11Item: integer below minimum",
            ));
        }
        if x > 59 {
            return Err(DeError::custom(
                "Root203103ItemItemAlt11Item: integer above maximum",
            ));
        }

        Ok(Root203103ItemItemAlt11Item(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203103ItemItemAlt1(
    pub Vec<Root203103ItemItemAlt10Item>,
    pub Vec<Root203103ItemItemAlt11Item>,
);

#[derive(Debug)]
pub enum Root203103ItemItem {
    V0(String),
    V1(Root203103ItemItemAlt1),
}

impl<'de> Deserialize<'de> for Root203103ItemItem {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        // deserialize into a serde_json::Value once, then attempt each arm (strict)
        let val = serde_json::Value::deserialize(de)?;
        if let Ok(x) = <String as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203103ItemItem::V0(x));
        }
        if let Ok(x) = <Root203103ItemItemAlt1 as serde::Deserialize>::deserialize(val.clone()) {
            return Ok(Root203103ItemItem::V1(x));
        }
        Err(DeError::custom("no union arm matched"))
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203104(pub i64);
impl std::ops::Deref for Root203104 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203104 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root203104: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root203104: integer above maximum"));
        }

        Ok(Root203104(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root203105(pub i64);
impl std::ops::Deref for Root203105 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root203105 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root203105: integer below minimum"));
        }
        if x > 2 {
            return Err(DeError::custom("Root203105: integer above maximum"));
        }

        Ok(Root203105(x))
    }
}
/// tuple len=6 (required first 6 slots)
#[derive(Debug, Deserialize)]
pub struct Root20310(
    pub Root203100,
    pub Root203101,
    pub Root203102,
    pub Vec<Vec<Root203103ItemItem>>,
    pub Root203104,
    pub Root203105,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20311(pub i64);
impl std::ops::Deref for Root20311 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20311 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root20311: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root20311: integer above maximum"));
        }

        Ok(Root20311(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20312(pub i64);
impl std::ops::Deref for Root20312 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20312 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root20312: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root20312: integer above maximum"));
        }

        Ok(Root20312(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20314100(pub i64);
impl std::ops::Deref for Root20314100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20314100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root20314100: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root20314100: integer above maximum"));
        }

        Ok(Root20314100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20314101(pub i64);
impl std::ops::Deref for Root20314101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20314101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root20314101: integer below minimum"));
        }
        if x > 13 {
            return Err(DeError::custom("Root20314101: integer above maximum"));
        }

        Ok(Root20314101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031410210(pub i64);
impl std::ops::Deref for Root2031410210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031410210 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4279862841 {
            return Err(DeError::custom("Root2031410210: integer below minimum"));
        }
        if x > 4292621870 {
            return Err(DeError::custom("Root2031410210: integer above maximum"));
        }

        Ok(Root2031410210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031410211(pub i64);
impl std::ops::Deref for Root2031410211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031410211 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4285388172 {
            return Err(DeError::custom("Root2031410211: integer below minimum"));
        }
        if x > 4294949673 {
            return Err(DeError::custom("Root2031410211: integer above maximum"));
        }

        Ok(Root2031410211(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203141021(pub Root2031410210, pub Root2031410211);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root20314102(pub Null, pub Root203141021);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root2031410(pub Root20314100, pub Root20314101, pub Root20314102);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root203141(pub Root2031410);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root20314(pub String, pub Root203141);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20315100(pub i64);
impl std::ops::Deref for Root20315100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20315100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root20315100: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root20315100: integer above maximum"));
        }

        Ok(Root20315100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20315101(pub i64);
impl std::ops::Deref for Root20315101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20315101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root20315101: integer below minimum"));
        }
        if x > 13 {
            return Err(DeError::custom("Root20315101: integer above maximum"));
        }

        Ok(Root20315101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031510210(pub i64);
impl std::ops::Deref for Root2031510210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031510210 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4279862841 {
            return Err(DeError::custom("Root2031510210: integer below minimum"));
        }
        if x > 4292621870 {
            return Err(DeError::custom("Root2031510210: integer above maximum"));
        }

        Ok(Root2031510210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031510211(pub i64);
impl std::ops::Deref for Root2031510211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031510211 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4285388172 {
            return Err(DeError::custom("Root2031510211: integer below minimum"));
        }
        if x > 4294949673 {
            return Err(DeError::custom("Root2031510211: integer above maximum"));
        }

        Ok(Root2031510211(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203151021(pub Root2031510210, pub Root2031510211);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root20315102(pub Null, pub Root203151021);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root2031510(pub Root20315100, pub Root20315101, pub Root20315102);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root203151(pub Root2031510);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root20315(pub String, pub Root203151);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root203180 {
    Closed,
    Open,
}
impl<'de> Deserialize<'de> for Root203180 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "Closed" => Ok(Root203180::Closed),
            "Open" => Ok(Root203180::Open),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root203180 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root203180::Closed => ser.serialize_str("Closed"),
            Root203180::Open => ser.serialize_str("Open"),
        }
    }
}

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20318100(pub i64);
impl std::ops::Deref for Root20318100 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20318100 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 0 {
            return Err(DeError::custom("Root20318100: integer below minimum"));
        }
        if x > 0 {
            return Err(DeError::custom("Root20318100: integer above maximum"));
        }

        Ok(Root20318100(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root20318101(pub i64);
impl std::ops::Deref for Root20318101 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20318101 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4 {
            return Err(DeError::custom("Root20318101: integer below minimum"));
        }
        if x > 6 {
            return Err(DeError::custom("Root20318101: integer above maximum"));
        }

        Ok(Root20318101(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031810210(pub i64);
impl std::ops::Deref for Root2031810210 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031810210 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4279862841 {
            return Err(DeError::custom("Root2031810210: integer below minimum"));
        }
        if x > 4292621870 {
            return Err(DeError::custom("Root2031810210: integer above maximum"));
        }

        Ok(Root2031810210(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2031810211(pub i64);
impl std::ops::Deref for Root2031810211 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2031810211 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 4285388172 {
            return Err(DeError::custom("Root2031810211: integer below minimum"));
        }
        if x > 4294097077 {
            return Err(DeError::custom("Root2031810211: integer above maximum"));
        }

        Ok(Root2031810211(x))
    }
}
/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root203181021(pub Root2031810210, pub Root2031810211);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root20318102(pub Null, pub Root203181021);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root2031810(pub Root20318100, pub Root20318101, pub Root20318102);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root203181(pub Root2031810);

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root20318(pub Root203180, pub Root203181);

/// tuple len=9 (required first 9 slots)
#[derive(Debug, Deserialize)]
pub struct Root2031(
    pub Root20310,
    pub Option<Root20311>,
    pub Root20312,
    pub Null,
    pub Root20314,
    pub Root20315,
    pub Null,
    pub Null,
    pub Root20318,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2032(pub i64);
impl std::ops::Deref for Root2032 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2032 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 5 {
            return Err(DeError::custom("Root2032: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root2032: integer above maximum"));
        }

        Ok(Root2032(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2036(pub i64);
impl std::ops::Deref for Root2036 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2036 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root2036: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root2036: integer above maximum"));
        }

        Ok(Root2036(x))
    }
}
/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root203(
    pub Root2030,
    pub Root2031,
    pub Root2032,
    pub Null,
    pub Null,
    pub Null,
    pub Root2036,
);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root205(pub i64);
impl std::ops::Deref for Root205 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root205 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root205: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root205: integer above maximum"));
        }

        Ok(Root205(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root20802(pub f64);
impl std::ops::Deref for Root20802 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20802 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root20802: non-finite number"));
        }
        if x < 35.976768799999995 {
            return Err(DeError::custom("Root20802: number below minimum"));
        }
        if x > 42.395527000000001 {
            return Err(DeError::custom("Root20802: number above maximum"));
        }

        Ok(Root20802(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root20803(pub f64);
impl std::ops::Deref for Root20803 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root20803 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root20803: non-finite number"));
        }
        if x < -115.005679700000002 {
            return Err(DeError::custom("Root20803: number below minimum"));
        }
        if x > -106.677120000000002 {
            return Err(DeError::custom("Root20803: number above maximum"));
        }

        Ok(Root20803(x))
    }
}
/// tuple len=4 (required first 4 slots)
#[derive(Debug, Deserialize)]
pub struct Root2080(pub Null, pub Null, pub Root20802, pub Root20803);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root208(pub Root2080);

#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root209(pub String);
impl std::ops::Deref for Root209 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
static RE_ROOT209: Lazy<Regex> = Lazy::new(|| Regex::new("^CgRndW5z.*").unwrap());
impl<'de> Deserialize<'de> for Root209 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !RE_ROOT209.is_match(&s) {
            return Err(DeError::custom("Root209: string failed pattern"));
        }
        Ok(Root209(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root214(pub i64);
impl std::ops::Deref for Root214 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root214 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 2 {
            return Err(DeError::custom("Root214: integer below minimum"));
        }
        if x > 5 {
            return Err(DeError::custom("Root214: integer above maximum"));
        }

        Ok(Root214(x))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Root2260(pub String);
impl std::ops::Deref for Root2260 {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2260 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        if !(s.starts_with("http://")
            || s.starts_with("https://")
            || s.starts_with("mailto:")
            || s.starts_with("tel:"))
        {
            return Err(DeError::custom("Root2260: expected URI scheme"));
        }
        Ok(Root2260(s))
    }
}
#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct Root2266(pub i64);
impl std::ops::Deref for Root2266 {
    type Target = i64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2266 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = i64::deserialize(de)?;
        if x < 1 {
            return Err(DeError::custom("Root2266: integer below minimum"));
        }
        if x > 1 {
            return Err(DeError::custom("Root2266: integer above maximum"));
        }

        Ok(Root2266(x))
    }
}
/// tuple len=7 (required first 7 slots)
#[derive(Debug, Deserialize)]
pub struct Root226(
    pub Root2260,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root2266,
);

/// tuple len=7 (required first 5 slots); accepts 5..=7 elements
#[derive(Debug)]
pub struct Root2270(
    pub String,
    pub Null,
    pub Null,
    pub String,
    pub String,
    pub Option<String>,
    pub Option<String>,
);

impl<'de> serde::Deserialize<'de> for Root2270 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root2270;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 5..=7")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root2270, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(0, &"at least 5 elements"));
                    }
                };
                let a1: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(1, &"at least 5 elements"));
                    }
                };
                let a2: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(2, &"at least 5 elements"));
                    }
                };
                let a3: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(3, &"at least 5 elements"));
                    }
                };
                let a4: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(4, &"at least 5 elements"));
                    }
                };
                let a5: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => None,
                };
                let a6: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => None,
                };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root2270(a0, a1, a2, a3, a4, a5, a6))
            }
        }
        de.deserialize_seq(V)
    }
}

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root227(pub Root2270);

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Root243 {
    US,
}
impl<'de> Deserialize<'de> for Root243 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(de)?;
        match s.as_str() {
            "US" => Ok(Root243::US),
            _ => Err(DeError::unknown_variant(&s, &[])),
        }
    }
}
impl serde::Serialize for Root243 {
    fn serialize<S>(&self, ser: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Root243::US => ser.serialize_str("US"),
        }
    }
}

/// tuple len=2 (required first 2 slots)
#[derive(Debug, Deserialize)]
pub struct Root2450Item0(pub String, pub String);

#[repr(transparent)]
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct Root2450Item1(pub f64);
impl std::ops::Deref for Root2450Item1 {
    type Target = f64;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Root2450Item1 {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let x = f64::deserialize(de)?;
        if !x.is_finite() {
            return Err(DeError::custom("Root2450Item1: non-finite number"));
        }
        if x < 0.5 {
            return Err(DeError::custom("Root2450Item1: number below minimum"));
        }
        if x > 1.0 {
            return Err(DeError::custom("Root2450Item1: number above maximum"));
        }

        Ok(Root2450Item1(x))
    }
}
/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root2450Item20(pub String);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root2450Item2(pub Root2450Item20);

/// tuple len=3 (required first 3 slots)
#[derive(Debug, Deserialize)]
pub struct Root2450Item(pub Root2450Item0, pub Root2450Item1, pub Root2450Item2);

/// tuple len=1 (required first 1 slots)
#[derive(Debug, Deserialize)]
pub struct Root245(pub Vec<Root2450Item>);

/// tuple len=246 (required first 245 slots); accepts 245..=246 elements
#[derive(Debug)]
pub struct Root(
    pub String,
    pub String,
    pub Option<Vec<String>>,
    pub Null,
    pub Option<Root4>,
    pub Null,
    pub Null,
    pub Option<Root7>,
    pub Null,
    pub Root9,
    pub String,
    pub String,
    pub Null,
    pub Option<Vec<String>>,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Option<Root17>,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root24>,
    pub Root25,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root30,
    pub Null,
    pub Option<Root32>,
    pub Null,
    pub Option<Root34>,
    pub Option<Vec<Option<Root35Item>>>,
    pub Null,
    pub Root37,
    pub Null,
    pub Option<String>,
    pub Option<Root40>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root49>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root57>,
    pub Null,
    pub Null,
    pub Null,
    pub Root61,
    pub Null,
    pub Null,
    pub Option<Vec<Option<Root64Item>>>,
    pub Null,
    pub Null,
    pub Root67,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root72>,
    pub Null,
    pub Null,
    pub Option<Root75>,
    pub Option<Vec<Root76Item>>,
    pub Null,
    pub String,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root82>,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root86>,
    pub Null,
    pub Root88,
    pub String,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Vec<Vec<Root99ItemItem>>>,
    pub Option<Vec<Option<Vec<Vec<Option<Root100ItemItemItem>>>>>>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root105,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root110,
    pub Null,
    pub Option<Root112>,
    pub Option<Root113>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Vec<Root118Item>>,
    pub Option<Root119>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root125>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Root130,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root134>,
    pub Null,
    pub Option<Root136>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root142>,
    pub Null,
    pub Null,
    pub Null,
    pub Root146,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root157>,
    pub Null,
    pub Null,
    pub Option<Root160>,
    pub Option<Vec<Option<Vec<Root161ItemItem>>>>,
    pub Null,
    pub Null,
    pub Option<Root164>,
    pub Option<Root165>,
    pub Option<String>,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root170>,
    pub Null,
    pub Null,
    pub Null,
    pub Root174,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root178>,
    pub Null,
    pub Null,
    pub Option<Root181>,
    pub Null,
    pub Option<Root183>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root196>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root203>,
    pub Null,
    pub Option<Root205>,
    pub Null,
    pub Null,
    pub Option<Root208>,
    pub Root209,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root214>,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root226>,
    pub Root227,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Null,
    pub Option<Root243>,
    pub Null,
    pub Option<Root245>,
);

impl<'de> serde::Deserialize<'de> for Root {
    fn deserialize<D>(de: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        struct V;
        impl<'de> serde::de::Visitor<'de> for V {
            type Value = Root;
            fn expecting(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(f, "array of length 245..=246")
            }
            fn visit_seq<A>(self, mut seq: A) -> Result<Root, A::Error>
            where
                A: serde::de::SeqAccess<'de>,
            {
                let a0: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            0,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a1: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            1,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a2: Option<Vec<String>> = match seq.next_element::<Option<Vec<String>>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            2,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a3: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            3,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a4: Option<Root4> = match seq.next_element::<Option<Root4>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            4,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a5: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            5,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a6: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            6,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a7: Option<Root7> = match seq.next_element::<Option<Root7>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            7,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a8: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            8,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a9: Root9 = match seq.next_element::<Root9>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            9,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a10: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            10,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a11: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            11,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a12: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            12,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a13: Option<Vec<String>> = match seq.next_element::<Option<Vec<String>>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            13,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a14: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            14,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a15: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            15,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a16: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            16,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a17: Option<Root17> = match seq.next_element::<Option<Root17>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            17,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a18: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            18,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a19: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            19,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a20: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            20,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a21: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            21,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a22: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            22,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a23: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            23,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a24: Option<Root24> = match seq.next_element::<Option<Root24>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            24,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a25: Root25 = match seq.next_element::<Root25>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            25,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a26: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            26,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a27: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            27,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a28: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            28,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a29: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            29,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a30: Root30 = match seq.next_element::<Root30>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            30,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a31: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            31,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a32: Option<Root32> = match seq.next_element::<Option<Root32>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            32,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a33: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            33,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a34: Option<Root34> = match seq.next_element::<Option<Root34>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            34,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a35: Option<Vec<Option<Root35Item>>> =
                    match seq.next_element::<Option<Vec<Option<Root35Item>>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(
                                35,
                                &"at least 245 elements",
                            ));
                        }
                    };
                let a36: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            36,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a37: Root37 = match seq.next_element::<Root37>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            37,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a38: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            38,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a39: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            39,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a40: Option<Root40> = match seq.next_element::<Option<Root40>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            40,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a41: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            41,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a42: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            42,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a43: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            43,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a44: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            44,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a45: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            45,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a46: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            46,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a47: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            47,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a48: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            48,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a49: Option<Root49> = match seq.next_element::<Option<Root49>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            49,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a50: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            50,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a51: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            51,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a52: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            52,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a53: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            53,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a54: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            54,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a55: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            55,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a56: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            56,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a57: Option<Root57> = match seq.next_element::<Option<Root57>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            57,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a58: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            58,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a59: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            59,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a60: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            60,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a61: Root61 = match seq.next_element::<Root61>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            61,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a62: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            62,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a63: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            63,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a64: Option<Vec<Option<Root64Item>>> =
                    match seq.next_element::<Option<Vec<Option<Root64Item>>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(
                                64,
                                &"at least 245 elements",
                            ));
                        }
                    };
                let a65: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            65,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a66: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            66,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a67: Root67 = match seq.next_element::<Root67>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            67,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a68: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            68,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a69: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            69,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a70: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            70,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a71: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            71,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a72: Option<Root72> = match seq.next_element::<Option<Root72>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            72,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a73: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            73,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a74: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            74,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a75: Option<Root75> = match seq.next_element::<Option<Root75>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            75,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a76: Option<Vec<Root76Item>> =
                    match seq.next_element::<Option<Vec<Root76Item>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(
                                76,
                                &"at least 245 elements",
                            ));
                        }
                    };
                let a77: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            77,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a78: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            78,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a79: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            79,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a80: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            80,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a81: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            81,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a82: Option<Root82> = match seq.next_element::<Option<Root82>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            82,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a83: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            83,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a84: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            84,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a85: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            85,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a86: Option<Root86> = match seq.next_element::<Option<Root86>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            86,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a87: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            87,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a88: Root88 = match seq.next_element::<Root88>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            88,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a89: String = match seq.next_element::<String>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            89,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a90: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            90,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a91: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            91,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a92: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            92,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a93: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            93,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a94: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            94,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a95: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            95,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a96: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            96,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a97: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            97,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a98: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            98,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a99: Option<Vec<Vec<Root99ItemItem>>> =
                    match seq.next_element::<Option<Vec<Vec<Root99ItemItem>>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(
                                99,
                                &"at least 245 elements",
                            ));
                        }
                    };
                let a100: Option<Vec<Option<Vec<Vec<Option<Root100ItemItemItem>>>>>> =
                    match seq
                        .next_element::<Option<Vec<Option<Vec<Vec<Option<Root100ItemItemItem>>>>>>>(
                        )? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(
                                100,
                                &"at least 245 elements",
                            ));
                        }
                    };
                let a101: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            101,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a102: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            102,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a103: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            103,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a104: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            104,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a105: Root105 = match seq.next_element::<Root105>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            105,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a106: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            106,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a107: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            107,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a108: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            108,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a109: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            109,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a110: Root110 = match seq.next_element::<Root110>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            110,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a111: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            111,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a112: Option<Root112> = match seq.next_element::<Option<Root112>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            112,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a113: Option<Root113> = match seq.next_element::<Option<Root113>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            113,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a114: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            114,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a115: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            115,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a116: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            116,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a117: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            117,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a118: Option<Vec<Root118Item>> =
                    match seq.next_element::<Option<Vec<Root118Item>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(
                                118,
                                &"at least 245 elements",
                            ));
                        }
                    };
                let a119: Option<Root119> = match seq.next_element::<Option<Root119>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            119,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a120: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            120,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a121: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            121,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a122: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            122,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a123: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            123,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a124: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            124,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a125: Option<Root125> = match seq.next_element::<Option<Root125>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            125,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a126: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            126,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a127: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            127,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a128: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            128,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a129: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            129,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a130: Root130 = match seq.next_element::<Root130>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            130,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a131: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            131,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a132: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            132,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a133: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            133,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a134: Option<Root134> = match seq.next_element::<Option<Root134>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            134,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a135: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            135,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a136: Option<Root136> = match seq.next_element::<Option<Root136>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            136,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a137: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            137,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a138: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            138,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a139: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            139,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a140: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            140,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a141: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            141,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a142: Option<Root142> = match seq.next_element::<Option<Root142>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            142,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a143: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            143,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a144: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            144,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a145: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            145,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a146: Root146 = match seq.next_element::<Root146>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            146,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a147: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            147,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a148: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            148,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a149: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            149,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a150: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            150,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a151: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            151,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a152: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            152,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a153: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            153,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a154: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            154,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a155: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            155,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a156: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            156,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a157: Option<Root157> = match seq.next_element::<Option<Root157>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            157,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a158: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            158,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a159: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            159,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a160: Option<Root160> = match seq.next_element::<Option<Root160>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            160,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a161: Option<Vec<Option<Vec<Root161ItemItem>>>> =
                    match seq.next_element::<Option<Vec<Option<Vec<Root161ItemItem>>>>>()? {
                        Some(v) => v,
                        None => {
                            return Err(serde::de::Error::invalid_length(
                                161,
                                &"at least 245 elements",
                            ));
                        }
                    };
                let a162: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            162,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a163: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            163,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a164: Option<Root164> = match seq.next_element::<Option<Root164>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            164,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a165: Option<Root165> = match seq.next_element::<Option<Root165>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            165,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a166: Option<String> = match seq.next_element::<Option<String>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            166,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a167: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            167,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a168: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            168,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a169: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            169,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a170: Option<Root170> = match seq.next_element::<Option<Root170>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            170,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a171: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            171,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a172: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            172,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a173: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            173,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a174: Root174 = match seq.next_element::<Root174>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            174,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a175: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            175,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a176: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            176,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a177: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            177,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a178: Option<Root178> = match seq.next_element::<Option<Root178>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            178,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a179: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            179,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a180: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            180,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a181: Option<Root181> = match seq.next_element::<Option<Root181>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            181,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a182: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            182,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a183: Option<Root183> = match seq.next_element::<Option<Root183>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            183,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a184: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            184,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a185: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            185,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a186: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            186,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a187: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            187,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a188: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            188,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a189: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            189,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a190: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            190,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a191: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            191,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a192: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            192,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a193: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            193,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a194: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            194,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a195: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            195,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a196: Option<Root196> = match seq.next_element::<Option<Root196>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            196,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a197: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            197,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a198: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            198,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a199: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            199,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a200: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            200,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a201: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            201,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a202: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            202,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a203: Option<Root203> = match seq.next_element::<Option<Root203>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            203,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a204: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            204,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a205: Option<Root205> = match seq.next_element::<Option<Root205>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            205,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a206: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            206,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a207: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            207,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a208: Option<Root208> = match seq.next_element::<Option<Root208>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            208,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a209: Root209 = match seq.next_element::<Root209>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            209,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a210: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            210,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a211: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            211,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a212: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            212,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a213: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            213,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a214: Option<Root214> = match seq.next_element::<Option<Root214>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            214,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a215: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            215,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a216: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            216,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a217: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            217,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a218: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            218,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a219: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            219,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a220: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            220,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a221: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            221,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a222: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            222,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a223: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            223,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a224: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            224,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a225: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            225,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a226: Option<Root226> = match seq.next_element::<Option<Root226>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            226,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a227: Root227 = match seq.next_element::<Root227>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            227,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a228: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            228,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a229: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            229,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a230: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            230,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a231: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            231,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a232: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            232,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a233: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            233,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a234: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            234,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a235: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            235,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a236: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            236,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a237: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            237,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a238: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            238,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a239: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            239,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a240: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            240,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a241: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            241,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a242: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            242,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a243: Option<Root243> = match seq.next_element::<Option<Root243>>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            243,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a244: Null = match seq.next_element::<Null>()? {
                    Some(v) => v,
                    None => {
                        return Err(serde::de::Error::invalid_length(
                            244,
                            &"at least 245 elements",
                        ));
                    }
                };
                let a245: Option<Root245> = match seq.next_element::<Option<Root245>>()? {
                    Some(v) => v,
                    None => None,
                };
                if let Some::<serde_json::Value>(_extra) = seq.next_element()? {
                    return Err(serde::de::Error::invalid_length(
                        usize::MAX,
                        &"at most the declared number of elements",
                    ));
                }
                Ok(Root(
                    a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17,
                    a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33,
                    a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49,
                    a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, a61, a62, a63, a64, a65,
                    a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81,
                    a82, a83, a84, a85, a86, a87, a88, a89, a90, a91, a92, a93, a94, a95, a96, a97,
                    a98, a99, a100, a101, a102, a103, a104, a105, a106, a107, a108, a109, a110,
                    a111, a112, a113, a114, a115, a116, a117, a118, a119, a120, a121, a122, a123,
                    a124, a125, a126, a127, a128, a129, a130, a131, a132, a133, a134, a135, a136,
                    a137, a138, a139, a140, a141, a142, a143, a144, a145, a146, a147, a148, a149,
                    a150, a151, a152, a153, a154, a155, a156, a157, a158, a159, a160, a161, a162,
                    a163, a164, a165, a166, a167, a168, a169, a170, a171, a172, a173, a174, a175,
                    a176, a177, a178, a179, a180, a181, a182, a183, a184, a185, a186, a187, a188,
                    a189, a190, a191, a192, a193, a194, a195, a196, a197, a198, a199, a200, a201,
                    a202, a203, a204, a205, a206, a207, a208, a209, a210, a211, a212, a213, a214,
                    a215, a216, a217, a218, a219, a220, a221, a222, a223, a224, a225, a226, a227,
                    a228, a229, a230, a231, a232, a233, a234, a235, a236, a237, a238, a239, a240,
                    a241, a242, a243, a244, a245,
                ))
            }
        }
        de.deserialize_seq(V)
    }
}
